<?php
/**
 * EcedoERPCRMInterfaceApiPreNotifyContractProcessSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiPreNotifyContractProcessSettings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiPreNotifyContractProcessSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.PreNotifyContractProcessSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'organization_id' => 'string',
        'connection_id' => 'string',
        'use_cer_lookup' => 'bool',
        'update_connection' => 'bool',
        'switch_supplier_ean' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'organization_id' => 'uuid',
        'connection_id' => 'uuid',
        'use_cer_lookup' => null,
        'update_connection' => null,
        'switch_supplier_ean' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organization_id' => 'OrganizationId',
        'connection_id' => 'ConnectionId',
        'use_cer_lookup' => 'UseCERLookup',
        'update_connection' => 'UpdateConnection',
        'switch_supplier_ean' => 'SwitchSupplierEAN'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organization_id' => 'setOrganizationId',
        'connection_id' => 'setConnectionId',
        'use_cer_lookup' => 'setUseCerLookup',
        'update_connection' => 'setUpdateConnection',
        'switch_supplier_ean' => 'setSwitchSupplierEan'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organization_id' => 'getOrganizationId',
        'connection_id' => 'getConnectionId',
        'use_cer_lookup' => 'getUseCerLookup',
        'update_connection' => 'getUpdateConnection',
        'switch_supplier_ean' => 'getSwitchSupplierEan'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['organization_id'] = isset($data['organization_id']) ? $data['organization_id'] : null;
        $this->container['connection_id'] = isset($data['connection_id']) ? $data['connection_id'] : null;
        $this->container['use_cer_lookup'] = isset($data['use_cer_lookup']) ? $data['use_cer_lookup'] : null;
        $this->container['update_connection'] = isset($data['update_connection']) ? $data['update_connection'] : null;
        $this->container['switch_supplier_ean'] = isset($data['switch_supplier_ean']) ? $data['switch_supplier_ean'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organization_id
     *
     * @return string
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param string $organization_id Wanneer UpdateConnection de waarde \"true\" heeft moet deze parameter gevuld zijn met het OrganizationId van de klant van de aansluiting
     *
     * @return $this
     */
    public function setOrganizationId($organization_id)
    {
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets connection_id
     *
     * @return string
     */
    public function getConnectionId()
    {
        return $this->container['connection_id'];
    }

    /**
     * Sets connection_id
     *
     * @param string $connection_id Wanneer UpdateConnection de waarde \"true\" heeft moet deze parameter gevuld zijn met het ConnectionId van de aansluiting
     *
     * @return $this
     */
    public function setConnectionId($connection_id)
    {
        $this->container['connection_id'] = $connection_id;

        return $this;
    }

    /**
     * Gets use_cer_lookup
     *
     * @return bool
     */
    public function getUseCerLookup()
    {
        return $this->container['use_cer_lookup'];
    }

    /**
     * Sets use_cer_lookup
     *
     * @param bool $use_cer_lookup Met behulp van deze parameter kan het Contract Einde Register (CER) bevraagd worden om de gegevens van het huidige contract op te vragen. Wanneer deze variabele \"true\" is wordt het CERLookupData-object in de response gevuld
     *
     * @return $this
     */
    public function setUseCerLookup($use_cer_lookup)
    {
        $this->container['use_cer_lookup'] = $use_cer_lookup;

        return $this;
    }

    /**
     * Gets update_connection
     *
     * @return bool
     */
    public function getUpdateConnection()
    {
        return $this->container['update_connection'];
    }

    /**
     * Sets update_connection
     *
     * @param bool $update_connection Het het aanmelden van het contract in het CER kan een bestaande aansluiting automatisch bijgewerkt worden met de gegevens die nu uit het C-AR op te vragen zijn. Dat wordt alleen gedaan wanneer deze variabele \"true\" is
     *
     * @return $this
     */
    public function setUpdateConnection($update_connection)
    {
        $this->container['update_connection'] = $update_connection;

        return $this;
    }

    /**
     * Gets switch_supplier_ean
     *
     * @return string
     */
    public function getSwitchSupplierEan()
    {
        return $this->container['switch_supplier_ean'];
    }

    /**
     * Sets switch_supplier_ean
     *
     * @param string $switch_supplier_ean Indien er in een omgeving meerdere leverancier-EANs geconfigureerd zijn kan met behulp van deze parameter aangegeven worden welke leverancier-EAN gebruikt moet worden om de aanmelding van het contract mee te doen. Standaard wordt de hoofd-EAN gebruikt.
     *
     * @return $this
     */
    public function setSwitchSupplierEan($switch_supplier_ean)
    {
        $this->container['switch_supplier_ean'] = $switch_supplier_ean;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


