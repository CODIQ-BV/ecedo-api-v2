<?php
/**
 * EcedoERPCRMInterfaceApiBillingItemGroup
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiBillingItemGroup Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiBillingItemGroup implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.BillingItemGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'billing_item_group_id' => 'string',
        'description' => 'string',
        'billing_item_type' => 'string',
        'billing_item_type_localized' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'has_group_price' => 'bool',
        'has_end_date' => 'bool',
        'has_contract' => 'bool',
        'has_usage' => 'bool',
        'price_unit' => 'string',
        'price_unit_localized' => 'string',
        'in_advance_payment' => 'bool',
        'invoice_group' => 'string',
        'market_segment' => 'string',
        'market_segment_localized' => 'string',
        'vat_inclusive' => 'bool',
        'vat_percentage' => 'string',
        'vat_percentage_localized' => 'string',
        'is_transferable' => 'bool',
        'is_discount' => 'bool',
        'billing_item_sub_type' => 'string',
        'billing_item_sub_type_localized' => 'string',
        'billing_item_prices' => '\Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItemPrice[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'billing_item_group_id' => null,
        'description' => null,
        'billing_item_type' => null,
        'billing_item_type_localized' => null,
        'start_date' => 'date',
        'end_date' => 'date',
        'has_group_price' => null,
        'has_end_date' => null,
        'has_contract' => null,
        'has_usage' => null,
        'price_unit' => null,
        'price_unit_localized' => null,
        'in_advance_payment' => null,
        'invoice_group' => null,
        'market_segment' => null,
        'market_segment_localized' => null,
        'vat_inclusive' => null,
        'vat_percentage' => null,
        'vat_percentage_localized' => null,
        'is_transferable' => null,
        'is_discount' => null,
        'billing_item_sub_type' => null,
        'billing_item_sub_type_localized' => null,
        'billing_item_prices' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'billing_item_group_id' => 'BillingItemGroupId',
        'description' => 'Description',
        'billing_item_type' => 'BillingItemType',
        'billing_item_type_localized' => 'BillingItemTypeLocalized',
        'start_date' => 'StartDate',
        'end_date' => 'EndDate',
        'has_group_price' => 'HasGroupPrice',
        'has_end_date' => 'HasEndDate',
        'has_contract' => 'HasContract',
        'has_usage' => 'HasUsage',
        'price_unit' => 'PriceUnit',
        'price_unit_localized' => 'PriceUnitLocalized',
        'in_advance_payment' => 'InAdvancePayment',
        'invoice_group' => 'InvoiceGroup',
        'market_segment' => 'MarketSegment',
        'market_segment_localized' => 'MarketSegmentLocalized',
        'vat_inclusive' => 'VatInclusive',
        'vat_percentage' => 'VatPercentage',
        'vat_percentage_localized' => 'VatPercentageLocalized',
        'is_transferable' => 'IsTransferable',
        'is_discount' => 'IsDiscount',
        'billing_item_sub_type' => 'BillingItemSubType',
        'billing_item_sub_type_localized' => 'BillingItemSubTypeLocalized',
        'billing_item_prices' => 'BillingItemPrices'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'billing_item_group_id' => 'setBillingItemGroupId',
        'description' => 'setDescription',
        'billing_item_type' => 'setBillingItemType',
        'billing_item_type_localized' => 'setBillingItemTypeLocalized',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'has_group_price' => 'setHasGroupPrice',
        'has_end_date' => 'setHasEndDate',
        'has_contract' => 'setHasContract',
        'has_usage' => 'setHasUsage',
        'price_unit' => 'setPriceUnit',
        'price_unit_localized' => 'setPriceUnitLocalized',
        'in_advance_payment' => 'setInAdvancePayment',
        'invoice_group' => 'setInvoiceGroup',
        'market_segment' => 'setMarketSegment',
        'market_segment_localized' => 'setMarketSegmentLocalized',
        'vat_inclusive' => 'setVatInclusive',
        'vat_percentage' => 'setVatPercentage',
        'vat_percentage_localized' => 'setVatPercentageLocalized',
        'is_transferable' => 'setIsTransferable',
        'is_discount' => 'setIsDiscount',
        'billing_item_sub_type' => 'setBillingItemSubType',
        'billing_item_sub_type_localized' => 'setBillingItemSubTypeLocalized',
        'billing_item_prices' => 'setBillingItemPrices'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'billing_item_group_id' => 'getBillingItemGroupId',
        'description' => 'getDescription',
        'billing_item_type' => 'getBillingItemType',
        'billing_item_type_localized' => 'getBillingItemTypeLocalized',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'has_group_price' => 'getHasGroupPrice',
        'has_end_date' => 'getHasEndDate',
        'has_contract' => 'getHasContract',
        'has_usage' => 'getHasUsage',
        'price_unit' => 'getPriceUnit',
        'price_unit_localized' => 'getPriceUnitLocalized',
        'in_advance_payment' => 'getInAdvancePayment',
        'invoice_group' => 'getInvoiceGroup',
        'market_segment' => 'getMarketSegment',
        'market_segment_localized' => 'getMarketSegmentLocalized',
        'vat_inclusive' => 'getVatInclusive',
        'vat_percentage' => 'getVatPercentage',
        'vat_percentage_localized' => 'getVatPercentageLocalized',
        'is_transferable' => 'getIsTransferable',
        'is_discount' => 'getIsDiscount',
        'billing_item_sub_type' => 'getBillingItemSubType',
        'billing_item_sub_type_localized' => 'getBillingItemSubTypeLocalized',
        'billing_item_prices' => 'getBillingItemPrices'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['billing_item_group_id'] = isset($data['billing_item_group_id']) ? $data['billing_item_group_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['billing_item_type'] = isset($data['billing_item_type']) ? $data['billing_item_type'] : null;
        $this->container['billing_item_type_localized'] = isset($data['billing_item_type_localized']) ? $data['billing_item_type_localized'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['has_group_price'] = isset($data['has_group_price']) ? $data['has_group_price'] : null;
        $this->container['has_end_date'] = isset($data['has_end_date']) ? $data['has_end_date'] : null;
        $this->container['has_contract'] = isset($data['has_contract']) ? $data['has_contract'] : null;
        $this->container['has_usage'] = isset($data['has_usage']) ? $data['has_usage'] : null;
        $this->container['price_unit'] = isset($data['price_unit']) ? $data['price_unit'] : null;
        $this->container['price_unit_localized'] = isset($data['price_unit_localized']) ? $data['price_unit_localized'] : null;
        $this->container['in_advance_payment'] = isset($data['in_advance_payment']) ? $data['in_advance_payment'] : null;
        $this->container['invoice_group'] = isset($data['invoice_group']) ? $data['invoice_group'] : null;
        $this->container['market_segment'] = isset($data['market_segment']) ? $data['market_segment'] : null;
        $this->container['market_segment_localized'] = isset($data['market_segment_localized']) ? $data['market_segment_localized'] : null;
        $this->container['vat_inclusive'] = isset($data['vat_inclusive']) ? $data['vat_inclusive'] : null;
        $this->container['vat_percentage'] = isset($data['vat_percentage']) ? $data['vat_percentage'] : null;
        $this->container['vat_percentage_localized'] = isset($data['vat_percentage_localized']) ? $data['vat_percentage_localized'] : null;
        $this->container['is_transferable'] = isset($data['is_transferable']) ? $data['is_transferable'] : null;
        $this->container['is_discount'] = isset($data['is_discount']) ? $data['is_discount'] : null;
        $this->container['billing_item_sub_type'] = isset($data['billing_item_sub_type']) ? $data['billing_item_sub_type'] : null;
        $this->container['billing_item_sub_type_localized'] = isset($data['billing_item_sub_type_localized']) ? $data['billing_item_sub_type_localized'] : null;
        $this->container['billing_item_prices'] = isset($data['billing_item_prices']) ? $data['billing_item_prices'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets billing_item_group_id
     *
     * @return string
     */
    public function getBillingItemGroupId()
    {
        return $this->container['billing_item_group_id'];
    }

    /**
     * Sets billing_item_group_id
     *
     * @param string $billing_item_group_id billing_item_group_id
     *
     * @return $this
     */
    public function setBillingItemGroupId($billing_item_group_id)
    {
        $this->container['billing_item_group_id'] = $billing_item_group_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets billing_item_type
     *
     * @return string
     */
    public function getBillingItemType()
    {
        return $this->container['billing_item_type'];
    }

    /**
     * Sets billing_item_type
     *
     * @param string $billing_item_type billing_item_type
     *
     * @return $this
     */
    public function setBillingItemType($billing_item_type)
    {
        $this->container['billing_item_type'] = $billing_item_type;

        return $this;
    }

    /**
     * Gets billing_item_type_localized
     *
     * @return string
     */
    public function getBillingItemTypeLocalized()
    {
        return $this->container['billing_item_type_localized'];
    }

    /**
     * Sets billing_item_type_localized
     *
     * @param string $billing_item_type_localized billing_item_type_localized
     *
     * @return $this
     */
    public function setBillingItemTypeLocalized($billing_item_type_localized)
    {
        $this->container['billing_item_type_localized'] = $billing_item_type_localized;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets has_group_price
     *
     * @return bool
     */
    public function getHasGroupPrice()
    {
        return $this->container['has_group_price'];
    }

    /**
     * Sets has_group_price
     *
     * @param bool $has_group_price has_group_price
     *
     * @return $this
     */
    public function setHasGroupPrice($has_group_price)
    {
        $this->container['has_group_price'] = $has_group_price;

        return $this;
    }

    /**
     * Gets has_end_date
     *
     * @return bool
     */
    public function getHasEndDate()
    {
        return $this->container['has_end_date'];
    }

    /**
     * Sets has_end_date
     *
     * @param bool $has_end_date has_end_date
     *
     * @return $this
     */
    public function setHasEndDate($has_end_date)
    {
        $this->container['has_end_date'] = $has_end_date;

        return $this;
    }

    /**
     * Gets has_contract
     *
     * @return bool
     */
    public function getHasContract()
    {
        return $this->container['has_contract'];
    }

    /**
     * Sets has_contract
     *
     * @param bool $has_contract has_contract
     *
     * @return $this
     */
    public function setHasContract($has_contract)
    {
        $this->container['has_contract'] = $has_contract;

        return $this;
    }

    /**
     * Gets has_usage
     *
     * @return bool
     */
    public function getHasUsage()
    {
        return $this->container['has_usage'];
    }

    /**
     * Sets has_usage
     *
     * @param bool $has_usage has_usage
     *
     * @return $this
     */
    public function setHasUsage($has_usage)
    {
        $this->container['has_usage'] = $has_usage;

        return $this;
    }

    /**
     * Gets price_unit
     *
     * @return string
     */
    public function getPriceUnit()
    {
        return $this->container['price_unit'];
    }

    /**
     * Sets price_unit
     *
     * @param string $price_unit price_unit
     *
     * @return $this
     */
    public function setPriceUnit($price_unit)
    {
        $this->container['price_unit'] = $price_unit;

        return $this;
    }

    /**
     * Gets price_unit_localized
     *
     * @return string
     */
    public function getPriceUnitLocalized()
    {
        return $this->container['price_unit_localized'];
    }

    /**
     * Sets price_unit_localized
     *
     * @param string $price_unit_localized price_unit_localized
     *
     * @return $this
     */
    public function setPriceUnitLocalized($price_unit_localized)
    {
        $this->container['price_unit_localized'] = $price_unit_localized;

        return $this;
    }

    /**
     * Gets in_advance_payment
     *
     * @return bool
     */
    public function getInAdvancePayment()
    {
        return $this->container['in_advance_payment'];
    }

    /**
     * Sets in_advance_payment
     *
     * @param bool $in_advance_payment in_advance_payment
     *
     * @return $this
     */
    public function setInAdvancePayment($in_advance_payment)
    {
        $this->container['in_advance_payment'] = $in_advance_payment;

        return $this;
    }

    /**
     * Gets invoice_group
     *
     * @return string
     */
    public function getInvoiceGroup()
    {
        return $this->container['invoice_group'];
    }

    /**
     * Sets invoice_group
     *
     * @param string $invoice_group invoice_group
     *
     * @return $this
     */
    public function setInvoiceGroup($invoice_group)
    {
        $this->container['invoice_group'] = $invoice_group;

        return $this;
    }

    /**
     * Gets market_segment
     *
     * @return string
     */
    public function getMarketSegment()
    {
        return $this->container['market_segment'];
    }

    /**
     * Sets market_segment
     *
     * @param string $market_segment market_segment
     *
     * @return $this
     */
    public function setMarketSegment($market_segment)
    {
        $this->container['market_segment'] = $market_segment;

        return $this;
    }

    /**
     * Gets market_segment_localized
     *
     * @return string
     */
    public function getMarketSegmentLocalized()
    {
        return $this->container['market_segment_localized'];
    }

    /**
     * Sets market_segment_localized
     *
     * @param string $market_segment_localized market_segment_localized
     *
     * @return $this
     */
    public function setMarketSegmentLocalized($market_segment_localized)
    {
        $this->container['market_segment_localized'] = $market_segment_localized;

        return $this;
    }

    /**
     * Gets vat_inclusive
     *
     * @return bool
     */
    public function getVatInclusive()
    {
        return $this->container['vat_inclusive'];
    }

    /**
     * Sets vat_inclusive
     *
     * @param bool $vat_inclusive vat_inclusive
     *
     * @return $this
     */
    public function setVatInclusive($vat_inclusive)
    {
        $this->container['vat_inclusive'] = $vat_inclusive;

        return $this;
    }

    /**
     * Gets vat_percentage
     *
     * @return string
     */
    public function getVatPercentage()
    {
        return $this->container['vat_percentage'];
    }

    /**
     * Sets vat_percentage
     *
     * @param string $vat_percentage vat_percentage
     *
     * @return $this
     */
    public function setVatPercentage($vat_percentage)
    {
        $this->container['vat_percentage'] = $vat_percentage;

        return $this;
    }

    /**
     * Gets vat_percentage_localized
     *
     * @return string
     */
    public function getVatPercentageLocalized()
    {
        return $this->container['vat_percentage_localized'];
    }

    /**
     * Sets vat_percentage_localized
     *
     * @param string $vat_percentage_localized vat_percentage_localized
     *
     * @return $this
     */
    public function setVatPercentageLocalized($vat_percentage_localized)
    {
        $this->container['vat_percentage_localized'] = $vat_percentage_localized;

        return $this;
    }

    /**
     * Gets is_transferable
     *
     * @return bool
     */
    public function getIsTransferable()
    {
        return $this->container['is_transferable'];
    }

    /**
     * Sets is_transferable
     *
     * @param bool $is_transferable is_transferable
     *
     * @return $this
     */
    public function setIsTransferable($is_transferable)
    {
        $this->container['is_transferable'] = $is_transferable;

        return $this;
    }

    /**
     * Gets is_discount
     *
     * @return bool
     */
    public function getIsDiscount()
    {
        return $this->container['is_discount'];
    }

    /**
     * Sets is_discount
     *
     * @param bool $is_discount is_discount
     *
     * @return $this
     */
    public function setIsDiscount($is_discount)
    {
        $this->container['is_discount'] = $is_discount;

        return $this;
    }

    /**
     * Gets billing_item_sub_type
     *
     * @return string
     */
    public function getBillingItemSubType()
    {
        return $this->container['billing_item_sub_type'];
    }

    /**
     * Sets billing_item_sub_type
     *
     * @param string $billing_item_sub_type billing_item_sub_type
     *
     * @return $this
     */
    public function setBillingItemSubType($billing_item_sub_type)
    {
        $this->container['billing_item_sub_type'] = $billing_item_sub_type;

        return $this;
    }

    /**
     * Gets billing_item_sub_type_localized
     *
     * @return string
     */
    public function getBillingItemSubTypeLocalized()
    {
        return $this->container['billing_item_sub_type_localized'];
    }

    /**
     * Sets billing_item_sub_type_localized
     *
     * @param string $billing_item_sub_type_localized billing_item_sub_type_localized
     *
     * @return $this
     */
    public function setBillingItemSubTypeLocalized($billing_item_sub_type_localized)
    {
        $this->container['billing_item_sub_type_localized'] = $billing_item_sub_type_localized;

        return $this;
    }

    /**
     * Gets billing_item_prices
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItemPrice[]
     */
    public function getBillingItemPrices()
    {
        return $this->container['billing_item_prices'];
    }

    /**
     * Sets billing_item_prices
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItemPrice[] $billing_item_prices billing_item_prices
     *
     * @return $this
     */
    public function setBillingItemPrices($billing_item_prices)
    {
        $this->container['billing_item_prices'] = $billing_item_prices;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


