<?php
/**
 * EcedoERPCRMInterfaceGDPRConnection
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceGDPRConnection Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceGDPRConnection implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.GDPR.Connection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'contracts' => '\Swagger\Client\Model\EcedoERPCRMInterfaceGDPRContract[]',
        'meters' => '\Swagger\Client\Model\EcedoERPCRMInterfaceGDPRMeter[]',
        'meter_readings' => '\Swagger\Client\Model\EcedoERPCRMInterfaceGDPRMeterReading[]',
        'address' => '\Swagger\Client\Model\EcedoERPCRMInterfaceGDPRAddress',
        'properties' => '\Swagger\Client\Model\EcedoERPCRMInterfaceGDPRConnectionProperty[]',
        'market_segment_localized' => 'string',
        'ean' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'contracts' => null,
        'meters' => null,
        'meter_readings' => null,
        'address' => null,
        'properties' => null,
        'market_segment_localized' => null,
        'ean' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contracts' => 'Contracts',
        'meters' => 'Meters',
        'meter_readings' => 'MeterReadings',
        'address' => 'Address',
        'properties' => 'Properties',
        'market_segment_localized' => 'MarketSegmentLocalized',
        'ean' => 'EAN'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contracts' => 'setContracts',
        'meters' => 'setMeters',
        'meter_readings' => 'setMeterReadings',
        'address' => 'setAddress',
        'properties' => 'setProperties',
        'market_segment_localized' => 'setMarketSegmentLocalized',
        'ean' => 'setEan'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contracts' => 'getContracts',
        'meters' => 'getMeters',
        'meter_readings' => 'getMeterReadings',
        'address' => 'getAddress',
        'properties' => 'getProperties',
        'market_segment_localized' => 'getMarketSegmentLocalized',
        'ean' => 'getEan'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contracts'] = isset($data['contracts']) ? $data['contracts'] : null;
        $this->container['meters'] = isset($data['meters']) ? $data['meters'] : null;
        $this->container['meter_readings'] = isset($data['meter_readings']) ? $data['meter_readings'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['market_segment_localized'] = isset($data['market_segment_localized']) ? $data['market_segment_localized'] : null;
        $this->container['ean'] = isset($data['ean']) ? $data['ean'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contracts
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceGDPRContract[]
     */
    public function getContracts()
    {
        return $this->container['contracts'];
    }

    /**
     * Sets contracts
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceGDPRContract[] $contracts contracts
     *
     * @return $this
     */
    public function setContracts($contracts)
    {
        $this->container['contracts'] = $contracts;

        return $this;
    }

    /**
     * Gets meters
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceGDPRMeter[]
     */
    public function getMeters()
    {
        return $this->container['meters'];
    }

    /**
     * Sets meters
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceGDPRMeter[] $meters meters
     *
     * @return $this
     */
    public function setMeters($meters)
    {
        $this->container['meters'] = $meters;

        return $this;
    }

    /**
     * Gets meter_readings
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceGDPRMeterReading[]
     */
    public function getMeterReadings()
    {
        return $this->container['meter_readings'];
    }

    /**
     * Sets meter_readings
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceGDPRMeterReading[] $meter_readings meter_readings
     *
     * @return $this
     */
    public function setMeterReadings($meter_readings)
    {
        $this->container['meter_readings'] = $meter_readings;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceGDPRAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceGDPRAddress $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceGDPRConnectionProperty[]
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceGDPRConnectionProperty[] $properties properties
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets market_segment_localized
     *
     * @return string
     */
    public function getMarketSegmentLocalized()
    {
        return $this->container['market_segment_localized'];
    }

    /**
     * Sets market_segment_localized
     *
     * @param string $market_segment_localized market_segment_localized
     *
     * @return $this
     */
    public function setMarketSegmentLocalized($market_segment_localized)
    {
        $this->container['market_segment_localized'] = $market_segment_localized;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string $ean ean
     *
     * @return $this
     */
    public function setEan($ean)
    {
        $this->container['ean'] = $ean;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


