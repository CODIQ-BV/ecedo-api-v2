<?php
/**
 * EcedoERPCRMInterfaceApiDocument
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiDocument Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiDocument implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.Document';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'document_id' => 'string',
        'document_type' => 'string',
        'document_type_localized' => 'string',
        'file_type' => 'string',
        'file_type_localized' => 'string',
        'file_name' => 'string',
        'comment' => 'string',
        'date_created' => '\DateTime',
        'date_created_localized' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'document_id' => null,
        'document_type' => null,
        'document_type_localized' => null,
        'file_type' => null,
        'file_type_localized' => null,
        'file_name' => null,
        'comment' => null,
        'date_created' => 'date-time',
        'date_created_localized' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'document_id' => 'DocumentId',
        'document_type' => 'DocumentType',
        'document_type_localized' => 'DocumentTypeLocalized',
        'file_type' => 'FileType',
        'file_type_localized' => 'FileTypeLocalized',
        'file_name' => 'FileName',
        'comment' => 'Comment',
        'date_created' => 'DateCreated',
        'date_created_localized' => 'DateCreatedLocalized'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'document_id' => 'setDocumentId',
        'document_type' => 'setDocumentType',
        'document_type_localized' => 'setDocumentTypeLocalized',
        'file_type' => 'setFileType',
        'file_type_localized' => 'setFileTypeLocalized',
        'file_name' => 'setFileName',
        'comment' => 'setComment',
        'date_created' => 'setDateCreated',
        'date_created_localized' => 'setDateCreatedLocalized'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'document_id' => 'getDocumentId',
        'document_type' => 'getDocumentType',
        'document_type_localized' => 'getDocumentTypeLocalized',
        'file_type' => 'getFileType',
        'file_type_localized' => 'getFileTypeLocalized',
        'file_name' => 'getFileName',
        'comment' => 'getComment',
        'date_created' => 'getDateCreated',
        'date_created_localized' => 'getDateCreatedLocalized'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DOCUMENT_TYPE_USER_DOCUMENT = 'UserDocument';
    const DOCUMENT_TYPE_IMPORT_REGISTER_COMPARE = 'ImportRegisterCompare';
    const DOCUMENT_TYPE_METERING_COMPENSATION_RESULT = 'MeteringCompensationResult';
    const DOCUMENT_TYPE_CHARGE_SESSIONS = 'ChargeSessions';
    const DOCUMENT_TYPE_APX_DETAILS = 'ApxDetails';
    const DOCUMENT_TYPE_WELCOME_LETTER_ENERGY = 'WelcomeLetterEnergy';
    const DOCUMENT_TYPE_EXTENSION_LETTER_ENERGY = 'ExtensionLetterEnergy';
    const DOCUMENT_TYPE_SWITCH_EXPORT_ENERGY = 'SwitchExportEnergy';
    const DOCUMENT_TYPE_ADVANCE_PAYMENT_LETTER_ENERGY = 'AdvancePaymentLetterEnergy';
    const DOCUMENT_TYPE_SETTLEMENT_INVOICE_LETTER_ENERGY = 'SettlementInvoiceLetterEnergy';
    const DOCUMENT_TYPE_ADVANCE_PAYMENT_INVOICE_LETTER_ENERGY = 'AdvancePaymentInvoiceLetterEnergy';
    const DOCUMENT_TYPE_PURCHASE_INVOICE_LETTER = 'PurchaseInvoiceLetter';
    const DOCUMENT_TYPE_CHARGE_SESSION_INVOICE_LETTER = 'ChargeSessionInvoiceLetter';
    const DOCUMENT_TYPE_PRODUCER_SETTLEMENT_INVOICE_LETTER = 'ProducerSettlementInvoiceLetter';
    const DOCUMENT_TYPE_CHARGE_SESSION_CPO_INVOICE_LETTER = 'ChargeSessionCpoInvoiceLetter';
    const DOCUMENT_TYPE_CHARGE_SESSION_INVOICE_LETTER_DIRECT_PAY = 'ChargeSessionInvoiceLetterDirectPay';
    const DOCUMENT_TYPE_COLLECTIVE_SETTLEMENT_INVOICE_LETTER_ENERGY = 'CollectiveSettlementInvoiceLetterEnergy';
    const DOCUMENT_TYPE_COLLECTIVE_SETTLEMENT_INVOICE_LETTER_ENERGY_DETAIL = 'CollectiveSettlementInvoiceLetterEnergyDetail';
    const DOCUMENT_TYPE_COLLECTIVE_ADVANCE_PAYMENT_INVOICE_LETTER_ENERGY = 'CollectiveAdvancePaymentInvoiceLetterEnergy';
    const DOCUMENT_TYPE_COLLECTIVE_ADVANCE_PAYMENT_INVOICE_LETTER_ENERGY_DETAIL = 'CollectiveAdvancePaymentInvoiceLetterEnergyDetail';
    const DOCUMENT_TYPE_CHARGE_SESSION_INVOICE_LETTER_DETAIL = 'ChargeSessionInvoiceLetterDetail';
    const DOCUMENT_TYPE_SMART_CHARGING_SETTLEMENT_INVOICE_LETTER = 'SmartChargingSettlementInvoiceLetter';
    const DOCUMENT_TYPE_COLLECTIVE_SETTLEMENT_INVOICE_LETTER_ENERGY_DETAIL_EXTENDED = 'CollectiveSettlementInvoiceLetterEnergyDetailExtended';
    const DOCUMENT_TYPE_COLLECTIVE_ADVANCE_PAYMENT_INVOICE_LETTER_ENERGY_DETAIL_EXTENDED = 'CollectiveAdvancePaymentInvoiceLetterEnergyDetailExtended';
    const DOCUMENT_TYPE_ENERGY_PURCHASE_SETTLEMENT_CORRECTION_INVOICE_LETTER = 'EnergyPurchaseSettlementCorrectionInvoiceLetter';
    const DOCUMENT_TYPE_COLLECTIVE_ADVANCE_PAYMENT_INVOICE_LETTER_ENERGY_DETAIL_PDF = 'CollectiveAdvancePaymentInvoiceLetterEnergyDetailPDF';
    const DOCUMENT_TYPE_COLLECTIVE_ADVANCE_PAYMENT_INVOICE_LETTER_ENERGY_DETAIL_EXTENDED_PDF = 'CollectiveAdvancePaymentInvoiceLetterEnergyDetailExtendedPDF';
    const DOCUMENT_TYPE_COLLECTIVE_SETTLEMENT_INVOICE_LETTER_ENERGY_DETAIL_PDF = 'CollectiveSettlementInvoiceLetterEnergyDetailPDF';
    const DOCUMENT_TYPE_COLLECTIVE_SETTLEMENT_INVOICE_LETTER_ENERGY_DETAIL_EXTENDED_PDF = 'CollectiveSettlementInvoiceLetterEnergyDetailExtendedPDF';
    const DOCUMENT_TYPE_EV_BUSINESS_PARTNER_INVOICE_LETTER = 'EVBusinessPartnerInvoiceLetter';
    const DOCUMENT_TYPE_EXACT_EXPORT_ADVANCE_PAYMENT_INVOICES_ENERGY = 'ExactExportAdvancePaymentInvoicesEnergy';
    const DOCUMENT_TYPE_EXACT_EXPORT_DEBTORS_ENERGY = 'ExactExportDebtorsEnergy';
    const DOCUMENT_TYPE_EXACT_EXPORT_SETTLEMENT_INVOICES_ENERGY = 'ExactExportSettlementInvoicesEnergy';
    const DOCUMENT_TYPE_EXACT_EXPORT_ADVANCE_PAYMENT_INVOICES_DEPOSIT_ENERGY = 'ExactExportAdvancePaymentInvoicesDepositEnergy';
    const DOCUMENT_TYPE_EXACT_EXPORT_PURCHASE_INVOICES = 'ExactExportPurchaseInvoices';
    const DOCUMENT_TYPE_FINANCIAL_EXPORT_PRODUCER_SETTLEMENT_INVOICES = 'FinancialExportProducerSettlementInvoices';
    const DOCUMENT_TYPE_EXPORT_ORGANIZATIONS_ENERGY = 'ExportOrganizationsEnergy';
    const DOCUMENT_TYPE_IMPORT_ORGANIZATIONS_BATCH = 'ImportOrganizationsBatch';
    const DOCUMENT_TYPE_IMPORT_RESULT_ORGANIZATIONS_BATCH = 'ImportResultOrganizationsBatch';
    const DOCUMENT_TYPE_IMPORT_CAL_GOS_BATCH = 'ImportCalGosBatch';
    const DOCUMENT_TYPE_IMPORT_CAL_GOS_API = 'ImportCalGosApi';
    const DOCUMENT_TYPE_IMPORT_CERTI_Q_BATCH = 'ImportCertiQBatch';
    const DOCUMENT_TYPE_CERTI_Q_REPORT = 'CertiQReport';
    const DOCUMENT_TYPE_IMPORT_ALLOCATION_XML_DOCUMENT = 'ImportAllocationXmlDocument';
    const DOCUMENT_TYPE_IMPORT_PVNED_TIME_SERIES_JSON_DOCUMENT = 'ImportPVNEDTimeSeriesJsonDocument';
    const DOCUMENT_TYPE_IMPORT_CERTIFICATE_TRADE_DOCUMENT = 'ImportCertificateTradeDocument';
    const DOCUMENT_TYPE_ENERGY_PURCHASE_SETTLEMENT_LETTER = 'EnergyPurchaseSettlementLetter';
    const DOCUMENT_TYPE_EV_CHARGE_CARD_SETTLEMENT_LETTER = 'EvChargeCardSettlementLetter';
    const DOCUMENT_TYPE_DOCUMENT_TEMPLATE = 'DocumentTemplate';
    const DOCUMENT_TYPE_SETTLEMENT_INVOICE_LETTER_ENERGY_OLD = 'SettlementInvoiceLetterEnergyOld';
    const DOCUMENT_TYPE_EV_CHARGER_REIMBURSEMENT_INVOICE_LETTER = 'EvChargerReimbursementInvoiceLetter';
    const DOCUMENT_TYPE_PURCHASE_TERMINATION_FEE_INVOICE_LETTER = 'PurchaseTerminationFeeInvoiceLetter';
    const DOCUMENT_TYPE_PURCHASE_DEPOSIT_INVOICE_LETTER = 'PurchaseDepositInvoiceLetter';
    const DOCUMENT_TYPE_CUSTOM_INVOICE_LETTER = 'CustomInvoiceLetter';
    const DOCUMENT_TYPE_SERVICE_CONTRACT_INVOICE_LETTER = 'ServiceContractInvoiceLetter';
    const DOCUMENT_TYPE_RECONCILIATION_INVOICE_LETTER = 'ReconciliationInvoiceLetter';
    const DOCUMENT_TYPE_CERTIFICATE_SALE_INVOICE_LETTER = 'CertificateSaleInvoiceLetter';
    const DOCUMENT_TYPE_SETTLEMENT_E_INVOICE_DOCUMENT = 'SettlementEInvoiceDocument';
    const DOCUMENT_TYPE_ADVANCE_PAYMENT_E_INVOICE_DOCUMENT = 'AdvancePaymentEInvoiceDocument';
    const DOCUMENT_TYPE_ENERGY_VKO_DOCUMENT = 'EnergyVKODocument';
    const DOCUMENT_TYPE_RECONCILIATION_PROPOSAL_DOCUMENT = 'ReconciliationProposalDocument';
    const DOCUMENT_TYPE_MEANS_OF_PRODUCTION_CONTRACT_PROPOSAL_DOCUMENT = 'MeansOfProductionContractProposalDocument';
    const FILE_TYPE_UNKNOWN = 'Unknown';
    const FILE_TYPE_PDF = 'PDF';
    const FILE_TYPE_CSV = 'CSV';
    const FILE_TYPE_EXCEL = 'Excel';
    const FILE_TYPE_TEXT = 'Text';
    const FILE_TYPE_WORD = 'Word';
    const FILE_TYPE_OUTLOOK_MESSAGE = 'OutlookMessage';
    const FILE_TYPE_XML = 'XML';
    const FILE_TYPE_JSON = 'Json';
    const FILE_TYPE_HTML = 'Html';
    const FILE_TYPE_RDLC = 'Rdlc';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentTypeAllowableValues()
    {
        return [
            self::DOCUMENT_TYPE_USER_DOCUMENT,
            self::DOCUMENT_TYPE_IMPORT_REGISTER_COMPARE,
            self::DOCUMENT_TYPE_METERING_COMPENSATION_RESULT,
            self::DOCUMENT_TYPE_CHARGE_SESSIONS,
            self::DOCUMENT_TYPE_APX_DETAILS,
            self::DOCUMENT_TYPE_WELCOME_LETTER_ENERGY,
            self::DOCUMENT_TYPE_EXTENSION_LETTER_ENERGY,
            self::DOCUMENT_TYPE_SWITCH_EXPORT_ENERGY,
            self::DOCUMENT_TYPE_ADVANCE_PAYMENT_LETTER_ENERGY,
            self::DOCUMENT_TYPE_SETTLEMENT_INVOICE_LETTER_ENERGY,
            self::DOCUMENT_TYPE_ADVANCE_PAYMENT_INVOICE_LETTER_ENERGY,
            self::DOCUMENT_TYPE_PURCHASE_INVOICE_LETTER,
            self::DOCUMENT_TYPE_CHARGE_SESSION_INVOICE_LETTER,
            self::DOCUMENT_TYPE_PRODUCER_SETTLEMENT_INVOICE_LETTER,
            self::DOCUMENT_TYPE_CHARGE_SESSION_CPO_INVOICE_LETTER,
            self::DOCUMENT_TYPE_CHARGE_SESSION_INVOICE_LETTER_DIRECT_PAY,
            self::DOCUMENT_TYPE_COLLECTIVE_SETTLEMENT_INVOICE_LETTER_ENERGY,
            self::DOCUMENT_TYPE_COLLECTIVE_SETTLEMENT_INVOICE_LETTER_ENERGY_DETAIL,
            self::DOCUMENT_TYPE_COLLECTIVE_ADVANCE_PAYMENT_INVOICE_LETTER_ENERGY,
            self::DOCUMENT_TYPE_COLLECTIVE_ADVANCE_PAYMENT_INVOICE_LETTER_ENERGY_DETAIL,
            self::DOCUMENT_TYPE_CHARGE_SESSION_INVOICE_LETTER_DETAIL,
            self::DOCUMENT_TYPE_SMART_CHARGING_SETTLEMENT_INVOICE_LETTER,
            self::DOCUMENT_TYPE_COLLECTIVE_SETTLEMENT_INVOICE_LETTER_ENERGY_DETAIL_EXTENDED,
            self::DOCUMENT_TYPE_COLLECTIVE_ADVANCE_PAYMENT_INVOICE_LETTER_ENERGY_DETAIL_EXTENDED,
            self::DOCUMENT_TYPE_ENERGY_PURCHASE_SETTLEMENT_CORRECTION_INVOICE_LETTER,
            self::DOCUMENT_TYPE_COLLECTIVE_ADVANCE_PAYMENT_INVOICE_LETTER_ENERGY_DETAIL_PDF,
            self::DOCUMENT_TYPE_COLLECTIVE_ADVANCE_PAYMENT_INVOICE_LETTER_ENERGY_DETAIL_EXTENDED_PDF,
            self::DOCUMENT_TYPE_COLLECTIVE_SETTLEMENT_INVOICE_LETTER_ENERGY_DETAIL_PDF,
            self::DOCUMENT_TYPE_COLLECTIVE_SETTLEMENT_INVOICE_LETTER_ENERGY_DETAIL_EXTENDED_PDF,
            self::DOCUMENT_TYPE_EV_BUSINESS_PARTNER_INVOICE_LETTER,
            self::DOCUMENT_TYPE_EXACT_EXPORT_ADVANCE_PAYMENT_INVOICES_ENERGY,
            self::DOCUMENT_TYPE_EXACT_EXPORT_DEBTORS_ENERGY,
            self::DOCUMENT_TYPE_EXACT_EXPORT_SETTLEMENT_INVOICES_ENERGY,
            self::DOCUMENT_TYPE_EXACT_EXPORT_ADVANCE_PAYMENT_INVOICES_DEPOSIT_ENERGY,
            self::DOCUMENT_TYPE_EXACT_EXPORT_PURCHASE_INVOICES,
            self::DOCUMENT_TYPE_FINANCIAL_EXPORT_PRODUCER_SETTLEMENT_INVOICES,
            self::DOCUMENT_TYPE_EXPORT_ORGANIZATIONS_ENERGY,
            self::DOCUMENT_TYPE_IMPORT_ORGANIZATIONS_BATCH,
            self::DOCUMENT_TYPE_IMPORT_RESULT_ORGANIZATIONS_BATCH,
            self::DOCUMENT_TYPE_IMPORT_CAL_GOS_BATCH,
            self::DOCUMENT_TYPE_IMPORT_CAL_GOS_API,
            self::DOCUMENT_TYPE_IMPORT_CERTI_Q_BATCH,
            self::DOCUMENT_TYPE_CERTI_Q_REPORT,
            self::DOCUMENT_TYPE_IMPORT_ALLOCATION_XML_DOCUMENT,
            self::DOCUMENT_TYPE_IMPORT_PVNED_TIME_SERIES_JSON_DOCUMENT,
            self::DOCUMENT_TYPE_IMPORT_CERTIFICATE_TRADE_DOCUMENT,
            self::DOCUMENT_TYPE_ENERGY_PURCHASE_SETTLEMENT_LETTER,
            self::DOCUMENT_TYPE_EV_CHARGE_CARD_SETTLEMENT_LETTER,
            self::DOCUMENT_TYPE_DOCUMENT_TEMPLATE,
            self::DOCUMENT_TYPE_SETTLEMENT_INVOICE_LETTER_ENERGY_OLD,
            self::DOCUMENT_TYPE_EV_CHARGER_REIMBURSEMENT_INVOICE_LETTER,
            self::DOCUMENT_TYPE_PURCHASE_TERMINATION_FEE_INVOICE_LETTER,
            self::DOCUMENT_TYPE_PURCHASE_DEPOSIT_INVOICE_LETTER,
            self::DOCUMENT_TYPE_CUSTOM_INVOICE_LETTER,
            self::DOCUMENT_TYPE_SERVICE_CONTRACT_INVOICE_LETTER,
            self::DOCUMENT_TYPE_RECONCILIATION_INVOICE_LETTER,
            self::DOCUMENT_TYPE_CERTIFICATE_SALE_INVOICE_LETTER,
            self::DOCUMENT_TYPE_SETTLEMENT_E_INVOICE_DOCUMENT,
            self::DOCUMENT_TYPE_ADVANCE_PAYMENT_E_INVOICE_DOCUMENT,
            self::DOCUMENT_TYPE_ENERGY_VKO_DOCUMENT,
            self::DOCUMENT_TYPE_RECONCILIATION_PROPOSAL_DOCUMENT,
            self::DOCUMENT_TYPE_MEANS_OF_PRODUCTION_CONTRACT_PROPOSAL_DOCUMENT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFileTypeAllowableValues()
    {
        return [
            self::FILE_TYPE_UNKNOWN,
            self::FILE_TYPE_PDF,
            self::FILE_TYPE_CSV,
            self::FILE_TYPE_EXCEL,
            self::FILE_TYPE_TEXT,
            self::FILE_TYPE_WORD,
            self::FILE_TYPE_OUTLOOK_MESSAGE,
            self::FILE_TYPE_XML,
            self::FILE_TYPE_JSON,
            self::FILE_TYPE_HTML,
            self::FILE_TYPE_RDLC,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['document_id'] = isset($data['document_id']) ? $data['document_id'] : null;
        $this->container['document_type'] = isset($data['document_type']) ? $data['document_type'] : null;
        $this->container['document_type_localized'] = isset($data['document_type_localized']) ? $data['document_type_localized'] : null;
        $this->container['file_type'] = isset($data['file_type']) ? $data['file_type'] : null;
        $this->container['file_type_localized'] = isset($data['file_type_localized']) ? $data['file_type_localized'] : null;
        $this->container['file_name'] = isset($data['file_name']) ? $data['file_name'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['date_created_localized'] = isset($data['date_created_localized']) ? $data['date_created_localized'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!is_null($this->container['document_type']) && !in_array($this->container['document_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'document_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFileTypeAllowableValues();
        if (!is_null($this->container['file_type']) && !in_array($this->container['file_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'file_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets document_id
     *
     * @return string
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param string $document_id document_id
     *
     * @return $this
     */
    public function setDocumentId($document_id)
    {
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string $document_type document_type
     *
     * @return $this
     */
    public function setDocumentType($document_type)
    {
        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!is_null($document_type) && !in_array($document_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'document_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets document_type_localized
     *
     * @return string
     */
    public function getDocumentTypeLocalized()
    {
        return $this->container['document_type_localized'];
    }

    /**
     * Sets document_type_localized
     *
     * @param string $document_type_localized document_type_localized
     *
     * @return $this
     */
    public function setDocumentTypeLocalized($document_type_localized)
    {
        $this->container['document_type_localized'] = $document_type_localized;

        return $this;
    }

    /**
     * Gets file_type
     *
     * @return string
     */
    public function getFileType()
    {
        return $this->container['file_type'];
    }

    /**
     * Sets file_type
     *
     * @param string $file_type file_type
     *
     * @return $this
     */
    public function setFileType($file_type)
    {
        $allowedValues = $this->getFileTypeAllowableValues();
        if (!is_null($file_type) && !in_array($file_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'file_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['file_type'] = $file_type;

        return $this;
    }

    /**
     * Gets file_type_localized
     *
     * @return string
     */
    public function getFileTypeLocalized()
    {
        return $this->container['file_type_localized'];
    }

    /**
     * Sets file_type_localized
     *
     * @param string $file_type_localized file_type_localized
     *
     * @return $this
     */
    public function setFileTypeLocalized($file_type_localized)
    {
        $this->container['file_type_localized'] = $file_type_localized;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string $file_name file_name
     *
     * @return $this
     */
    public function setFileName($file_name)
    {
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime $date_created date_created
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_created_localized
     *
     * @return string
     */
    public function getDateCreatedLocalized()
    {
        return $this->container['date_created_localized'];
    }

    /**
     * Sets date_created_localized
     *
     * @param string $date_created_localized date_created_localized
     *
     * @return $this
     */
    public function setDateCreatedLocalized($date_created_localized)
    {
        $this->container['date_created_localized'] = $date_created_localized;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


