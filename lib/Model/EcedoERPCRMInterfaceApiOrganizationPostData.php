<?php
/**
 * EcedoERPCRMInterfaceApiOrganizationPostData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiOrganizationPostData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiOrganizationPostData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.OrganizationPostData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'process_settings' => '\Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationPostDataProcessSettingsPostData',
        'organization_type' => 'string',
        'client_reference' => 'string',
        'sales_reference' => 'string',
        'channel' => 'string',
        'origin_reference' => 'string',
        'name' => 'string',
        'phone_number' => 'string',
        'mobile_number' => 'string',
        'email_address' => 'string',
        'e_invoice_address' => 'string',
        'bad_payment_history' => 'bool',
        'has_receiver' => 'bool',
        'with_collection_agency' => 'bool',
        'news_letter' => 'bool',
        'product_or_service_info' => 'bool',
        'print_welcome_letter' => 'bool',
        'block_settlement_active' => 'bool',
        'block_settlement_comment' => 'string',
        'preferred_contact_method' => 'string',
        'kvk_number' => 'string',
        'vat_number' => 'string',
        'is_parent' => 'bool',
        'parent_organization_id' => 'string',
        'organization_group_id' => 'string',
        'invoice_group_reference' => 'string',
        'mailing_address' => '\Swagger\Client\Model\EcedoERPCRMInterfaceApiAddressPostData',
        'business_address' => '\Swagger\Client\Model\EcedoERPCRMInterfaceApiAddressPostData',
        'person' => '\Swagger\Client\Model\EcedoERPCRMInterfaceApiPersonPostData',
        'debtor' => '\Swagger\Client\Model\EcedoERPCRMInterfaceApiDebtorPostData',
        'registered_seat' => 'string',
        'authorized_signatory' => 'string',
        'representative_id' => 'string',
        'is_intercompany' => 'bool',
        'company_label_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'process_settings' => null,
        'organization_type' => null,
        'client_reference' => null,
        'sales_reference' => null,
        'channel' => null,
        'origin_reference' => null,
        'name' => null,
        'phone_number' => null,
        'mobile_number' => null,
        'email_address' => null,
        'e_invoice_address' => null,
        'bad_payment_history' => null,
        'has_receiver' => null,
        'with_collection_agency' => null,
        'news_letter' => null,
        'product_or_service_info' => null,
        'print_welcome_letter' => null,
        'block_settlement_active' => null,
        'block_settlement_comment' => null,
        'preferred_contact_method' => null,
        'kvk_number' => null,
        'vat_number' => null,
        'is_parent' => null,
        'parent_organization_id' => 'uuid',
        'organization_group_id' => 'uuid',
        'invoice_group_reference' => null,
        'mailing_address' => null,
        'business_address' => null,
        'person' => null,
        'debtor' => null,
        'registered_seat' => null,
        'authorized_signatory' => null,
        'representative_id' => 'uuid',
        'is_intercompany' => null,
        'company_label_id' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'process_settings' => 'ProcessSettings',
        'organization_type' => 'OrganizationType',
        'client_reference' => 'ClientReference',
        'sales_reference' => 'SalesReference',
        'channel' => 'Channel',
        'origin_reference' => 'OriginReference',
        'name' => 'Name',
        'phone_number' => 'PhoneNumber',
        'mobile_number' => 'MobileNumber',
        'email_address' => 'EmailAddress',
        'e_invoice_address' => 'EInvoiceAddress',
        'bad_payment_history' => 'BadPaymentHistory',
        'has_receiver' => 'HasReceiver',
        'with_collection_agency' => 'WithCollectionAgency',
        'news_letter' => 'NewsLetter',
        'product_or_service_info' => 'ProductOrServiceInfo',
        'print_welcome_letter' => 'PrintWelcomeLetter',
        'block_settlement_active' => 'BlockSettlementActive',
        'block_settlement_comment' => 'BlockSettlementComment',
        'preferred_contact_method' => 'PreferredContactMethod',
        'kvk_number' => 'KvkNumber',
        'vat_number' => 'VatNumber',
        'is_parent' => 'IsParent',
        'parent_organization_id' => 'ParentOrganizationId',
        'organization_group_id' => 'OrganizationGroupId',
        'invoice_group_reference' => 'InvoiceGroupReference',
        'mailing_address' => 'MailingAddress',
        'business_address' => 'BusinessAddress',
        'person' => 'Person',
        'debtor' => 'Debtor',
        'registered_seat' => 'RegisteredSeat',
        'authorized_signatory' => 'AuthorizedSignatory',
        'representative_id' => 'RepresentativeId',
        'is_intercompany' => 'IsIntercompany',
        'company_label_id' => 'CompanyLabelId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'process_settings' => 'setProcessSettings',
        'organization_type' => 'setOrganizationType',
        'client_reference' => 'setClientReference',
        'sales_reference' => 'setSalesReference',
        'channel' => 'setChannel',
        'origin_reference' => 'setOriginReference',
        'name' => 'setName',
        'phone_number' => 'setPhoneNumber',
        'mobile_number' => 'setMobileNumber',
        'email_address' => 'setEmailAddress',
        'e_invoice_address' => 'setEInvoiceAddress',
        'bad_payment_history' => 'setBadPaymentHistory',
        'has_receiver' => 'setHasReceiver',
        'with_collection_agency' => 'setWithCollectionAgency',
        'news_letter' => 'setNewsLetter',
        'product_or_service_info' => 'setProductOrServiceInfo',
        'print_welcome_letter' => 'setPrintWelcomeLetter',
        'block_settlement_active' => 'setBlockSettlementActive',
        'block_settlement_comment' => 'setBlockSettlementComment',
        'preferred_contact_method' => 'setPreferredContactMethod',
        'kvk_number' => 'setKvkNumber',
        'vat_number' => 'setVatNumber',
        'is_parent' => 'setIsParent',
        'parent_organization_id' => 'setParentOrganizationId',
        'organization_group_id' => 'setOrganizationGroupId',
        'invoice_group_reference' => 'setInvoiceGroupReference',
        'mailing_address' => 'setMailingAddress',
        'business_address' => 'setBusinessAddress',
        'person' => 'setPerson',
        'debtor' => 'setDebtor',
        'registered_seat' => 'setRegisteredSeat',
        'authorized_signatory' => 'setAuthorizedSignatory',
        'representative_id' => 'setRepresentativeId',
        'is_intercompany' => 'setIsIntercompany',
        'company_label_id' => 'setCompanyLabelId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'process_settings' => 'getProcessSettings',
        'organization_type' => 'getOrganizationType',
        'client_reference' => 'getClientReference',
        'sales_reference' => 'getSalesReference',
        'channel' => 'getChannel',
        'origin_reference' => 'getOriginReference',
        'name' => 'getName',
        'phone_number' => 'getPhoneNumber',
        'mobile_number' => 'getMobileNumber',
        'email_address' => 'getEmailAddress',
        'e_invoice_address' => 'getEInvoiceAddress',
        'bad_payment_history' => 'getBadPaymentHistory',
        'has_receiver' => 'getHasReceiver',
        'with_collection_agency' => 'getWithCollectionAgency',
        'news_letter' => 'getNewsLetter',
        'product_or_service_info' => 'getProductOrServiceInfo',
        'print_welcome_letter' => 'getPrintWelcomeLetter',
        'block_settlement_active' => 'getBlockSettlementActive',
        'block_settlement_comment' => 'getBlockSettlementComment',
        'preferred_contact_method' => 'getPreferredContactMethod',
        'kvk_number' => 'getKvkNumber',
        'vat_number' => 'getVatNumber',
        'is_parent' => 'getIsParent',
        'parent_organization_id' => 'getParentOrganizationId',
        'organization_group_id' => 'getOrganizationGroupId',
        'invoice_group_reference' => 'getInvoiceGroupReference',
        'mailing_address' => 'getMailingAddress',
        'business_address' => 'getBusinessAddress',
        'person' => 'getPerson',
        'debtor' => 'getDebtor',
        'registered_seat' => 'getRegisteredSeat',
        'authorized_signatory' => 'getAuthorizedSignatory',
        'representative_id' => 'getRepresentativeId',
        'is_intercompany' => 'getIsIntercompany',
        'company_label_id' => 'getCompanyLabelId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ORGANIZATION_TYPE_BUSINESS = 'Business';
    const ORGANIZATION_TYPE_CONSUMER = 'Consumer';
    const PREFERRED_CONTACT_METHOD_EMAIL = 'Email';
    const PREFERRED_CONTACT_METHOD_MAIL = 'Mail';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrganizationTypeAllowableValues()
    {
        return [
            self::ORGANIZATION_TYPE_BUSINESS,
            self::ORGANIZATION_TYPE_CONSUMER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPreferredContactMethodAllowableValues()
    {
        return [
            self::PREFERRED_CONTACT_METHOD_EMAIL,
            self::PREFERRED_CONTACT_METHOD_MAIL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['process_settings'] = isset($data['process_settings']) ? $data['process_settings'] : null;
        $this->container['organization_type'] = isset($data['organization_type']) ? $data['organization_type'] : null;
        $this->container['client_reference'] = isset($data['client_reference']) ? $data['client_reference'] : null;
        $this->container['sales_reference'] = isset($data['sales_reference']) ? $data['sales_reference'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['origin_reference'] = isset($data['origin_reference']) ? $data['origin_reference'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['mobile_number'] = isset($data['mobile_number']) ? $data['mobile_number'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['e_invoice_address'] = isset($data['e_invoice_address']) ? $data['e_invoice_address'] : null;
        $this->container['bad_payment_history'] = isset($data['bad_payment_history']) ? $data['bad_payment_history'] : null;
        $this->container['has_receiver'] = isset($data['has_receiver']) ? $data['has_receiver'] : null;
        $this->container['with_collection_agency'] = isset($data['with_collection_agency']) ? $data['with_collection_agency'] : null;
        $this->container['news_letter'] = isset($data['news_letter']) ? $data['news_letter'] : null;
        $this->container['product_or_service_info'] = isset($data['product_or_service_info']) ? $data['product_or_service_info'] : null;
        $this->container['print_welcome_letter'] = isset($data['print_welcome_letter']) ? $data['print_welcome_letter'] : null;
        $this->container['block_settlement_active'] = isset($data['block_settlement_active']) ? $data['block_settlement_active'] : null;
        $this->container['block_settlement_comment'] = isset($data['block_settlement_comment']) ? $data['block_settlement_comment'] : null;
        $this->container['preferred_contact_method'] = isset($data['preferred_contact_method']) ? $data['preferred_contact_method'] : null;
        $this->container['kvk_number'] = isset($data['kvk_number']) ? $data['kvk_number'] : null;
        $this->container['vat_number'] = isset($data['vat_number']) ? $data['vat_number'] : null;
        $this->container['is_parent'] = isset($data['is_parent']) ? $data['is_parent'] : null;
        $this->container['parent_organization_id'] = isset($data['parent_organization_id']) ? $data['parent_organization_id'] : null;
        $this->container['organization_group_id'] = isset($data['organization_group_id']) ? $data['organization_group_id'] : null;
        $this->container['invoice_group_reference'] = isset($data['invoice_group_reference']) ? $data['invoice_group_reference'] : null;
        $this->container['mailing_address'] = isset($data['mailing_address']) ? $data['mailing_address'] : null;
        $this->container['business_address'] = isset($data['business_address']) ? $data['business_address'] : null;
        $this->container['person'] = isset($data['person']) ? $data['person'] : null;
        $this->container['debtor'] = isset($data['debtor']) ? $data['debtor'] : null;
        $this->container['registered_seat'] = isset($data['registered_seat']) ? $data['registered_seat'] : null;
        $this->container['authorized_signatory'] = isset($data['authorized_signatory']) ? $data['authorized_signatory'] : null;
        $this->container['representative_id'] = isset($data['representative_id']) ? $data['representative_id'] : null;
        $this->container['is_intercompany'] = isset($data['is_intercompany']) ? $data['is_intercompany'] : null;
        $this->container['company_label_id'] = isset($data['company_label_id']) ? $data['company_label_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOrganizationTypeAllowableValues();
        if (!is_null($this->container['organization_type']) && !in_array($this->container['organization_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'organization_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPreferredContactMethodAllowableValues();
        if (!is_null($this->container['preferred_contact_method']) && !in_array($this->container['preferred_contact_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'preferred_contact_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets process_settings
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationPostDataProcessSettingsPostData
     */
    public function getProcessSettings()
    {
        return $this->container['process_settings'];
    }

    /**
     * Sets process_settings
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationPostDataProcessSettingsPostData $process_settings process_settings
     *
     * @return $this
     */
    public function setProcessSettings($process_settings)
    {
        $this->container['process_settings'] = $process_settings;

        return $this;
    }

    /**
     * Gets organization_type
     *
     * @return string
     */
    public function getOrganizationType()
    {
        return $this->container['organization_type'];
    }

    /**
     * Sets organization_type
     *
     * @param string $organization_type Verplicht veld waarmee aangegeven wordt of dit een zakelijke of particuliere klant is
     *
     * @return $this
     */
    public function setOrganizationType($organization_type)
    {
        $allowedValues = $this->getOrganizationTypeAllowableValues();
        if (!is_null($organization_type) && !in_array($organization_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'organization_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['organization_type'] = $organization_type;

        return $this;
    }

    /**
     * Gets client_reference
     *
     * @return string
     */
    public function getClientReference()
    {
        return $this->container['client_reference'];
    }

    /**
     * Sets client_reference
     *
     * @param string $client_reference Als Ecedo klantnummers genereert is dit een vrij veld waar een externe referentie in vastgelegd kan worden.<br />  Als Ecedo de klantnummers niet genereert dan moet het gewenste klantnummer via dit veld ingestuurd worden
     *
     * @return $this
     */
    public function setClientReference($client_reference)
    {
        $this->container['client_reference'] = $client_reference;

        return $this;
    }

    /**
     * Gets sales_reference
     *
     * @return string
     */
    public function getSalesReference()
    {
        return $this->container['sales_reference'];
    }

    /**
     * Sets sales_reference
     *
     * @param string $sales_reference Vrij veld waarin bijvoorbeeld vastgelegd kan worden via welke sale deze klant is gewonnen
     *
     * @return $this
     */
    public function setSalesReference($sales_reference)
    {
        $this->container['sales_reference'] = $sales_reference;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel Vrij veld waarin bijvoorbeeld vastgelegd kan worden via welk kanaal de klant is gewonnen
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets origin_reference
     *
     * @return string
     */
    public function getOriginReference()
    {
        return $this->container['origin_reference'];
    }

    /**
     * Sets origin_reference
     *
     * @param string $origin_reference Vrij veld waarin bijvoorbeeld vastgelegd kan worden via welk bron de klant is gewonnen
     *
     * @return $this
     */
    public function setOriginReference($origin_reference)
    {
        $this->container['origin_reference'] = $origin_reference;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Verplicht veld met de bedrijfsnaam wanneer een zakelijke klant wordt aangemaakt. Dit veld mag niet gevuld zijn bij consumenten.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number Optioneel veld waarin het vaste telefoonnummer van de klant kan worden opgeslagen
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets mobile_number
     *
     * @return string
     */
    public function getMobileNumber()
    {
        return $this->container['mobile_number'];
    }

    /**
     * Sets mobile_number
     *
     * @param string $mobile_number Optioneel veld waarin het mobiele telefoonnummer van de klant kan worden opgeslagen
     *
     * @return $this
     */
    public function setMobileNumber($mobile_number)
    {
        $this->container['mobile_number'] = $mobile_number;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address Optioneel veld waarin het e-mailadres van de klant kan worden opgeslagen
     *
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets e_invoice_address
     *
     * @return string
     */
    public function getEInvoiceAddress()
    {
        return $this->container['e_invoice_address'];
    }

    /**
     * Sets e_invoice_address
     *
     * @param string $e_invoice_address Optioneel e-factuuradres van de klant. Dit adres is nodig wanneer er e-facturen voor de klant aangemaakt moeten worden.
     *
     * @return $this
     */
    public function setEInvoiceAddress($e_invoice_address)
    {
        $this->container['e_invoice_address'] = $e_invoice_address;

        return $this;
    }

    /**
     * Gets bad_payment_history
     *
     * @return bool
     */
    public function getBadPaymentHistory()
    {
        return $this->container['bad_payment_history'];
    }

    /**
     * Sets bad_payment_history
     *
     * @param bool $bad_payment_history Optioneel veld waarmee aangegeven kan worden dat de klant een slechte betaalhistorie heeft. De waarde van dit veld is ter registratie en heeft geen impact op processen
     *
     * @return $this
     */
    public function setBadPaymentHistory($bad_payment_history)
    {
        $this->container['bad_payment_history'] = $bad_payment_history;

        return $this;
    }

    /**
     * Gets has_receiver
     *
     * @return bool
     */
    public function getHasReceiver()
    {
        return $this->container['has_receiver'];
    }

    /**
     * Sets has_receiver
     *
     * @param bool $has_receiver Optioneel veld waarmee aangegeven kan worden dat de klant een bewindvoerder heeft. De waarde van dit veld is ter registratie en heeft geen impact op processen
     *
     * @return $this
     */
    public function setHasReceiver($has_receiver)
    {
        $this->container['has_receiver'] = $has_receiver;

        return $this;
    }

    /**
     * Gets with_collection_agency
     *
     * @return bool
     */
    public function getWithCollectionAgency()
    {
        return $this->container['with_collection_agency'];
    }

    /**
     * Sets with_collection_agency
     *
     * @param bool $with_collection_agency Optioneel veld waarmee aangegeven kan worden dat de klant bij een incassobureau is aangemeld. De waarde van dit veld is ter registratie en heeft geen impact op processen
     *
     * @return $this
     */
    public function setWithCollectionAgency($with_collection_agency)
    {
        $this->container['with_collection_agency'] = $with_collection_agency;

        return $this;
    }

    /**
     * Gets news_letter
     *
     * @return bool
     */
    public function getNewsLetter()
    {
        return $this->container['news_letter'];
    }

    /**
     * Sets news_letter
     *
     * @param bool $news_letter Optioneel veld waarmee aangegeven kan worden dat de klant een nieuwsbrief wil ontvangen. De waarde van dit veld is ter registratie en heeft geen impact op processen. De leverancier is zelf verantwoordelijk voor het versturen van de nieuwsbrief
     *
     * @return $this
     */
    public function setNewsLetter($news_letter)
    {
        $this->container['news_letter'] = $news_letter;

        return $this;
    }

    /**
     * Gets product_or_service_info
     *
     * @return bool
     */
    public function getProductOrServiceInfo()
    {
        return $this->container['product_or_service_info'];
    }

    /**
     * Sets product_or_service_info
     *
     * @param bool $product_or_service_info Optioneel veld waarmee aangegeven kan worden dat de klant informatie over producten of diensten wil ontvangen. De waarde van dit veld is ter registratie en heeft geen impact op processen. De leverancier is zelf verantwoordelijk voor het versturen van de informatie
     *
     * @return $this
     */
    public function setProductOrServiceInfo($product_or_service_info)
    {
        $this->container['product_or_service_info'] = $product_or_service_info;

        return $this;
    }

    /**
     * Gets print_welcome_letter
     *
     * @return bool
     */
    public function getPrintWelcomeLetter()
    {
        return $this->container['print_welcome_letter'];
    }

    /**
     * Sets print_welcome_letter
     *
     * @param bool $print_welcome_letter Optioneel veld waarmee aangegeven kan worden dat de klant geen welkomstbrief wil ontvangen. Alleen de waarde \"false\" is toegestaan
     *
     * @return $this
     */
    public function setPrintWelcomeLetter($print_welcome_letter)
    {
        $this->container['print_welcome_letter'] = $print_welcome_letter;

        return $this;
    }

    /**
     * Gets block_settlement_active
     *
     * @return bool
     */
    public function getBlockSettlementActive()
    {
        return $this->container['block_settlement_active'];
    }

    /**
     * Sets block_settlement_active
     *
     * @param bool $block_settlement_active Optioneel veld waarmee aangegeven kan worden dat de klant een factuurblokkade moet krijgen
     *
     * @return $this
     */
    public function setBlockSettlementActive($block_settlement_active)
    {
        $this->container['block_settlement_active'] = $block_settlement_active;

        return $this;
    }

    /**
     * Gets block_settlement_comment
     *
     * @return string
     */
    public function getBlockSettlementComment()
    {
        return $this->container['block_settlement_comment'];
    }

    /**
     * Sets block_settlement_comment
     *
     * @param string $block_settlement_comment Optioneel veld waarmee aangegeven kan worden waarom de klant een factuurblokkade heeft gekregen
     *
     * @return $this
     */
    public function setBlockSettlementComment($block_settlement_comment)
    {
        $this->container['block_settlement_comment'] = $block_settlement_comment;

        return $this;
    }

    /**
     * Gets preferred_contact_method
     *
     * @return string
     */
    public function getPreferredContactMethod()
    {
        return $this->container['preferred_contact_method'];
    }

    /**
     * Sets preferred_contact_method
     *
     * @param string $preferred_contact_method Optioneel veld waarmee de standaard communicatiemethode overschreven kan worden. Dit heeft bijvoorbeeld invloed op de methode waarmee de welkomstbrief wordt verstuurd
     *
     * @return $this
     */
    public function setPreferredContactMethod($preferred_contact_method)
    {
        $allowedValues = $this->getPreferredContactMethodAllowableValues();
        if (!is_null($preferred_contact_method) && !in_array($preferred_contact_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'preferred_contact_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['preferred_contact_method'] = $preferred_contact_method;

        return $this;
    }

    /**
     * Gets kvk_number
     *
     * @return string
     */
    public function getKvkNumber()
    {
        return $this->container['kvk_number'];
    }

    /**
     * Sets kvk_number
     *
     * @param string $kvk_number Optioneel veld waarin het KvK-nummer van een zakelijke klant vastgelegd kan worden
     *
     * @return $this
     */
    public function setKvkNumber($kvk_number)
    {
        $this->container['kvk_number'] = $kvk_number;

        return $this;
    }

    /**
     * Gets vat_number
     *
     * @return string
     */
    public function getVatNumber()
    {
        return $this->container['vat_number'];
    }

    /**
     * Sets vat_number
     *
     * @param string $vat_number Optioneel veld waarin het btw-nummer van een zakelijke klant vastgelegd kan worden
     *
     * @return $this
     */
    public function setVatNumber($vat_number)
    {
        $this->container['vat_number'] = $vat_number;

        return $this;
    }

    /**
     * Gets is_parent
     *
     * @return bool
     */
    public function getIsParent()
    {
        return $this->container['is_parent'];
    }

    /**
     * Sets is_parent
     *
     * @param bool $is_parent Optioneel veld waarmee aangegeven kan worden dat de klant een moederorganisatie is. Dit is alleen toegestaan bij zakelijke klanten
     *
     * @return $this
     */
    public function setIsParent($is_parent)
    {
        $this->container['is_parent'] = $is_parent;

        return $this;
    }

    /**
     * Gets parent_organization_id
     *
     * @return string
     */
    public function getParentOrganizationId()
    {
        return $this->container['parent_organization_id'];
    }

    /**
     * Sets parent_organization_id
     *
     * @param string $parent_organization_id Optioneel veld waarmee aangegeven kan worden dat de klant een dochterorganisatie is. De OrganizationId van de moederorganisatie moet meegegeven worden. Dit is alleen toegestaan bij zakelijke klanten
     *
     * @return $this
     */
    public function setParentOrganizationId($parent_organization_id)
    {
        $this->container['parent_organization_id'] = $parent_organization_id;

        return $this;
    }

    /**
     * Gets organization_group_id
     *
     * @return string
     */
    public function getOrganizationGroupId()
    {
        return $this->container['organization_group_id'];
    }

    /**
     * Sets organization_group_id
     *
     * @param string $organization_group_id Optioneel veld waarmee de klant in een specifieke klantgroep geplaatst kan worden. Als dit veld niet wordt meegegeven wordt de klant automatisch in de klantgroep \"Algemeen\" geplaatst
     *
     * @return $this
     */
    public function setOrganizationGroupId($organization_group_id)
    {
        $this->container['organization_group_id'] = $organization_group_id;

        return $this;
    }

    /**
     * Gets invoice_group_reference
     *
     * @return string
     */
    public function getInvoiceGroupReference()
    {
        return $this->container['invoice_group_reference'];
    }

    /**
     * Sets invoice_group_reference
     *
     * @param string $invoice_group_reference Dochterorganisaties moeten in een factuurgroep geplaatst worden. De referentie van de factuurgroep (die bij de moeder aangemaakt moet zijn) moet in deze variabele worden meegegeven.
     *
     * @return $this
     */
    public function setInvoiceGroupReference($invoice_group_reference)
    {
        $this->container['invoice_group_reference'] = $invoice_group_reference;

        return $this;
    }

    /**
     * Gets mailing_address
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiAddressPostData
     */
    public function getMailingAddress()
    {
        return $this->container['mailing_address'];
    }

    /**
     * Sets mailing_address
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceApiAddressPostData $mailing_address Postadres van de klant
     *
     * @return $this
     */
    public function setMailingAddress($mailing_address)
    {
        $this->container['mailing_address'] = $mailing_address;

        return $this;
    }

    /**
     * Gets business_address
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiAddressPostData
     */
    public function getBusinessAddress()
    {
        return $this->container['business_address'];
    }

    /**
     * Sets business_address
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceApiAddressPostData $business_address Eventueel afwijkend vestigingsadres van de klant. Alleen toegestaan bij zakelijke klanten
     *
     * @return $this
     */
    public function setBusinessAddress($business_address)
    {
        $this->container['business_address'] = $business_address;

        return $this;
    }

    /**
     * Gets person
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiPersonPostData
     */
    public function getPerson()
    {
        return $this->container['person'];
    }

    /**
     * Sets person
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceApiPersonPostData $person De gegevens van de primaire contactpersoon
     *
     * @return $this
     */
    public function setPerson($person)
    {
        $this->container['person'] = $person;

        return $this;
    }

    /**
     * Gets debtor
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiDebtorPostData
     */
    public function getDebtor()
    {
        return $this->container['debtor'];
    }

    /**
     * Sets debtor
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceApiDebtorPostData $debtor Debiteur- en betaalgegevens
     *
     * @return $this
     */
    public function setDebtor($debtor)
    {
        $this->container['debtor'] = $debtor;

        return $this;
    }

    /**
     * Gets registered_seat
     *
     * @return string
     */
    public function getRegisteredSeat()
    {
        return $this->container['registered_seat'];
    }

    /**
     * Sets registered_seat
     *
     * @param string $registered_seat Optioneel veld voor zakelijke klanten waarmee aangegeven worden waar de klant statutair gevestigd is
     *
     * @return $this
     */
    public function setRegisteredSeat($registered_seat)
    {
        $this->container['registered_seat'] = $registered_seat;

        return $this;
    }

    /**
     * Gets authorized_signatory
     *
     * @return string
     */
    public function getAuthorizedSignatory()
    {
        return $this->container['authorized_signatory'];
    }

    /**
     * Sets authorized_signatory
     *
     * @param string $authorized_signatory Optioneel veld voor zakelijke klanten waarmee aangegeven worden wie tekenbevoegd is
     *
     * @return $this
     */
    public function setAuthorizedSignatory($authorized_signatory)
    {
        $this->container['authorized_signatory'] = $authorized_signatory;

        return $this;
    }

    /**
     * Gets representative_id
     *
     * @return string
     */
    public function getRepresentativeId()
    {
        return $this->container['representative_id'];
    }

    /**
     * Sets representative_id
     *
     * @param string $representative_id Optioneel veld waarmee de verkoper die de klant heeft getekend geregistreerd kan worden. De verkoper moet aangemaakt zijn via de GUI
     *
     * @return $this
     */
    public function setRepresentativeId($representative_id)
    {
        $this->container['representative_id'] = $representative_id;

        return $this;
    }

    /**
     * Gets is_intercompany
     *
     * @return bool
     */
    public function getIsIntercompany()
    {
        return $this->container['is_intercompany'];
    }

    /**
     * Sets is_intercompany
     *
     * @param bool $is_intercompany Optioneel veld waarmee bij zakelijke klanten aangegeven kan worden dat de facturen intercompany verstuurd worden
     *
     * @return $this
     */
    public function setIsIntercompany($is_intercompany)
    {
        $this->container['is_intercompany'] = $is_intercompany;

        return $this;
    }

    /**
     * Gets company_label_id
     *
     * @return string
     */
    public function getCompanyLabelId()
    {
        return $this->container['company_label_id'];
    }

    /**
     * Sets company_label_id
     *
     * @param string $company_label_id Verplicht veld wanneer er meerdere labels geconfigureerd zijn. Dit veld moet het ID bevatten van het label waar de klant in ondergebracht moet worden
     *
     * @return $this
     */
    public function setCompanyLabelId($company_label_id)
    {
        $this->container['company_label_id'] = $company_label_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


