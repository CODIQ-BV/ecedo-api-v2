<?php
/**
 * EcedoERPCRMInterfaceApiMeansOfProduction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiMeansOfProduction Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiMeansOfProduction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.MeansOfProduction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'organization_id' => 'string',
        'means_of_production_id' => 'string',
        'means_of_production_type' => 'string',
        'means_of_production_type_localized' => 'string',
        'market_segment' => 'string',
        'market_segment_localized' => 'string',
        'production_type' => 'string',
        'production_type_localized' => 'string',
        'reference' => 'string',
        'description' => 'string',
        'annual_production' => 'int',
        'nr_of_production_units' => 'int',
        'latitude' => 'string',
        'longitude' => 'string',
        'address' => '\Swagger\Client\Model\EcedoERPCRMInterfaceApiAddress',
        'contract' => '\Swagger\Client\Model\EcedoERPCRMInterfaceApiContract',
        'entity_properties' => '\Swagger\Client\Model\EcedoERPCRMInterfaceApiEntityProperty[]',
        'certi_q_eans' => '\Swagger\Client\Model\EcedoERPCRMInterfaceApiCertiQEan[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'organization_id' => null,
        'means_of_production_id' => null,
        'means_of_production_type' => null,
        'means_of_production_type_localized' => null,
        'market_segment' => null,
        'market_segment_localized' => null,
        'production_type' => null,
        'production_type_localized' => null,
        'reference' => null,
        'description' => null,
        'annual_production' => 'int32',
        'nr_of_production_units' => 'int32',
        'latitude' => null,
        'longitude' => null,
        'address' => null,
        'contract' => null,
        'entity_properties' => null,
        'certi_q_eans' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organization_id' => 'OrganizationId',
        'means_of_production_id' => 'MeansOfProductionId',
        'means_of_production_type' => 'MeansOfProductionType',
        'means_of_production_type_localized' => 'MeansOfProductionTypeLocalized',
        'market_segment' => 'MarketSegment',
        'market_segment_localized' => 'MarketSegmentLocalized',
        'production_type' => 'ProductionType',
        'production_type_localized' => 'ProductionTypeLocalized',
        'reference' => 'Reference',
        'description' => 'Description',
        'annual_production' => 'AnnualProduction',
        'nr_of_production_units' => 'NrOfProductionUnits',
        'latitude' => 'Latitude',
        'longitude' => 'Longitude',
        'address' => 'Address',
        'contract' => 'Contract',
        'entity_properties' => 'EntityProperties',
        'certi_q_eans' => 'CertiQEans'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organization_id' => 'setOrganizationId',
        'means_of_production_id' => 'setMeansOfProductionId',
        'means_of_production_type' => 'setMeansOfProductionType',
        'means_of_production_type_localized' => 'setMeansOfProductionTypeLocalized',
        'market_segment' => 'setMarketSegment',
        'market_segment_localized' => 'setMarketSegmentLocalized',
        'production_type' => 'setProductionType',
        'production_type_localized' => 'setProductionTypeLocalized',
        'reference' => 'setReference',
        'description' => 'setDescription',
        'annual_production' => 'setAnnualProduction',
        'nr_of_production_units' => 'setNrOfProductionUnits',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'address' => 'setAddress',
        'contract' => 'setContract',
        'entity_properties' => 'setEntityProperties',
        'certi_q_eans' => 'setCertiQEans'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organization_id' => 'getOrganizationId',
        'means_of_production_id' => 'getMeansOfProductionId',
        'means_of_production_type' => 'getMeansOfProductionType',
        'means_of_production_type_localized' => 'getMeansOfProductionTypeLocalized',
        'market_segment' => 'getMarketSegment',
        'market_segment_localized' => 'getMarketSegmentLocalized',
        'production_type' => 'getProductionType',
        'production_type_localized' => 'getProductionTypeLocalized',
        'reference' => 'getReference',
        'description' => 'getDescription',
        'annual_production' => 'getAnnualProduction',
        'nr_of_production_units' => 'getNrOfProductionUnits',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'address' => 'getAddress',
        'contract' => 'getContract',
        'entity_properties' => 'getEntityProperties',
        'certi_q_eans' => 'getCertiQEans'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['organization_id'] = isset($data['organization_id']) ? $data['organization_id'] : null;
        $this->container['means_of_production_id'] = isset($data['means_of_production_id']) ? $data['means_of_production_id'] : null;
        $this->container['means_of_production_type'] = isset($data['means_of_production_type']) ? $data['means_of_production_type'] : null;
        $this->container['means_of_production_type_localized'] = isset($data['means_of_production_type_localized']) ? $data['means_of_production_type_localized'] : null;
        $this->container['market_segment'] = isset($data['market_segment']) ? $data['market_segment'] : null;
        $this->container['market_segment_localized'] = isset($data['market_segment_localized']) ? $data['market_segment_localized'] : null;
        $this->container['production_type'] = isset($data['production_type']) ? $data['production_type'] : null;
        $this->container['production_type_localized'] = isset($data['production_type_localized']) ? $data['production_type_localized'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['annual_production'] = isset($data['annual_production']) ? $data['annual_production'] : null;
        $this->container['nr_of_production_units'] = isset($data['nr_of_production_units']) ? $data['nr_of_production_units'] : null;
        $this->container['latitude'] = isset($data['latitude']) ? $data['latitude'] : null;
        $this->container['longitude'] = isset($data['longitude']) ? $data['longitude'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['contract'] = isset($data['contract']) ? $data['contract'] : null;
        $this->container['entity_properties'] = isset($data['entity_properties']) ? $data['entity_properties'] : null;
        $this->container['certi_q_eans'] = isset($data['certi_q_eans']) ? $data['certi_q_eans'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organization_id
     *
     * @return string
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param string $organization_id organization_id
     *
     * @return $this
     */
    public function setOrganizationId($organization_id)
    {
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets means_of_production_id
     *
     * @return string
     */
    public function getMeansOfProductionId()
    {
        return $this->container['means_of_production_id'];
    }

    /**
     * Sets means_of_production_id
     *
     * @param string $means_of_production_id means_of_production_id
     *
     * @return $this
     */
    public function setMeansOfProductionId($means_of_production_id)
    {
        $this->container['means_of_production_id'] = $means_of_production_id;

        return $this;
    }

    /**
     * Gets means_of_production_type
     *
     * @return string
     */
    public function getMeansOfProductionType()
    {
        return $this->container['means_of_production_type'];
    }

    /**
     * Sets means_of_production_type
     *
     * @param string $means_of_production_type means_of_production_type
     *
     * @return $this
     */
    public function setMeansOfProductionType($means_of_production_type)
    {
        $this->container['means_of_production_type'] = $means_of_production_type;

        return $this;
    }

    /**
     * Gets means_of_production_type_localized
     *
     * @return string
     */
    public function getMeansOfProductionTypeLocalized()
    {
        return $this->container['means_of_production_type_localized'];
    }

    /**
     * Sets means_of_production_type_localized
     *
     * @param string $means_of_production_type_localized means_of_production_type_localized
     *
     * @return $this
     */
    public function setMeansOfProductionTypeLocalized($means_of_production_type_localized)
    {
        $this->container['means_of_production_type_localized'] = $means_of_production_type_localized;

        return $this;
    }

    /**
     * Gets market_segment
     *
     * @return string
     */
    public function getMarketSegment()
    {
        return $this->container['market_segment'];
    }

    /**
     * Sets market_segment
     *
     * @param string $market_segment market_segment
     *
     * @return $this
     */
    public function setMarketSegment($market_segment)
    {
        $this->container['market_segment'] = $market_segment;

        return $this;
    }

    /**
     * Gets market_segment_localized
     *
     * @return string
     */
    public function getMarketSegmentLocalized()
    {
        return $this->container['market_segment_localized'];
    }

    /**
     * Sets market_segment_localized
     *
     * @param string $market_segment_localized market_segment_localized
     *
     * @return $this
     */
    public function setMarketSegmentLocalized($market_segment_localized)
    {
        $this->container['market_segment_localized'] = $market_segment_localized;

        return $this;
    }

    /**
     * Gets production_type
     *
     * @return string
     */
    public function getProductionType()
    {
        return $this->container['production_type'];
    }

    /**
     * Sets production_type
     *
     * @param string $production_type production_type
     *
     * @return $this
     */
    public function setProductionType($production_type)
    {
        $this->container['production_type'] = $production_type;

        return $this;
    }

    /**
     * Gets production_type_localized
     *
     * @return string
     */
    public function getProductionTypeLocalized()
    {
        return $this->container['production_type_localized'];
    }

    /**
     * Sets production_type_localized
     *
     * @param string $production_type_localized production_type_localized
     *
     * @return $this
     */
    public function setProductionTypeLocalized($production_type_localized)
    {
        $this->container['production_type_localized'] = $production_type_localized;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets annual_production
     *
     * @return int
     */
    public function getAnnualProduction()
    {
        return $this->container['annual_production'];
    }

    /**
     * Sets annual_production
     *
     * @param int $annual_production annual_production
     *
     * @return $this
     */
    public function setAnnualProduction($annual_production)
    {
        $this->container['annual_production'] = $annual_production;

        return $this;
    }

    /**
     * Gets nr_of_production_units
     *
     * @return int
     */
    public function getNrOfProductionUnits()
    {
        return $this->container['nr_of_production_units'];
    }

    /**
     * Sets nr_of_production_units
     *
     * @param int $nr_of_production_units nr_of_production_units
     *
     * @return $this
     */
    public function setNrOfProductionUnits($nr_of_production_units)
    {
        $this->container['nr_of_production_units'] = $nr_of_production_units;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return string
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param string $latitude latitude
     *
     * @return $this
     */
    public function setLatitude($latitude)
    {
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return string
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param string $longitude longitude
     *
     * @return $this
     */
    public function setLongitude($longitude)
    {
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceApiAddress $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets contract
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiContract
     */
    public function getContract()
    {
        return $this->container['contract'];
    }

    /**
     * Sets contract
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceApiContract $contract contract
     *
     * @return $this
     */
    public function setContract($contract)
    {
        $this->container['contract'] = $contract;

        return $this;
    }

    /**
     * Gets entity_properties
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiEntityProperty[]
     */
    public function getEntityProperties()
    {
        return $this->container['entity_properties'];
    }

    /**
     * Sets entity_properties
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceApiEntityProperty[] $entity_properties entity_properties
     *
     * @return $this
     */
    public function setEntityProperties($entity_properties)
    {
        $this->container['entity_properties'] = $entity_properties;

        return $this;
    }

    /**
     * Gets certi_q_eans
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiCertiQEan[]
     */
    public function getCertiQEans()
    {
        return $this->container['certi_q_eans'];
    }

    /**
     * Sets certi_q_eans
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceApiCertiQEan[] $certi_q_eans certi_q_eans
     *
     * @return $this
     */
    public function setCertiQEans($certi_q_eans)
    {
        $this->container['certi_q_eans'] = $certi_q_eans;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


