<?php
/**
 * EcedoERPCRMInterfaceApiResellerOrganization
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiResellerOrganization Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiResellerOrganization implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.ResellerOrganization';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'organization_type' => 'string',
        'organization_type_localized' => 'string',
        'organization_id' => 'string',
        'reference' => 'string',
        'organization_group_id' => 'string',
        'organization_group' => 'string',
        'name' => 'string',
        'phone_number' => 'string',
        'mobile_number' => 'string',
        'fax_number' => 'string',
        'email' => 'string',
        'person' => '\Swagger\Client\Model\EcedoERPCRMInterfaceApiPerson'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'organization_type' => null,
        'organization_type_localized' => null,
        'organization_id' => null,
        'reference' => null,
        'organization_group_id' => null,
        'organization_group' => null,
        'name' => null,
        'phone_number' => null,
        'mobile_number' => null,
        'fax_number' => null,
        'email' => null,
        'person' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organization_type' => 'OrganizationType',
        'organization_type_localized' => 'OrganizationTypeLocalized',
        'organization_id' => 'OrganizationId',
        'reference' => 'Reference',
        'organization_group_id' => 'OrganizationGroupId',
        'organization_group' => 'OrganizationGroup',
        'name' => 'Name',
        'phone_number' => 'PhoneNumber',
        'mobile_number' => 'MobileNumber',
        'fax_number' => 'FaxNumber',
        'email' => 'Email',
        'person' => 'Person'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organization_type' => 'setOrganizationType',
        'organization_type_localized' => 'setOrganizationTypeLocalized',
        'organization_id' => 'setOrganizationId',
        'reference' => 'setReference',
        'organization_group_id' => 'setOrganizationGroupId',
        'organization_group' => 'setOrganizationGroup',
        'name' => 'setName',
        'phone_number' => 'setPhoneNumber',
        'mobile_number' => 'setMobileNumber',
        'fax_number' => 'setFaxNumber',
        'email' => 'setEmail',
        'person' => 'setPerson'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organization_type' => 'getOrganizationType',
        'organization_type_localized' => 'getOrganizationTypeLocalized',
        'organization_id' => 'getOrganizationId',
        'reference' => 'getReference',
        'organization_group_id' => 'getOrganizationGroupId',
        'organization_group' => 'getOrganizationGroup',
        'name' => 'getName',
        'phone_number' => 'getPhoneNumber',
        'mobile_number' => 'getMobileNumber',
        'fax_number' => 'getFaxNumber',
        'email' => 'getEmail',
        'person' => 'getPerson'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['organization_type'] = isset($data['organization_type']) ? $data['organization_type'] : null;
        $this->container['organization_type_localized'] = isset($data['organization_type_localized']) ? $data['organization_type_localized'] : null;
        $this->container['organization_id'] = isset($data['organization_id']) ? $data['organization_id'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['organization_group_id'] = isset($data['organization_group_id']) ? $data['organization_group_id'] : null;
        $this->container['organization_group'] = isset($data['organization_group']) ? $data['organization_group'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['mobile_number'] = isset($data['mobile_number']) ? $data['mobile_number'] : null;
        $this->container['fax_number'] = isset($data['fax_number']) ? $data['fax_number'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['person'] = isset($data['person']) ? $data['person'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organization_type
     *
     * @return string
     */
    public function getOrganizationType()
    {
        return $this->container['organization_type'];
    }

    /**
     * Sets organization_type
     *
     * @param string $organization_type Geeft aan of het een zakelijke of particuliere klant is
     *
     * @return $this
     */
    public function setOrganizationType($organization_type)
    {
        $this->container['organization_type'] = $organization_type;

        return $this;
    }

    /**
     * Gets organization_type_localized
     *
     * @return string
     */
    public function getOrganizationTypeLocalized()
    {
        return $this->container['organization_type_localized'];
    }

    /**
     * Sets organization_type_localized
     *
     * @param string $organization_type_localized Nederlandse vertaling van OrganizationType
     *
     * @return $this
     */
    public function setOrganizationTypeLocalized($organization_type_localized)
    {
        $this->container['organization_type_localized'] = $organization_type_localized;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return string
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param string $organization_id Het unieke ID van deze klant
     *
     * @return $this
     */
    public function setOrganizationId($organization_id)
    {
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference Ket klantnummer van de klant
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets organization_group_id
     *
     * @return string
     */
    public function getOrganizationGroupId()
    {
        return $this->container['organization_group_id'];
    }

    /**
     * Sets organization_group_id
     *
     * @param string $organization_group_id Ket klantnummer van de klant
     *
     * @return $this
     */
    public function setOrganizationGroupId($organization_group_id)
    {
        $this->container['organization_group_id'] = $organization_group_id;

        return $this;
    }

    /**
     * Gets organization_group
     *
     * @return string
     */
    public function getOrganizationGroup()
    {
        return $this->container['organization_group'];
    }

    /**
     * Sets organization_group
     *
     * @param string $organization_group De naam van de klantgroep waarin de klant is geplaatst
     *
     * @return $this
     */
    public function setOrganizationGroup($organization_group)
    {
        $this->container['organization_group'] = $organization_group;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Bij zakelijke klanten bevat dit veld de bedrijfsnaam. Bij consumenten is dit een samengestelde naam op basis van de persoonsgegevens van de klant
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number Optioneel veld waarin het vaste telefoonnummer van de klant kan worden opgeslagen
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets mobile_number
     *
     * @return string
     */
    public function getMobileNumber()
    {
        return $this->container['mobile_number'];
    }

    /**
     * Sets mobile_number
     *
     * @param string $mobile_number Optioneel veld waarin het mobiele telefoonnummer van de klant kan worden opgeslagen
     *
     * @return $this
     */
    public function setMobileNumber($mobile_number)
    {
        $this->container['mobile_number'] = $mobile_number;

        return $this;
    }

    /**
     * Gets fax_number
     *
     * @return string
     */
    public function getFaxNumber()
    {
        return $this->container['fax_number'];
    }

    /**
     * Sets fax_number
     *
     * @param string $fax_number Optioneel veld waarin het faxnummer van de klant kan worden opgeslagen
     *
     * @return $this
     */
    public function setFaxNumber($fax_number)
    {
        $this->container['fax_number'] = $fax_number;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Optioneel veld waarin het e-mailadres van de klant kan worden opgeslagen
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets person
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiPerson
     */
    public function getPerson()
    {
        return $this->container['person'];
    }

    /**
     * Sets person
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceApiPerson $person De gegevens van de primaire contactpersoon
     *
     * @return $this
     */
    public function setPerson($person)
    {
        $this->container['person'] = $person;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


