<?php
/**
 * EcedoERPCRMInterfaceReportModelConnectionDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceReportModelConnectionDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceReportModelConnectionDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.ReportModel.ConnectionDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'connection_bill_as_single' => 'bool',
        'connection_contract_sales_reference' => 'string',
        'connection_is_residential' => 'bool',
        'connection_is_grid_loss' => 'bool',
        'connection_profile' => 'string',
        'connection_capacity_physic' => 'string',
        'connection_contract_power_type' => 'string',
        'connection_is_charging_station' => 'bool',
        'connection_contract_proposition_has_termination_fee' => 'bool',
        'connection_id' => 'string',
        'organization_id' => 'string',
        'connection_type' => 'string',
        'connection_ean' => 'string',
        'connection_grid_operator' => 'string',
        'connection_region' => 'string',
        'connection_switch_type' => 'string',
        'connection_description' => 'string',
        'connection_comment' => 'string',
        'connection_is_electricity' => 'bool',
        'connection_is_gas' => 'bool',
        'connection_is_small_consumer' => 'bool',
        'connection_is_large_consumer' => 'bool',
        'connection_has_single_usage' => 'bool',
        'connection_has_double_usage' => 'bool',
        'connection_has_evening_usage' => 'bool',
        'connection_address_address_line1' => 'string',
        'connection_address_address_line2' => 'string',
        'connection_address_full_address' => 'string',
        'connection_address_zip_code' => 'string',
        'connection_address_city' => 'string',
        'connection_address_country_code' => 'string',
        'connection_contract_agreement_date' => '\DateTime',
        'connection_contract_start_date' => '\DateTime',
        'connection_contract_end_date' => '\DateTime',
        'connection_contract_proposition_description' => 'string',
        'connection_contract_proposition_duration' => 'string',
        'connection_contract_proposition_reference' => 'string',
        'connection_contract_proposition_is_model_contract' => 'bool',
        'connection_contract_proposition_pricing_type' => 'string',
        'connection_contract_proposition_is_market_price_proposition' => 'bool',
        'connection_meelift_contract_proposition_description' => 'string',
        'connection_switch_period_start_date' => '\DateTime',
        'connection_switch_period_end_date' => '\DateTime',
        'connection_meter_is_smart' => 'bool',
        'connection_meter_number' => 'string',
        'connection_cluster_id' => 'string',
        'connection_cluster_reference' => 'string',
        'connection_cluster_comment' => 'string',
        'connection_fiscal_grid_operator' => 'string',
        'connection_treat_as_consumer' => 'bool',
        'connection_meter_administrative_status' => 'string',
        'connection_contract_duration_months' => 'int',
        'connection_is_combi' => 'bool',
        'connection_annual_standard_usage_single_usage_ldn' => 'int',
        'connection_annual_standard_usage_single_usage_odn' => 'int',
        'connection_annual_standard_usage_peak_usage_ldn' => 'int',
        'connection_annual_standard_usage_peak_usage_odn' => 'int',
        'connection_annual_standard_usage_off_peak_usage_ldn' => 'int',
        'connection_annual_standard_usage_off_peak_usage_odn' => 'int',
        'connection_annual_standard_usage_gas_usage' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'connection_bill_as_single' => null,
        'connection_contract_sales_reference' => null,
        'connection_is_residential' => null,
        'connection_is_grid_loss' => null,
        'connection_profile' => null,
        'connection_capacity_physic' => null,
        'connection_contract_power_type' => null,
        'connection_is_charging_station' => null,
        'connection_contract_proposition_has_termination_fee' => null,
        'connection_id' => null,
        'organization_id' => null,
        'connection_type' => null,
        'connection_ean' => null,
        'connection_grid_operator' => null,
        'connection_region' => null,
        'connection_switch_type' => null,
        'connection_description' => null,
        'connection_comment' => null,
        'connection_is_electricity' => null,
        'connection_is_gas' => null,
        'connection_is_small_consumer' => null,
        'connection_is_large_consumer' => null,
        'connection_has_single_usage' => null,
        'connection_has_double_usage' => null,
        'connection_has_evening_usage' => null,
        'connection_address_address_line1' => null,
        'connection_address_address_line2' => null,
        'connection_address_full_address' => null,
        'connection_address_zip_code' => null,
        'connection_address_city' => null,
        'connection_address_country_code' => null,
        'connection_contract_agreement_date' => 'date',
        'connection_contract_start_date' => 'date',
        'connection_contract_end_date' => 'date',
        'connection_contract_proposition_description' => null,
        'connection_contract_proposition_duration' => null,
        'connection_contract_proposition_reference' => null,
        'connection_contract_proposition_is_model_contract' => null,
        'connection_contract_proposition_pricing_type' => null,
        'connection_contract_proposition_is_market_price_proposition' => null,
        'connection_meelift_contract_proposition_description' => null,
        'connection_switch_period_start_date' => 'date',
        'connection_switch_period_end_date' => 'date',
        'connection_meter_is_smart' => null,
        'connection_meter_number' => null,
        'connection_cluster_id' => 'uuid',
        'connection_cluster_reference' => null,
        'connection_cluster_comment' => null,
        'connection_fiscal_grid_operator' => null,
        'connection_treat_as_consumer' => null,
        'connection_meter_administrative_status' => null,
        'connection_contract_duration_months' => 'int32',
        'connection_is_combi' => null,
        'connection_annual_standard_usage_single_usage_ldn' => 'int32',
        'connection_annual_standard_usage_single_usage_odn' => 'int32',
        'connection_annual_standard_usage_peak_usage_ldn' => 'int32',
        'connection_annual_standard_usage_peak_usage_odn' => 'int32',
        'connection_annual_standard_usage_off_peak_usage_ldn' => 'int32',
        'connection_annual_standard_usage_off_peak_usage_odn' => 'int32',
        'connection_annual_standard_usage_gas_usage' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'connection_bill_as_single' => 'Connection_BillAsSingle',
        'connection_contract_sales_reference' => 'Connection_Contract_SalesReference',
        'connection_is_residential' => 'Connection_IsResidential',
        'connection_is_grid_loss' => 'Connection_IsGridLoss',
        'connection_profile' => 'Connection_Profile',
        'connection_capacity_physic' => 'Connection_CapacityPhysic',
        'connection_contract_power_type' => 'Connection_Contract_PowerType',
        'connection_is_charging_station' => 'Connection_IsChargingStation',
        'connection_contract_proposition_has_termination_fee' => 'Connection_Contract_Proposition_HasTerminationFee',
        'connection_id' => 'Connection_Id',
        'organization_id' => 'Organization_Id',
        'connection_type' => 'Connection_Type',
        'connection_ean' => 'Connection_EAN',
        'connection_grid_operator' => 'Connection_GridOperator',
        'connection_region' => 'Connection_Region',
        'connection_switch_type' => 'Connection_SwitchType',
        'connection_description' => 'Connection_Description',
        'connection_comment' => 'Connection_Comment',
        'connection_is_electricity' => 'Connection_IsElectricity',
        'connection_is_gas' => 'Connection_IsGas',
        'connection_is_small_consumer' => 'Connection_IsSmallConsumer',
        'connection_is_large_consumer' => 'Connection_IsLargeConsumer',
        'connection_has_single_usage' => 'Connection_HasSingleUsage',
        'connection_has_double_usage' => 'Connection_HasDoubleUsage',
        'connection_has_evening_usage' => 'Connection_HasEveningUsage',
        'connection_address_address_line1' => 'Connection_Address_AddressLine1',
        'connection_address_address_line2' => 'Connection_Address_AddressLine2',
        'connection_address_full_address' => 'Connection_Address_FullAddress',
        'connection_address_zip_code' => 'Connection_Address_ZipCode',
        'connection_address_city' => 'Connection_Address_City',
        'connection_address_country_code' => 'Connection_Address_CountryCode',
        'connection_contract_agreement_date' => 'Connection_Contract_AgreementDate',
        'connection_contract_start_date' => 'Connection_Contract_StartDate',
        'connection_contract_end_date' => 'Connection_Contract_EndDate',
        'connection_contract_proposition_description' => 'Connection_Contract_Proposition_Description',
        'connection_contract_proposition_duration' => 'Connection_Contract_Proposition_Duration',
        'connection_contract_proposition_reference' => 'Connection_Contract_Proposition_Reference',
        'connection_contract_proposition_is_model_contract' => 'Connection_Contract_Proposition_IsModelContract',
        'connection_contract_proposition_pricing_type' => 'Connection_Contract_Proposition_PricingType',
        'connection_contract_proposition_is_market_price_proposition' => 'Connection_Contract_Proposition_IsMarketPriceProposition',
        'connection_meelift_contract_proposition_description' => 'Connection_MeeliftContract_Proposition_Description',
        'connection_switch_period_start_date' => 'Connection_SwitchPeriod_StartDate',
        'connection_switch_period_end_date' => 'Connection_SwitchPeriod_EndDate',
        'connection_meter_is_smart' => 'Connection_Meter_IsSmart',
        'connection_meter_number' => 'Connection_Meter_Number',
        'connection_cluster_id' => 'Connection_Cluster_Id',
        'connection_cluster_reference' => 'Connection_Cluster_Reference',
        'connection_cluster_comment' => 'Connection_Cluster_Comment',
        'connection_fiscal_grid_operator' => 'Connection_FiscalGridOperator',
        'connection_treat_as_consumer' => 'Connection_TreatAsConsumer',
        'connection_meter_administrative_status' => 'Connection_Meter_AdministrativeStatus',
        'connection_contract_duration_months' => 'Connection_Contract_Duration_Months',
        'connection_is_combi' => 'Connection_IsCombi',
        'connection_annual_standard_usage_single_usage_ldn' => 'Connection_AnnualStandardUsage_SingleUsageLDN',
        'connection_annual_standard_usage_single_usage_odn' => 'Connection_AnnualStandardUsage_SingleUsageODN',
        'connection_annual_standard_usage_peak_usage_ldn' => 'Connection_AnnualStandardUsage_PeakUsageLDN',
        'connection_annual_standard_usage_peak_usage_odn' => 'Connection_AnnualStandardUsage_PeakUsageODN',
        'connection_annual_standard_usage_off_peak_usage_ldn' => 'Connection_AnnualStandardUsage_OffPeakUsageLDN',
        'connection_annual_standard_usage_off_peak_usage_odn' => 'Connection_AnnualStandardUsage_OffPeakUsageODN',
        'connection_annual_standard_usage_gas_usage' => 'Connection_AnnualStandardUsage_GasUsage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'connection_bill_as_single' => 'setConnectionBillAsSingle',
        'connection_contract_sales_reference' => 'setConnectionContractSalesReference',
        'connection_is_residential' => 'setConnectionIsResidential',
        'connection_is_grid_loss' => 'setConnectionIsGridLoss',
        'connection_profile' => 'setConnectionProfile',
        'connection_capacity_physic' => 'setConnectionCapacityPhysic',
        'connection_contract_power_type' => 'setConnectionContractPowerType',
        'connection_is_charging_station' => 'setConnectionIsChargingStation',
        'connection_contract_proposition_has_termination_fee' => 'setConnectionContractPropositionHasTerminationFee',
        'connection_id' => 'setConnectionId',
        'organization_id' => 'setOrganizationId',
        'connection_type' => 'setConnectionType',
        'connection_ean' => 'setConnectionEan',
        'connection_grid_operator' => 'setConnectionGridOperator',
        'connection_region' => 'setConnectionRegion',
        'connection_switch_type' => 'setConnectionSwitchType',
        'connection_description' => 'setConnectionDescription',
        'connection_comment' => 'setConnectionComment',
        'connection_is_electricity' => 'setConnectionIsElectricity',
        'connection_is_gas' => 'setConnectionIsGas',
        'connection_is_small_consumer' => 'setConnectionIsSmallConsumer',
        'connection_is_large_consumer' => 'setConnectionIsLargeConsumer',
        'connection_has_single_usage' => 'setConnectionHasSingleUsage',
        'connection_has_double_usage' => 'setConnectionHasDoubleUsage',
        'connection_has_evening_usage' => 'setConnectionHasEveningUsage',
        'connection_address_address_line1' => 'setConnectionAddressAddressLine1',
        'connection_address_address_line2' => 'setConnectionAddressAddressLine2',
        'connection_address_full_address' => 'setConnectionAddressFullAddress',
        'connection_address_zip_code' => 'setConnectionAddressZipCode',
        'connection_address_city' => 'setConnectionAddressCity',
        'connection_address_country_code' => 'setConnectionAddressCountryCode',
        'connection_contract_agreement_date' => 'setConnectionContractAgreementDate',
        'connection_contract_start_date' => 'setConnectionContractStartDate',
        'connection_contract_end_date' => 'setConnectionContractEndDate',
        'connection_contract_proposition_description' => 'setConnectionContractPropositionDescription',
        'connection_contract_proposition_duration' => 'setConnectionContractPropositionDuration',
        'connection_contract_proposition_reference' => 'setConnectionContractPropositionReference',
        'connection_contract_proposition_is_model_contract' => 'setConnectionContractPropositionIsModelContract',
        'connection_contract_proposition_pricing_type' => 'setConnectionContractPropositionPricingType',
        'connection_contract_proposition_is_market_price_proposition' => 'setConnectionContractPropositionIsMarketPriceProposition',
        'connection_meelift_contract_proposition_description' => 'setConnectionMeeliftContractPropositionDescription',
        'connection_switch_period_start_date' => 'setConnectionSwitchPeriodStartDate',
        'connection_switch_period_end_date' => 'setConnectionSwitchPeriodEndDate',
        'connection_meter_is_smart' => 'setConnectionMeterIsSmart',
        'connection_meter_number' => 'setConnectionMeterNumber',
        'connection_cluster_id' => 'setConnectionClusterId',
        'connection_cluster_reference' => 'setConnectionClusterReference',
        'connection_cluster_comment' => 'setConnectionClusterComment',
        'connection_fiscal_grid_operator' => 'setConnectionFiscalGridOperator',
        'connection_treat_as_consumer' => 'setConnectionTreatAsConsumer',
        'connection_meter_administrative_status' => 'setConnectionMeterAdministrativeStatus',
        'connection_contract_duration_months' => 'setConnectionContractDurationMonths',
        'connection_is_combi' => 'setConnectionIsCombi',
        'connection_annual_standard_usage_single_usage_ldn' => 'setConnectionAnnualStandardUsageSingleUsageLdn',
        'connection_annual_standard_usage_single_usage_odn' => 'setConnectionAnnualStandardUsageSingleUsageOdn',
        'connection_annual_standard_usage_peak_usage_ldn' => 'setConnectionAnnualStandardUsagePeakUsageLdn',
        'connection_annual_standard_usage_peak_usage_odn' => 'setConnectionAnnualStandardUsagePeakUsageOdn',
        'connection_annual_standard_usage_off_peak_usage_ldn' => 'setConnectionAnnualStandardUsageOffPeakUsageLdn',
        'connection_annual_standard_usage_off_peak_usage_odn' => 'setConnectionAnnualStandardUsageOffPeakUsageOdn',
        'connection_annual_standard_usage_gas_usage' => 'setConnectionAnnualStandardUsageGasUsage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'connection_bill_as_single' => 'getConnectionBillAsSingle',
        'connection_contract_sales_reference' => 'getConnectionContractSalesReference',
        'connection_is_residential' => 'getConnectionIsResidential',
        'connection_is_grid_loss' => 'getConnectionIsGridLoss',
        'connection_profile' => 'getConnectionProfile',
        'connection_capacity_physic' => 'getConnectionCapacityPhysic',
        'connection_contract_power_type' => 'getConnectionContractPowerType',
        'connection_is_charging_station' => 'getConnectionIsChargingStation',
        'connection_contract_proposition_has_termination_fee' => 'getConnectionContractPropositionHasTerminationFee',
        'connection_id' => 'getConnectionId',
        'organization_id' => 'getOrganizationId',
        'connection_type' => 'getConnectionType',
        'connection_ean' => 'getConnectionEan',
        'connection_grid_operator' => 'getConnectionGridOperator',
        'connection_region' => 'getConnectionRegion',
        'connection_switch_type' => 'getConnectionSwitchType',
        'connection_description' => 'getConnectionDescription',
        'connection_comment' => 'getConnectionComment',
        'connection_is_electricity' => 'getConnectionIsElectricity',
        'connection_is_gas' => 'getConnectionIsGas',
        'connection_is_small_consumer' => 'getConnectionIsSmallConsumer',
        'connection_is_large_consumer' => 'getConnectionIsLargeConsumer',
        'connection_has_single_usage' => 'getConnectionHasSingleUsage',
        'connection_has_double_usage' => 'getConnectionHasDoubleUsage',
        'connection_has_evening_usage' => 'getConnectionHasEveningUsage',
        'connection_address_address_line1' => 'getConnectionAddressAddressLine1',
        'connection_address_address_line2' => 'getConnectionAddressAddressLine2',
        'connection_address_full_address' => 'getConnectionAddressFullAddress',
        'connection_address_zip_code' => 'getConnectionAddressZipCode',
        'connection_address_city' => 'getConnectionAddressCity',
        'connection_address_country_code' => 'getConnectionAddressCountryCode',
        'connection_contract_agreement_date' => 'getConnectionContractAgreementDate',
        'connection_contract_start_date' => 'getConnectionContractStartDate',
        'connection_contract_end_date' => 'getConnectionContractEndDate',
        'connection_contract_proposition_description' => 'getConnectionContractPropositionDescription',
        'connection_contract_proposition_duration' => 'getConnectionContractPropositionDuration',
        'connection_contract_proposition_reference' => 'getConnectionContractPropositionReference',
        'connection_contract_proposition_is_model_contract' => 'getConnectionContractPropositionIsModelContract',
        'connection_contract_proposition_pricing_type' => 'getConnectionContractPropositionPricingType',
        'connection_contract_proposition_is_market_price_proposition' => 'getConnectionContractPropositionIsMarketPriceProposition',
        'connection_meelift_contract_proposition_description' => 'getConnectionMeeliftContractPropositionDescription',
        'connection_switch_period_start_date' => 'getConnectionSwitchPeriodStartDate',
        'connection_switch_period_end_date' => 'getConnectionSwitchPeriodEndDate',
        'connection_meter_is_smart' => 'getConnectionMeterIsSmart',
        'connection_meter_number' => 'getConnectionMeterNumber',
        'connection_cluster_id' => 'getConnectionClusterId',
        'connection_cluster_reference' => 'getConnectionClusterReference',
        'connection_cluster_comment' => 'getConnectionClusterComment',
        'connection_fiscal_grid_operator' => 'getConnectionFiscalGridOperator',
        'connection_treat_as_consumer' => 'getConnectionTreatAsConsumer',
        'connection_meter_administrative_status' => 'getConnectionMeterAdministrativeStatus',
        'connection_contract_duration_months' => 'getConnectionContractDurationMonths',
        'connection_is_combi' => 'getConnectionIsCombi',
        'connection_annual_standard_usage_single_usage_ldn' => 'getConnectionAnnualStandardUsageSingleUsageLdn',
        'connection_annual_standard_usage_single_usage_odn' => 'getConnectionAnnualStandardUsageSingleUsageOdn',
        'connection_annual_standard_usage_peak_usage_ldn' => 'getConnectionAnnualStandardUsagePeakUsageLdn',
        'connection_annual_standard_usage_peak_usage_odn' => 'getConnectionAnnualStandardUsagePeakUsageOdn',
        'connection_annual_standard_usage_off_peak_usage_ldn' => 'getConnectionAnnualStandardUsageOffPeakUsageLdn',
        'connection_annual_standard_usage_off_peak_usage_odn' => 'getConnectionAnnualStandardUsageOffPeakUsageOdn',
        'connection_annual_standard_usage_gas_usage' => 'getConnectionAnnualStandardUsageGasUsage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['connection_bill_as_single'] = isset($data['connection_bill_as_single']) ? $data['connection_bill_as_single'] : null;
        $this->container['connection_contract_sales_reference'] = isset($data['connection_contract_sales_reference']) ? $data['connection_contract_sales_reference'] : null;
        $this->container['connection_is_residential'] = isset($data['connection_is_residential']) ? $data['connection_is_residential'] : null;
        $this->container['connection_is_grid_loss'] = isset($data['connection_is_grid_loss']) ? $data['connection_is_grid_loss'] : null;
        $this->container['connection_profile'] = isset($data['connection_profile']) ? $data['connection_profile'] : null;
        $this->container['connection_capacity_physic'] = isset($data['connection_capacity_physic']) ? $data['connection_capacity_physic'] : null;
        $this->container['connection_contract_power_type'] = isset($data['connection_contract_power_type']) ? $data['connection_contract_power_type'] : null;
        $this->container['connection_is_charging_station'] = isset($data['connection_is_charging_station']) ? $data['connection_is_charging_station'] : null;
        $this->container['connection_contract_proposition_has_termination_fee'] = isset($data['connection_contract_proposition_has_termination_fee']) ? $data['connection_contract_proposition_has_termination_fee'] : null;
        $this->container['connection_id'] = isset($data['connection_id']) ? $data['connection_id'] : null;
        $this->container['organization_id'] = isset($data['organization_id']) ? $data['organization_id'] : null;
        $this->container['connection_type'] = isset($data['connection_type']) ? $data['connection_type'] : null;
        $this->container['connection_ean'] = isset($data['connection_ean']) ? $data['connection_ean'] : null;
        $this->container['connection_grid_operator'] = isset($data['connection_grid_operator']) ? $data['connection_grid_operator'] : null;
        $this->container['connection_region'] = isset($data['connection_region']) ? $data['connection_region'] : null;
        $this->container['connection_switch_type'] = isset($data['connection_switch_type']) ? $data['connection_switch_type'] : null;
        $this->container['connection_description'] = isset($data['connection_description']) ? $data['connection_description'] : null;
        $this->container['connection_comment'] = isset($data['connection_comment']) ? $data['connection_comment'] : null;
        $this->container['connection_is_electricity'] = isset($data['connection_is_electricity']) ? $data['connection_is_electricity'] : null;
        $this->container['connection_is_gas'] = isset($data['connection_is_gas']) ? $data['connection_is_gas'] : null;
        $this->container['connection_is_small_consumer'] = isset($data['connection_is_small_consumer']) ? $data['connection_is_small_consumer'] : null;
        $this->container['connection_is_large_consumer'] = isset($data['connection_is_large_consumer']) ? $data['connection_is_large_consumer'] : null;
        $this->container['connection_has_single_usage'] = isset($data['connection_has_single_usage']) ? $data['connection_has_single_usage'] : null;
        $this->container['connection_has_double_usage'] = isset($data['connection_has_double_usage']) ? $data['connection_has_double_usage'] : null;
        $this->container['connection_has_evening_usage'] = isset($data['connection_has_evening_usage']) ? $data['connection_has_evening_usage'] : null;
        $this->container['connection_address_address_line1'] = isset($data['connection_address_address_line1']) ? $data['connection_address_address_line1'] : null;
        $this->container['connection_address_address_line2'] = isset($data['connection_address_address_line2']) ? $data['connection_address_address_line2'] : null;
        $this->container['connection_address_full_address'] = isset($data['connection_address_full_address']) ? $data['connection_address_full_address'] : null;
        $this->container['connection_address_zip_code'] = isset($data['connection_address_zip_code']) ? $data['connection_address_zip_code'] : null;
        $this->container['connection_address_city'] = isset($data['connection_address_city']) ? $data['connection_address_city'] : null;
        $this->container['connection_address_country_code'] = isset($data['connection_address_country_code']) ? $data['connection_address_country_code'] : null;
        $this->container['connection_contract_agreement_date'] = isset($data['connection_contract_agreement_date']) ? $data['connection_contract_agreement_date'] : null;
        $this->container['connection_contract_start_date'] = isset($data['connection_contract_start_date']) ? $data['connection_contract_start_date'] : null;
        $this->container['connection_contract_end_date'] = isset($data['connection_contract_end_date']) ? $data['connection_contract_end_date'] : null;
        $this->container['connection_contract_proposition_description'] = isset($data['connection_contract_proposition_description']) ? $data['connection_contract_proposition_description'] : null;
        $this->container['connection_contract_proposition_duration'] = isset($data['connection_contract_proposition_duration']) ? $data['connection_contract_proposition_duration'] : null;
        $this->container['connection_contract_proposition_reference'] = isset($data['connection_contract_proposition_reference']) ? $data['connection_contract_proposition_reference'] : null;
        $this->container['connection_contract_proposition_is_model_contract'] = isset($data['connection_contract_proposition_is_model_contract']) ? $data['connection_contract_proposition_is_model_contract'] : null;
        $this->container['connection_contract_proposition_pricing_type'] = isset($data['connection_contract_proposition_pricing_type']) ? $data['connection_contract_proposition_pricing_type'] : null;
        $this->container['connection_contract_proposition_is_market_price_proposition'] = isset($data['connection_contract_proposition_is_market_price_proposition']) ? $data['connection_contract_proposition_is_market_price_proposition'] : null;
        $this->container['connection_meelift_contract_proposition_description'] = isset($data['connection_meelift_contract_proposition_description']) ? $data['connection_meelift_contract_proposition_description'] : null;
        $this->container['connection_switch_period_start_date'] = isset($data['connection_switch_period_start_date']) ? $data['connection_switch_period_start_date'] : null;
        $this->container['connection_switch_period_end_date'] = isset($data['connection_switch_period_end_date']) ? $data['connection_switch_period_end_date'] : null;
        $this->container['connection_meter_is_smart'] = isset($data['connection_meter_is_smart']) ? $data['connection_meter_is_smart'] : null;
        $this->container['connection_meter_number'] = isset($data['connection_meter_number']) ? $data['connection_meter_number'] : null;
        $this->container['connection_cluster_id'] = isset($data['connection_cluster_id']) ? $data['connection_cluster_id'] : null;
        $this->container['connection_cluster_reference'] = isset($data['connection_cluster_reference']) ? $data['connection_cluster_reference'] : null;
        $this->container['connection_cluster_comment'] = isset($data['connection_cluster_comment']) ? $data['connection_cluster_comment'] : null;
        $this->container['connection_fiscal_grid_operator'] = isset($data['connection_fiscal_grid_operator']) ? $data['connection_fiscal_grid_operator'] : null;
        $this->container['connection_treat_as_consumer'] = isset($data['connection_treat_as_consumer']) ? $data['connection_treat_as_consumer'] : null;
        $this->container['connection_meter_administrative_status'] = isset($data['connection_meter_administrative_status']) ? $data['connection_meter_administrative_status'] : null;
        $this->container['connection_contract_duration_months'] = isset($data['connection_contract_duration_months']) ? $data['connection_contract_duration_months'] : null;
        $this->container['connection_is_combi'] = isset($data['connection_is_combi']) ? $data['connection_is_combi'] : null;
        $this->container['connection_annual_standard_usage_single_usage_ldn'] = isset($data['connection_annual_standard_usage_single_usage_ldn']) ? $data['connection_annual_standard_usage_single_usage_ldn'] : null;
        $this->container['connection_annual_standard_usage_single_usage_odn'] = isset($data['connection_annual_standard_usage_single_usage_odn']) ? $data['connection_annual_standard_usage_single_usage_odn'] : null;
        $this->container['connection_annual_standard_usage_peak_usage_ldn'] = isset($data['connection_annual_standard_usage_peak_usage_ldn']) ? $data['connection_annual_standard_usage_peak_usage_ldn'] : null;
        $this->container['connection_annual_standard_usage_peak_usage_odn'] = isset($data['connection_annual_standard_usage_peak_usage_odn']) ? $data['connection_annual_standard_usage_peak_usage_odn'] : null;
        $this->container['connection_annual_standard_usage_off_peak_usage_ldn'] = isset($data['connection_annual_standard_usage_off_peak_usage_ldn']) ? $data['connection_annual_standard_usage_off_peak_usage_ldn'] : null;
        $this->container['connection_annual_standard_usage_off_peak_usage_odn'] = isset($data['connection_annual_standard_usage_off_peak_usage_odn']) ? $data['connection_annual_standard_usage_off_peak_usage_odn'] : null;
        $this->container['connection_annual_standard_usage_gas_usage'] = isset($data['connection_annual_standard_usage_gas_usage']) ? $data['connection_annual_standard_usage_gas_usage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets connection_bill_as_single
     *
     * @return bool
     */
    public function getConnectionBillAsSingle()
    {
        return $this->container['connection_bill_as_single'];
    }

    /**
     * Sets connection_bill_as_single
     *
     * @param bool $connection_bill_as_single connection_bill_as_single
     *
     * @return $this
     */
    public function setConnectionBillAsSingle($connection_bill_as_single)
    {
        $this->container['connection_bill_as_single'] = $connection_bill_as_single;

        return $this;
    }

    /**
     * Gets connection_contract_sales_reference
     *
     * @return string
     */
    public function getConnectionContractSalesReference()
    {
        return $this->container['connection_contract_sales_reference'];
    }

    /**
     * Sets connection_contract_sales_reference
     *
     * @param string $connection_contract_sales_reference connection_contract_sales_reference
     *
     * @return $this
     */
    public function setConnectionContractSalesReference($connection_contract_sales_reference)
    {
        $this->container['connection_contract_sales_reference'] = $connection_contract_sales_reference;

        return $this;
    }

    /**
     * Gets connection_is_residential
     *
     * @return bool
     */
    public function getConnectionIsResidential()
    {
        return $this->container['connection_is_residential'];
    }

    /**
     * Sets connection_is_residential
     *
     * @param bool $connection_is_residential connection_is_residential
     *
     * @return $this
     */
    public function setConnectionIsResidential($connection_is_residential)
    {
        $this->container['connection_is_residential'] = $connection_is_residential;

        return $this;
    }

    /**
     * Gets connection_is_grid_loss
     *
     * @return bool
     */
    public function getConnectionIsGridLoss()
    {
        return $this->container['connection_is_grid_loss'];
    }

    /**
     * Sets connection_is_grid_loss
     *
     * @param bool $connection_is_grid_loss connection_is_grid_loss
     *
     * @return $this
     */
    public function setConnectionIsGridLoss($connection_is_grid_loss)
    {
        $this->container['connection_is_grid_loss'] = $connection_is_grid_loss;

        return $this;
    }

    /**
     * Gets connection_profile
     *
     * @return string
     */
    public function getConnectionProfile()
    {
        return $this->container['connection_profile'];
    }

    /**
     * Sets connection_profile
     *
     * @param string $connection_profile connection_profile
     *
     * @return $this
     */
    public function setConnectionProfile($connection_profile)
    {
        $this->container['connection_profile'] = $connection_profile;

        return $this;
    }

    /**
     * Gets connection_capacity_physic
     *
     * @return string
     */
    public function getConnectionCapacityPhysic()
    {
        return $this->container['connection_capacity_physic'];
    }

    /**
     * Sets connection_capacity_physic
     *
     * @param string $connection_capacity_physic connection_capacity_physic
     *
     * @return $this
     */
    public function setConnectionCapacityPhysic($connection_capacity_physic)
    {
        $this->container['connection_capacity_physic'] = $connection_capacity_physic;

        return $this;
    }

    /**
     * Gets connection_contract_power_type
     *
     * @return string
     */
    public function getConnectionContractPowerType()
    {
        return $this->container['connection_contract_power_type'];
    }

    /**
     * Sets connection_contract_power_type
     *
     * @param string $connection_contract_power_type connection_contract_power_type
     *
     * @return $this
     */
    public function setConnectionContractPowerType($connection_contract_power_type)
    {
        $this->container['connection_contract_power_type'] = $connection_contract_power_type;

        return $this;
    }

    /**
     * Gets connection_is_charging_station
     *
     * @return bool
     */
    public function getConnectionIsChargingStation()
    {
        return $this->container['connection_is_charging_station'];
    }

    /**
     * Sets connection_is_charging_station
     *
     * @param bool $connection_is_charging_station connection_is_charging_station
     *
     * @return $this
     */
    public function setConnectionIsChargingStation($connection_is_charging_station)
    {
        $this->container['connection_is_charging_station'] = $connection_is_charging_station;

        return $this;
    }

    /**
     * Gets connection_contract_proposition_has_termination_fee
     *
     * @return bool
     */
    public function getConnectionContractPropositionHasTerminationFee()
    {
        return $this->container['connection_contract_proposition_has_termination_fee'];
    }

    /**
     * Sets connection_contract_proposition_has_termination_fee
     *
     * @param bool $connection_contract_proposition_has_termination_fee connection_contract_proposition_has_termination_fee
     *
     * @return $this
     */
    public function setConnectionContractPropositionHasTerminationFee($connection_contract_proposition_has_termination_fee)
    {
        $this->container['connection_contract_proposition_has_termination_fee'] = $connection_contract_proposition_has_termination_fee;

        return $this;
    }

    /**
     * Gets connection_id
     *
     * @return string
     */
    public function getConnectionId()
    {
        return $this->container['connection_id'];
    }

    /**
     * Sets connection_id
     *
     * @param string $connection_id connection_id
     *
     * @return $this
     */
    public function setConnectionId($connection_id)
    {
        $this->container['connection_id'] = $connection_id;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return string
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param string $organization_id organization_id
     *
     * @return $this
     */
    public function setOrganizationId($organization_id)
    {
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets connection_type
     *
     * @return string
     */
    public function getConnectionType()
    {
        return $this->container['connection_type'];
    }

    /**
     * Sets connection_type
     *
     * @param string $connection_type connection_type
     *
     * @return $this
     */
    public function setConnectionType($connection_type)
    {
        $this->container['connection_type'] = $connection_type;

        return $this;
    }

    /**
     * Gets connection_ean
     *
     * @return string
     */
    public function getConnectionEan()
    {
        return $this->container['connection_ean'];
    }

    /**
     * Sets connection_ean
     *
     * @param string $connection_ean connection_ean
     *
     * @return $this
     */
    public function setConnectionEan($connection_ean)
    {
        $this->container['connection_ean'] = $connection_ean;

        return $this;
    }

    /**
     * Gets connection_grid_operator
     *
     * @return string
     */
    public function getConnectionGridOperator()
    {
        return $this->container['connection_grid_operator'];
    }

    /**
     * Sets connection_grid_operator
     *
     * @param string $connection_grid_operator connection_grid_operator
     *
     * @return $this
     */
    public function setConnectionGridOperator($connection_grid_operator)
    {
        $this->container['connection_grid_operator'] = $connection_grid_operator;

        return $this;
    }

    /**
     * Gets connection_region
     *
     * @return string
     */
    public function getConnectionRegion()
    {
        return $this->container['connection_region'];
    }

    /**
     * Sets connection_region
     *
     * @param string $connection_region connection_region
     *
     * @return $this
     */
    public function setConnectionRegion($connection_region)
    {
        $this->container['connection_region'] = $connection_region;

        return $this;
    }

    /**
     * Gets connection_switch_type
     *
     * @return string
     */
    public function getConnectionSwitchType()
    {
        return $this->container['connection_switch_type'];
    }

    /**
     * Sets connection_switch_type
     *
     * @param string $connection_switch_type connection_switch_type
     *
     * @return $this
     */
    public function setConnectionSwitchType($connection_switch_type)
    {
        $this->container['connection_switch_type'] = $connection_switch_type;

        return $this;
    }

    /**
     * Gets connection_description
     *
     * @return string
     */
    public function getConnectionDescription()
    {
        return $this->container['connection_description'];
    }

    /**
     * Sets connection_description
     *
     * @param string $connection_description connection_description
     *
     * @return $this
     */
    public function setConnectionDescription($connection_description)
    {
        $this->container['connection_description'] = $connection_description;

        return $this;
    }

    /**
     * Gets connection_comment
     *
     * @return string
     */
    public function getConnectionComment()
    {
        return $this->container['connection_comment'];
    }

    /**
     * Sets connection_comment
     *
     * @param string $connection_comment connection_comment
     *
     * @return $this
     */
    public function setConnectionComment($connection_comment)
    {
        $this->container['connection_comment'] = $connection_comment;

        return $this;
    }

    /**
     * Gets connection_is_electricity
     *
     * @return bool
     */
    public function getConnectionIsElectricity()
    {
        return $this->container['connection_is_electricity'];
    }

    /**
     * Sets connection_is_electricity
     *
     * @param bool $connection_is_electricity connection_is_electricity
     *
     * @return $this
     */
    public function setConnectionIsElectricity($connection_is_electricity)
    {
        $this->container['connection_is_electricity'] = $connection_is_electricity;

        return $this;
    }

    /**
     * Gets connection_is_gas
     *
     * @return bool
     */
    public function getConnectionIsGas()
    {
        return $this->container['connection_is_gas'];
    }

    /**
     * Sets connection_is_gas
     *
     * @param bool $connection_is_gas connection_is_gas
     *
     * @return $this
     */
    public function setConnectionIsGas($connection_is_gas)
    {
        $this->container['connection_is_gas'] = $connection_is_gas;

        return $this;
    }

    /**
     * Gets connection_is_small_consumer
     *
     * @return bool
     */
    public function getConnectionIsSmallConsumer()
    {
        return $this->container['connection_is_small_consumer'];
    }

    /**
     * Sets connection_is_small_consumer
     *
     * @param bool $connection_is_small_consumer connection_is_small_consumer
     *
     * @return $this
     */
    public function setConnectionIsSmallConsumer($connection_is_small_consumer)
    {
        $this->container['connection_is_small_consumer'] = $connection_is_small_consumer;

        return $this;
    }

    /**
     * Gets connection_is_large_consumer
     *
     * @return bool
     */
    public function getConnectionIsLargeConsumer()
    {
        return $this->container['connection_is_large_consumer'];
    }

    /**
     * Sets connection_is_large_consumer
     *
     * @param bool $connection_is_large_consumer connection_is_large_consumer
     *
     * @return $this
     */
    public function setConnectionIsLargeConsumer($connection_is_large_consumer)
    {
        $this->container['connection_is_large_consumer'] = $connection_is_large_consumer;

        return $this;
    }

    /**
     * Gets connection_has_single_usage
     *
     * @return bool
     */
    public function getConnectionHasSingleUsage()
    {
        return $this->container['connection_has_single_usage'];
    }

    /**
     * Sets connection_has_single_usage
     *
     * @param bool $connection_has_single_usage connection_has_single_usage
     *
     * @return $this
     */
    public function setConnectionHasSingleUsage($connection_has_single_usage)
    {
        $this->container['connection_has_single_usage'] = $connection_has_single_usage;

        return $this;
    }

    /**
     * Gets connection_has_double_usage
     *
     * @return bool
     */
    public function getConnectionHasDoubleUsage()
    {
        return $this->container['connection_has_double_usage'];
    }

    /**
     * Sets connection_has_double_usage
     *
     * @param bool $connection_has_double_usage connection_has_double_usage
     *
     * @return $this
     */
    public function setConnectionHasDoubleUsage($connection_has_double_usage)
    {
        $this->container['connection_has_double_usage'] = $connection_has_double_usage;

        return $this;
    }

    /**
     * Gets connection_has_evening_usage
     *
     * @return bool
     */
    public function getConnectionHasEveningUsage()
    {
        return $this->container['connection_has_evening_usage'];
    }

    /**
     * Sets connection_has_evening_usage
     *
     * @param bool $connection_has_evening_usage connection_has_evening_usage
     *
     * @return $this
     */
    public function setConnectionHasEveningUsage($connection_has_evening_usage)
    {
        $this->container['connection_has_evening_usage'] = $connection_has_evening_usage;

        return $this;
    }

    /**
     * Gets connection_address_address_line1
     *
     * @return string
     */
    public function getConnectionAddressAddressLine1()
    {
        return $this->container['connection_address_address_line1'];
    }

    /**
     * Sets connection_address_address_line1
     *
     * @param string $connection_address_address_line1 connection_address_address_line1
     *
     * @return $this
     */
    public function setConnectionAddressAddressLine1($connection_address_address_line1)
    {
        $this->container['connection_address_address_line1'] = $connection_address_address_line1;

        return $this;
    }

    /**
     * Gets connection_address_address_line2
     *
     * @return string
     */
    public function getConnectionAddressAddressLine2()
    {
        return $this->container['connection_address_address_line2'];
    }

    /**
     * Sets connection_address_address_line2
     *
     * @param string $connection_address_address_line2 connection_address_address_line2
     *
     * @return $this
     */
    public function setConnectionAddressAddressLine2($connection_address_address_line2)
    {
        $this->container['connection_address_address_line2'] = $connection_address_address_line2;

        return $this;
    }

    /**
     * Gets connection_address_full_address
     *
     * @return string
     */
    public function getConnectionAddressFullAddress()
    {
        return $this->container['connection_address_full_address'];
    }

    /**
     * Sets connection_address_full_address
     *
     * @param string $connection_address_full_address connection_address_full_address
     *
     * @return $this
     */
    public function setConnectionAddressFullAddress($connection_address_full_address)
    {
        $this->container['connection_address_full_address'] = $connection_address_full_address;

        return $this;
    }

    /**
     * Gets connection_address_zip_code
     *
     * @return string
     */
    public function getConnectionAddressZipCode()
    {
        return $this->container['connection_address_zip_code'];
    }

    /**
     * Sets connection_address_zip_code
     *
     * @param string $connection_address_zip_code connection_address_zip_code
     *
     * @return $this
     */
    public function setConnectionAddressZipCode($connection_address_zip_code)
    {
        $this->container['connection_address_zip_code'] = $connection_address_zip_code;

        return $this;
    }

    /**
     * Gets connection_address_city
     *
     * @return string
     */
    public function getConnectionAddressCity()
    {
        return $this->container['connection_address_city'];
    }

    /**
     * Sets connection_address_city
     *
     * @param string $connection_address_city connection_address_city
     *
     * @return $this
     */
    public function setConnectionAddressCity($connection_address_city)
    {
        $this->container['connection_address_city'] = $connection_address_city;

        return $this;
    }

    /**
     * Gets connection_address_country_code
     *
     * @return string
     */
    public function getConnectionAddressCountryCode()
    {
        return $this->container['connection_address_country_code'];
    }

    /**
     * Sets connection_address_country_code
     *
     * @param string $connection_address_country_code connection_address_country_code
     *
     * @return $this
     */
    public function setConnectionAddressCountryCode($connection_address_country_code)
    {
        $this->container['connection_address_country_code'] = $connection_address_country_code;

        return $this;
    }

    /**
     * Gets connection_contract_agreement_date
     *
     * @return \DateTime
     */
    public function getConnectionContractAgreementDate()
    {
        return $this->container['connection_contract_agreement_date'];
    }

    /**
     * Sets connection_contract_agreement_date
     *
     * @param \DateTime $connection_contract_agreement_date connection_contract_agreement_date
     *
     * @return $this
     */
    public function setConnectionContractAgreementDate($connection_contract_agreement_date)
    {
        $this->container['connection_contract_agreement_date'] = $connection_contract_agreement_date;

        return $this;
    }

    /**
     * Gets connection_contract_start_date
     *
     * @return \DateTime
     */
    public function getConnectionContractStartDate()
    {
        return $this->container['connection_contract_start_date'];
    }

    /**
     * Sets connection_contract_start_date
     *
     * @param \DateTime $connection_contract_start_date connection_contract_start_date
     *
     * @return $this
     */
    public function setConnectionContractStartDate($connection_contract_start_date)
    {
        $this->container['connection_contract_start_date'] = $connection_contract_start_date;

        return $this;
    }

    /**
     * Gets connection_contract_end_date
     *
     * @return \DateTime
     */
    public function getConnectionContractEndDate()
    {
        return $this->container['connection_contract_end_date'];
    }

    /**
     * Sets connection_contract_end_date
     *
     * @param \DateTime $connection_contract_end_date connection_contract_end_date
     *
     * @return $this
     */
    public function setConnectionContractEndDate($connection_contract_end_date)
    {
        $this->container['connection_contract_end_date'] = $connection_contract_end_date;

        return $this;
    }

    /**
     * Gets connection_contract_proposition_description
     *
     * @return string
     */
    public function getConnectionContractPropositionDescription()
    {
        return $this->container['connection_contract_proposition_description'];
    }

    /**
     * Sets connection_contract_proposition_description
     *
     * @param string $connection_contract_proposition_description connection_contract_proposition_description
     *
     * @return $this
     */
    public function setConnectionContractPropositionDescription($connection_contract_proposition_description)
    {
        $this->container['connection_contract_proposition_description'] = $connection_contract_proposition_description;

        return $this;
    }

    /**
     * Gets connection_contract_proposition_duration
     *
     * @return string
     */
    public function getConnectionContractPropositionDuration()
    {
        return $this->container['connection_contract_proposition_duration'];
    }

    /**
     * Sets connection_contract_proposition_duration
     *
     * @param string $connection_contract_proposition_duration connection_contract_proposition_duration
     *
     * @return $this
     */
    public function setConnectionContractPropositionDuration($connection_contract_proposition_duration)
    {
        $this->container['connection_contract_proposition_duration'] = $connection_contract_proposition_duration;

        return $this;
    }

    /**
     * Gets connection_contract_proposition_reference
     *
     * @return string
     */
    public function getConnectionContractPropositionReference()
    {
        return $this->container['connection_contract_proposition_reference'];
    }

    /**
     * Sets connection_contract_proposition_reference
     *
     * @param string $connection_contract_proposition_reference connection_contract_proposition_reference
     *
     * @return $this
     */
    public function setConnectionContractPropositionReference($connection_contract_proposition_reference)
    {
        $this->container['connection_contract_proposition_reference'] = $connection_contract_proposition_reference;

        return $this;
    }

    /**
     * Gets connection_contract_proposition_is_model_contract
     *
     * @return bool
     */
    public function getConnectionContractPropositionIsModelContract()
    {
        return $this->container['connection_contract_proposition_is_model_contract'];
    }

    /**
     * Sets connection_contract_proposition_is_model_contract
     *
     * @param bool $connection_contract_proposition_is_model_contract connection_contract_proposition_is_model_contract
     *
     * @return $this
     */
    public function setConnectionContractPropositionIsModelContract($connection_contract_proposition_is_model_contract)
    {
        $this->container['connection_contract_proposition_is_model_contract'] = $connection_contract_proposition_is_model_contract;

        return $this;
    }

    /**
     * Gets connection_contract_proposition_pricing_type
     *
     * @return string
     */
    public function getConnectionContractPropositionPricingType()
    {
        return $this->container['connection_contract_proposition_pricing_type'];
    }

    /**
     * Sets connection_contract_proposition_pricing_type
     *
     * @param string $connection_contract_proposition_pricing_type connection_contract_proposition_pricing_type
     *
     * @return $this
     */
    public function setConnectionContractPropositionPricingType($connection_contract_proposition_pricing_type)
    {
        $this->container['connection_contract_proposition_pricing_type'] = $connection_contract_proposition_pricing_type;

        return $this;
    }

    /**
     * Gets connection_contract_proposition_is_market_price_proposition
     *
     * @return bool
     */
    public function getConnectionContractPropositionIsMarketPriceProposition()
    {
        return $this->container['connection_contract_proposition_is_market_price_proposition'];
    }

    /**
     * Sets connection_contract_proposition_is_market_price_proposition
     *
     * @param bool $connection_contract_proposition_is_market_price_proposition connection_contract_proposition_is_market_price_proposition
     *
     * @return $this
     */
    public function setConnectionContractPropositionIsMarketPriceProposition($connection_contract_proposition_is_market_price_proposition)
    {
        $this->container['connection_contract_proposition_is_market_price_proposition'] = $connection_contract_proposition_is_market_price_proposition;

        return $this;
    }

    /**
     * Gets connection_meelift_contract_proposition_description
     *
     * @return string
     */
    public function getConnectionMeeliftContractPropositionDescription()
    {
        return $this->container['connection_meelift_contract_proposition_description'];
    }

    /**
     * Sets connection_meelift_contract_proposition_description
     *
     * @param string $connection_meelift_contract_proposition_description connection_meelift_contract_proposition_description
     *
     * @return $this
     */
    public function setConnectionMeeliftContractPropositionDescription($connection_meelift_contract_proposition_description)
    {
        $this->container['connection_meelift_contract_proposition_description'] = $connection_meelift_contract_proposition_description;

        return $this;
    }

    /**
     * Gets connection_switch_period_start_date
     *
     * @return \DateTime
     */
    public function getConnectionSwitchPeriodStartDate()
    {
        return $this->container['connection_switch_period_start_date'];
    }

    /**
     * Sets connection_switch_period_start_date
     *
     * @param \DateTime $connection_switch_period_start_date connection_switch_period_start_date
     *
     * @return $this
     */
    public function setConnectionSwitchPeriodStartDate($connection_switch_period_start_date)
    {
        $this->container['connection_switch_period_start_date'] = $connection_switch_period_start_date;

        return $this;
    }

    /**
     * Gets connection_switch_period_end_date
     *
     * @return \DateTime
     */
    public function getConnectionSwitchPeriodEndDate()
    {
        return $this->container['connection_switch_period_end_date'];
    }

    /**
     * Sets connection_switch_period_end_date
     *
     * @param \DateTime $connection_switch_period_end_date connection_switch_period_end_date
     *
     * @return $this
     */
    public function setConnectionSwitchPeriodEndDate($connection_switch_period_end_date)
    {
        $this->container['connection_switch_period_end_date'] = $connection_switch_period_end_date;

        return $this;
    }

    /**
     * Gets connection_meter_is_smart
     *
     * @return bool
     */
    public function getConnectionMeterIsSmart()
    {
        return $this->container['connection_meter_is_smart'];
    }

    /**
     * Sets connection_meter_is_smart
     *
     * @param bool $connection_meter_is_smart connection_meter_is_smart
     *
     * @return $this
     */
    public function setConnectionMeterIsSmart($connection_meter_is_smart)
    {
        $this->container['connection_meter_is_smart'] = $connection_meter_is_smart;

        return $this;
    }

    /**
     * Gets connection_meter_number
     *
     * @return string
     */
    public function getConnectionMeterNumber()
    {
        return $this->container['connection_meter_number'];
    }

    /**
     * Sets connection_meter_number
     *
     * @param string $connection_meter_number connection_meter_number
     *
     * @return $this
     */
    public function setConnectionMeterNumber($connection_meter_number)
    {
        $this->container['connection_meter_number'] = $connection_meter_number;

        return $this;
    }

    /**
     * Gets connection_cluster_id
     *
     * @return string
     */
    public function getConnectionClusterId()
    {
        return $this->container['connection_cluster_id'];
    }

    /**
     * Sets connection_cluster_id
     *
     * @param string $connection_cluster_id connection_cluster_id
     *
     * @return $this
     */
    public function setConnectionClusterId($connection_cluster_id)
    {
        $this->container['connection_cluster_id'] = $connection_cluster_id;

        return $this;
    }

    /**
     * Gets connection_cluster_reference
     *
     * @return string
     */
    public function getConnectionClusterReference()
    {
        return $this->container['connection_cluster_reference'];
    }

    /**
     * Sets connection_cluster_reference
     *
     * @param string $connection_cluster_reference connection_cluster_reference
     *
     * @return $this
     */
    public function setConnectionClusterReference($connection_cluster_reference)
    {
        $this->container['connection_cluster_reference'] = $connection_cluster_reference;

        return $this;
    }

    /**
     * Gets connection_cluster_comment
     *
     * @return string
     */
    public function getConnectionClusterComment()
    {
        return $this->container['connection_cluster_comment'];
    }

    /**
     * Sets connection_cluster_comment
     *
     * @param string $connection_cluster_comment connection_cluster_comment
     *
     * @return $this
     */
    public function setConnectionClusterComment($connection_cluster_comment)
    {
        $this->container['connection_cluster_comment'] = $connection_cluster_comment;

        return $this;
    }

    /**
     * Gets connection_fiscal_grid_operator
     *
     * @return string
     */
    public function getConnectionFiscalGridOperator()
    {
        return $this->container['connection_fiscal_grid_operator'];
    }

    /**
     * Sets connection_fiscal_grid_operator
     *
     * @param string $connection_fiscal_grid_operator connection_fiscal_grid_operator
     *
     * @return $this
     */
    public function setConnectionFiscalGridOperator($connection_fiscal_grid_operator)
    {
        $this->container['connection_fiscal_grid_operator'] = $connection_fiscal_grid_operator;

        return $this;
    }

    /**
     * Gets connection_treat_as_consumer
     *
     * @return bool
     */
    public function getConnectionTreatAsConsumer()
    {
        return $this->container['connection_treat_as_consumer'];
    }

    /**
     * Sets connection_treat_as_consumer
     *
     * @param bool $connection_treat_as_consumer connection_treat_as_consumer
     *
     * @return $this
     */
    public function setConnectionTreatAsConsumer($connection_treat_as_consumer)
    {
        $this->container['connection_treat_as_consumer'] = $connection_treat_as_consumer;

        return $this;
    }

    /**
     * Gets connection_meter_administrative_status
     *
     * @return string
     */
    public function getConnectionMeterAdministrativeStatus()
    {
        return $this->container['connection_meter_administrative_status'];
    }

    /**
     * Sets connection_meter_administrative_status
     *
     * @param string $connection_meter_administrative_status connection_meter_administrative_status
     *
     * @return $this
     */
    public function setConnectionMeterAdministrativeStatus($connection_meter_administrative_status)
    {
        $this->container['connection_meter_administrative_status'] = $connection_meter_administrative_status;

        return $this;
    }

    /**
     * Gets connection_contract_duration_months
     *
     * @return int
     */
    public function getConnectionContractDurationMonths()
    {
        return $this->container['connection_contract_duration_months'];
    }

    /**
     * Sets connection_contract_duration_months
     *
     * @param int $connection_contract_duration_months connection_contract_duration_months
     *
     * @return $this
     */
    public function setConnectionContractDurationMonths($connection_contract_duration_months)
    {
        $this->container['connection_contract_duration_months'] = $connection_contract_duration_months;

        return $this;
    }

    /**
     * Gets connection_is_combi
     *
     * @return bool
     */
    public function getConnectionIsCombi()
    {
        return $this->container['connection_is_combi'];
    }

    /**
     * Sets connection_is_combi
     *
     * @param bool $connection_is_combi connection_is_combi
     *
     * @return $this
     */
    public function setConnectionIsCombi($connection_is_combi)
    {
        $this->container['connection_is_combi'] = $connection_is_combi;

        return $this;
    }

    /**
     * Gets connection_annual_standard_usage_single_usage_ldn
     *
     * @return int
     */
    public function getConnectionAnnualStandardUsageSingleUsageLdn()
    {
        return $this->container['connection_annual_standard_usage_single_usage_ldn'];
    }

    /**
     * Sets connection_annual_standard_usage_single_usage_ldn
     *
     * @param int $connection_annual_standard_usage_single_usage_ldn connection_annual_standard_usage_single_usage_ldn
     *
     * @return $this
     */
    public function setConnectionAnnualStandardUsageSingleUsageLdn($connection_annual_standard_usage_single_usage_ldn)
    {
        $this->container['connection_annual_standard_usage_single_usage_ldn'] = $connection_annual_standard_usage_single_usage_ldn;

        return $this;
    }

    /**
     * Gets connection_annual_standard_usage_single_usage_odn
     *
     * @return int
     */
    public function getConnectionAnnualStandardUsageSingleUsageOdn()
    {
        return $this->container['connection_annual_standard_usage_single_usage_odn'];
    }

    /**
     * Sets connection_annual_standard_usage_single_usage_odn
     *
     * @param int $connection_annual_standard_usage_single_usage_odn connection_annual_standard_usage_single_usage_odn
     *
     * @return $this
     */
    public function setConnectionAnnualStandardUsageSingleUsageOdn($connection_annual_standard_usage_single_usage_odn)
    {
        $this->container['connection_annual_standard_usage_single_usage_odn'] = $connection_annual_standard_usage_single_usage_odn;

        return $this;
    }

    /**
     * Gets connection_annual_standard_usage_peak_usage_ldn
     *
     * @return int
     */
    public function getConnectionAnnualStandardUsagePeakUsageLdn()
    {
        return $this->container['connection_annual_standard_usage_peak_usage_ldn'];
    }

    /**
     * Sets connection_annual_standard_usage_peak_usage_ldn
     *
     * @param int $connection_annual_standard_usage_peak_usage_ldn connection_annual_standard_usage_peak_usage_ldn
     *
     * @return $this
     */
    public function setConnectionAnnualStandardUsagePeakUsageLdn($connection_annual_standard_usage_peak_usage_ldn)
    {
        $this->container['connection_annual_standard_usage_peak_usage_ldn'] = $connection_annual_standard_usage_peak_usage_ldn;

        return $this;
    }

    /**
     * Gets connection_annual_standard_usage_peak_usage_odn
     *
     * @return int
     */
    public function getConnectionAnnualStandardUsagePeakUsageOdn()
    {
        return $this->container['connection_annual_standard_usage_peak_usage_odn'];
    }

    /**
     * Sets connection_annual_standard_usage_peak_usage_odn
     *
     * @param int $connection_annual_standard_usage_peak_usage_odn connection_annual_standard_usage_peak_usage_odn
     *
     * @return $this
     */
    public function setConnectionAnnualStandardUsagePeakUsageOdn($connection_annual_standard_usage_peak_usage_odn)
    {
        $this->container['connection_annual_standard_usage_peak_usage_odn'] = $connection_annual_standard_usage_peak_usage_odn;

        return $this;
    }

    /**
     * Gets connection_annual_standard_usage_off_peak_usage_ldn
     *
     * @return int
     */
    public function getConnectionAnnualStandardUsageOffPeakUsageLdn()
    {
        return $this->container['connection_annual_standard_usage_off_peak_usage_ldn'];
    }

    /**
     * Sets connection_annual_standard_usage_off_peak_usage_ldn
     *
     * @param int $connection_annual_standard_usage_off_peak_usage_ldn connection_annual_standard_usage_off_peak_usage_ldn
     *
     * @return $this
     */
    public function setConnectionAnnualStandardUsageOffPeakUsageLdn($connection_annual_standard_usage_off_peak_usage_ldn)
    {
        $this->container['connection_annual_standard_usage_off_peak_usage_ldn'] = $connection_annual_standard_usage_off_peak_usage_ldn;

        return $this;
    }

    /**
     * Gets connection_annual_standard_usage_off_peak_usage_odn
     *
     * @return int
     */
    public function getConnectionAnnualStandardUsageOffPeakUsageOdn()
    {
        return $this->container['connection_annual_standard_usage_off_peak_usage_odn'];
    }

    /**
     * Sets connection_annual_standard_usage_off_peak_usage_odn
     *
     * @param int $connection_annual_standard_usage_off_peak_usage_odn connection_annual_standard_usage_off_peak_usage_odn
     *
     * @return $this
     */
    public function setConnectionAnnualStandardUsageOffPeakUsageOdn($connection_annual_standard_usage_off_peak_usage_odn)
    {
        $this->container['connection_annual_standard_usage_off_peak_usage_odn'] = $connection_annual_standard_usage_off_peak_usage_odn;

        return $this;
    }

    /**
     * Gets connection_annual_standard_usage_gas_usage
     *
     * @return int
     */
    public function getConnectionAnnualStandardUsageGasUsage()
    {
        return $this->container['connection_annual_standard_usage_gas_usage'];
    }

    /**
     * Sets connection_annual_standard_usage_gas_usage
     *
     * @param int $connection_annual_standard_usage_gas_usage connection_annual_standard_usage_gas_usage
     *
     * @return $this
     */
    public function setConnectionAnnualStandardUsageGasUsage($connection_annual_standard_usage_gas_usage)
    {
        $this->container['connection_annual_standard_usage_gas_usage'] = $connection_annual_standard_usage_gas_usage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


