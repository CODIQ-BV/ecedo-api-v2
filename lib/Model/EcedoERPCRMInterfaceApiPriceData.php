<?php
/**
 * EcedoERPCRMInterfaceApiPriceData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiPriceData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiPriceData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.PriceData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'market_segment' => 'string',
        'price_date' => '\DateTime',
        'usage_type' => 'string',
        'usage_type_localized' => 'string',
        'location_type' => 'string',
        'location_type_localized' => 'string',
        'grid_operator_ean' => 'string',
        'proposition_reference' => 'string',
        'meelift_proposition_reference' => 'string',
        'has_meelift' => 'bool',
        'has_reseller' => 'bool',
        'allow_missing_cap_tar' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'market_segment' => null,
        'price_date' => 'date',
        'usage_type' => null,
        'usage_type_localized' => null,
        'location_type' => null,
        'location_type_localized' => null,
        'grid_operator_ean' => null,
        'proposition_reference' => null,
        'meelift_proposition_reference' => null,
        'has_meelift' => null,
        'has_reseller' => null,
        'allow_missing_cap_tar' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'market_segment' => 'MarketSegment',
        'price_date' => 'PriceDate',
        'usage_type' => 'UsageType',
        'usage_type_localized' => 'UsageTypeLocalized',
        'location_type' => 'LocationType',
        'location_type_localized' => 'LocationTypeLocalized',
        'grid_operator_ean' => 'GridOperatorEAN',
        'proposition_reference' => 'PropositionReference',
        'meelift_proposition_reference' => 'MeeliftPropositionReference',
        'has_meelift' => 'HasMeelift',
        'has_reseller' => 'HasReseller',
        'allow_missing_cap_tar' => 'AllowMissingCapTar'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'market_segment' => 'setMarketSegment',
        'price_date' => 'setPriceDate',
        'usage_type' => 'setUsageType',
        'usage_type_localized' => 'setUsageTypeLocalized',
        'location_type' => 'setLocationType',
        'location_type_localized' => 'setLocationTypeLocalized',
        'grid_operator_ean' => 'setGridOperatorEan',
        'proposition_reference' => 'setPropositionReference',
        'meelift_proposition_reference' => 'setMeeliftPropositionReference',
        'has_meelift' => 'setHasMeelift',
        'has_reseller' => 'setHasReseller',
        'allow_missing_cap_tar' => 'setAllowMissingCapTar'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'market_segment' => 'getMarketSegment',
        'price_date' => 'getPriceDate',
        'usage_type' => 'getUsageType',
        'usage_type_localized' => 'getUsageTypeLocalized',
        'location_type' => 'getLocationType',
        'location_type_localized' => 'getLocationTypeLocalized',
        'grid_operator_ean' => 'getGridOperatorEan',
        'proposition_reference' => 'getPropositionReference',
        'meelift_proposition_reference' => 'getMeeliftPropositionReference',
        'has_meelift' => 'getHasMeelift',
        'has_reseller' => 'getHasReseller',
        'allow_missing_cap_tar' => 'getAllowMissingCapTar'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MARKET_SEGMENT_ELECTRICITY = 'Electricity';
    const MARKET_SEGMENT_GAS = 'Gas';
    const USAGE_TYPE_SMALL_CONSUMER = 'SmallConsumer';
    const USAGE_TYPE_LARGE_CONSUMER = 'LargeConsumer';
    const LOCATION_TYPE_BLOCK_HEATING = 'BlockHeating';
    const LOCATION_TYPE_CHARGING_STATION = 'ChargingStation';
    const LOCATION_TYPE_HORTICULTURE = 'Horticulture';
    const LOCATION_TYPE_GRID_LOSS = 'GridLoss';
    const LOCATION_TYPE_WAL_STROOM = 'WalStroom';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMarketSegmentAllowableValues()
    {
        return [
            self::MARKET_SEGMENT_ELECTRICITY,
            self::MARKET_SEGMENT_GAS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUsageTypeAllowableValues()
    {
        return [
            self::USAGE_TYPE_SMALL_CONSUMER,
            self::USAGE_TYPE_LARGE_CONSUMER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocationTypeAllowableValues()
    {
        return [
            self::LOCATION_TYPE_BLOCK_HEATING,
            self::LOCATION_TYPE_CHARGING_STATION,
            self::LOCATION_TYPE_HORTICULTURE,
            self::LOCATION_TYPE_GRID_LOSS,
            self::LOCATION_TYPE_WAL_STROOM,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['market_segment'] = isset($data['market_segment']) ? $data['market_segment'] : null;
        $this->container['price_date'] = isset($data['price_date']) ? $data['price_date'] : null;
        $this->container['usage_type'] = isset($data['usage_type']) ? $data['usage_type'] : null;
        $this->container['usage_type_localized'] = isset($data['usage_type_localized']) ? $data['usage_type_localized'] : null;
        $this->container['location_type'] = isset($data['location_type']) ? $data['location_type'] : null;
        $this->container['location_type_localized'] = isset($data['location_type_localized']) ? $data['location_type_localized'] : null;
        $this->container['grid_operator_ean'] = isset($data['grid_operator_ean']) ? $data['grid_operator_ean'] : null;
        $this->container['proposition_reference'] = isset($data['proposition_reference']) ? $data['proposition_reference'] : null;
        $this->container['meelift_proposition_reference'] = isset($data['meelift_proposition_reference']) ? $data['meelift_proposition_reference'] : null;
        $this->container['has_meelift'] = isset($data['has_meelift']) ? $data['has_meelift'] : null;
        $this->container['has_reseller'] = isset($data['has_reseller']) ? $data['has_reseller'] : null;
        $this->container['allow_missing_cap_tar'] = isset($data['allow_missing_cap_tar']) ? $data['allow_missing_cap_tar'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMarketSegmentAllowableValues();
        if (!is_null($this->container['market_segment']) && !in_array($this->container['market_segment'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'market_segment', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUsageTypeAllowableValues();
        if (!is_null($this->container['usage_type']) && !in_array($this->container['usage_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'usage_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLocationTypeAllowableValues();
        if (!is_null($this->container['location_type']) && !in_array($this->container['location_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'location_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets market_segment
     *
     * @return string
     */
    public function getMarketSegment()
    {
        return $this->container['market_segment'];
    }

    /**
     * Sets market_segment
     *
     * @param string $market_segment market_segment
     *
     * @return $this
     */
    public function setMarketSegment($market_segment)
    {
        $allowedValues = $this->getMarketSegmentAllowableValues();
        if (!is_null($market_segment) && !in_array($market_segment, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'market_segment', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['market_segment'] = $market_segment;

        return $this;
    }

    /**
     * Gets price_date
     *
     * @return \DateTime
     */
    public function getPriceDate()
    {
        return $this->container['price_date'];
    }

    /**
     * Sets price_date
     *
     * @param \DateTime $price_date price_date
     *
     * @return $this
     */
    public function setPriceDate($price_date)
    {
        $this->container['price_date'] = $price_date;

        return $this;
    }

    /**
     * Gets usage_type
     *
     * @return string
     */
    public function getUsageType()
    {
        return $this->container['usage_type'];
    }

    /**
     * Sets usage_type
     *
     * @param string $usage_type usage_type
     *
     * @return $this
     */
    public function setUsageType($usage_type)
    {
        $allowedValues = $this->getUsageTypeAllowableValues();
        if (!is_null($usage_type) && !in_array($usage_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'usage_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['usage_type'] = $usage_type;

        return $this;
    }

    /**
     * Gets usage_type_localized
     *
     * @return string
     */
    public function getUsageTypeLocalized()
    {
        return $this->container['usage_type_localized'];
    }

    /**
     * Sets usage_type_localized
     *
     * @param string $usage_type_localized usage_type_localized
     *
     * @return $this
     */
    public function setUsageTypeLocalized($usage_type_localized)
    {
        $this->container['usage_type_localized'] = $usage_type_localized;

        return $this;
    }

    /**
     * Gets location_type
     *
     * @return string
     */
    public function getLocationType()
    {
        return $this->container['location_type'];
    }

    /**
     * Sets location_type
     *
     * @param string $location_type location_type
     *
     * @return $this
     */
    public function setLocationType($location_type)
    {
        $allowedValues = $this->getLocationTypeAllowableValues();
        if (!is_null($location_type) && !in_array($location_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'location_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['location_type'] = $location_type;

        return $this;
    }

    /**
     * Gets location_type_localized
     *
     * @return string
     */
    public function getLocationTypeLocalized()
    {
        return $this->container['location_type_localized'];
    }

    /**
     * Sets location_type_localized
     *
     * @param string $location_type_localized location_type_localized
     *
     * @return $this
     */
    public function setLocationTypeLocalized($location_type_localized)
    {
        $this->container['location_type_localized'] = $location_type_localized;

        return $this;
    }

    /**
     * Gets grid_operator_ean
     *
     * @return string
     */
    public function getGridOperatorEan()
    {
        return $this->container['grid_operator_ean'];
    }

    /**
     * Sets grid_operator_ean
     *
     * @param string $grid_operator_ean grid_operator_ean
     *
     * @return $this
     */
    public function setGridOperatorEan($grid_operator_ean)
    {
        $this->container['grid_operator_ean'] = $grid_operator_ean;

        return $this;
    }

    /**
     * Gets proposition_reference
     *
     * @return string
     */
    public function getPropositionReference()
    {
        return $this->container['proposition_reference'];
    }

    /**
     * Sets proposition_reference
     *
     * @param string $proposition_reference proposition_reference
     *
     * @return $this
     */
    public function setPropositionReference($proposition_reference)
    {
        $this->container['proposition_reference'] = $proposition_reference;

        return $this;
    }

    /**
     * Gets meelift_proposition_reference
     *
     * @return string
     */
    public function getMeeliftPropositionReference()
    {
        return $this->container['meelift_proposition_reference'];
    }

    /**
     * Sets meelift_proposition_reference
     *
     * @param string $meelift_proposition_reference meelift_proposition_reference
     *
     * @return $this
     */
    public function setMeeliftPropositionReference($meelift_proposition_reference)
    {
        $this->container['meelift_proposition_reference'] = $meelift_proposition_reference;

        return $this;
    }

    /**
     * Gets has_meelift
     *
     * @return bool
     */
    public function getHasMeelift()
    {
        return $this->container['has_meelift'];
    }

    /**
     * Sets has_meelift
     *
     * @param bool $has_meelift has_meelift
     *
     * @return $this
     */
    public function setHasMeelift($has_meelift)
    {
        $this->container['has_meelift'] = $has_meelift;

        return $this;
    }

    /**
     * Gets has_reseller
     *
     * @return bool
     */
    public function getHasReseller()
    {
        return $this->container['has_reseller'];
    }

    /**
     * Sets has_reseller
     *
     * @param bool $has_reseller has_reseller
     *
     * @return $this
     */
    public function setHasReseller($has_reseller)
    {
        $this->container['has_reseller'] = $has_reseller;

        return $this;
    }

    /**
     * Gets allow_missing_cap_tar
     *
     * @return bool
     */
    public function getAllowMissingCapTar()
    {
        return $this->container['allow_missing_cap_tar'];
    }

    /**
     * Sets allow_missing_cap_tar
     *
     * @param bool $allow_missing_cap_tar allow_missing_cap_tar
     *
     * @return $this
     */
    public function setAllowMissingCapTar($allow_missing_cap_tar)
    {
        $this->container['allow_missing_cap_tar'] = $allow_missing_cap_tar;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


