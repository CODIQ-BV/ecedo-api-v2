<?php
/**
 * EcedoERPCRMInterfaceApiMeterReading
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiMeterReading Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiMeterReading implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.MeterReading';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'meter_reading_id' => 'string',
        'meter_reading_method' => 'string',
        'meter_reading_method_localized' => 'string',
        'meter_reading_status' => 'string',
        'meter_reading_status_localized' => 'string',
        'meter_reading_reason' => 'string',
        'meter_reading_reason_localized' => 'string',
        'p4_request_reason' => 'string',
        'p4_request_reason_localized' => 'string',
        'meter_reading_request_reason' => 'string',
        'meter_reading_request_reason_localized' => 'string',
        'usage_odnt1' => 'int',
        'usage_odnt2' => 'int',
        'usage_ldnt1' => 'int',
        'usage_ldnt2' => 'int',
        'previous_meter_reading_id' => 'string',
        'meter_number' => 'string',
        'reading_date' => '\DateTime',
        'odnt1' => 'int',
        'odnt2' => 'int',
        'ldnt1' => 'int',
        'ldnt2' => 'int',
        'comment' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'meter_reading_id' => null,
        'meter_reading_method' => null,
        'meter_reading_method_localized' => null,
        'meter_reading_status' => null,
        'meter_reading_status_localized' => null,
        'meter_reading_reason' => null,
        'meter_reading_reason_localized' => null,
        'p4_request_reason' => null,
        'p4_request_reason_localized' => null,
        'meter_reading_request_reason' => null,
        'meter_reading_request_reason_localized' => null,
        'usage_odnt1' => 'int32',
        'usage_odnt2' => 'int32',
        'usage_ldnt1' => 'int32',
        'usage_ldnt2' => 'int32',
        'previous_meter_reading_id' => 'uuid',
        'meter_number' => null,
        'reading_date' => 'date',
        'odnt1' => 'int32',
        'odnt2' => 'int32',
        'ldnt1' => 'int32',
        'ldnt2' => 'int32',
        'comment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'meter_reading_id' => 'MeterReadingId',
        'meter_reading_method' => 'MeterReadingMethod',
        'meter_reading_method_localized' => 'MeterReadingMethodLocalized',
        'meter_reading_status' => 'MeterReadingStatus',
        'meter_reading_status_localized' => 'MeterReadingStatusLocalized',
        'meter_reading_reason' => 'MeterReadingReason',
        'meter_reading_reason_localized' => 'MeterReadingReasonLocalized',
        'p4_request_reason' => 'P4RequestReason',
        'p4_request_reason_localized' => 'P4RequestReasonLocalized',
        'meter_reading_request_reason' => 'MeterReadingRequestReason',
        'meter_reading_request_reason_localized' => 'MeterReadingRequestReasonLocalized',
        'usage_odnt1' => 'UsageODNT1',
        'usage_odnt2' => 'UsageODNT2',
        'usage_ldnt1' => 'UsageLDNT1',
        'usage_ldnt2' => 'UsageLDNT2',
        'previous_meter_reading_id' => 'PreviousMeterReadingId',
        'meter_number' => 'MeterNumber',
        'reading_date' => 'ReadingDate',
        'odnt1' => 'ODNT1',
        'odnt2' => 'ODNT2',
        'ldnt1' => 'LDNT1',
        'ldnt2' => 'LDNT2',
        'comment' => 'Comment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'meter_reading_id' => 'setMeterReadingId',
        'meter_reading_method' => 'setMeterReadingMethod',
        'meter_reading_method_localized' => 'setMeterReadingMethodLocalized',
        'meter_reading_status' => 'setMeterReadingStatus',
        'meter_reading_status_localized' => 'setMeterReadingStatusLocalized',
        'meter_reading_reason' => 'setMeterReadingReason',
        'meter_reading_reason_localized' => 'setMeterReadingReasonLocalized',
        'p4_request_reason' => 'setP4RequestReason',
        'p4_request_reason_localized' => 'setP4RequestReasonLocalized',
        'meter_reading_request_reason' => 'setMeterReadingRequestReason',
        'meter_reading_request_reason_localized' => 'setMeterReadingRequestReasonLocalized',
        'usage_odnt1' => 'setUsageOdnt1',
        'usage_odnt2' => 'setUsageOdnt2',
        'usage_ldnt1' => 'setUsageLdnt1',
        'usage_ldnt2' => 'setUsageLdnt2',
        'previous_meter_reading_id' => 'setPreviousMeterReadingId',
        'meter_number' => 'setMeterNumber',
        'reading_date' => 'setReadingDate',
        'odnt1' => 'setOdnt1',
        'odnt2' => 'setOdnt2',
        'ldnt1' => 'setLdnt1',
        'ldnt2' => 'setLdnt2',
        'comment' => 'setComment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'meter_reading_id' => 'getMeterReadingId',
        'meter_reading_method' => 'getMeterReadingMethod',
        'meter_reading_method_localized' => 'getMeterReadingMethodLocalized',
        'meter_reading_status' => 'getMeterReadingStatus',
        'meter_reading_status_localized' => 'getMeterReadingStatusLocalized',
        'meter_reading_reason' => 'getMeterReadingReason',
        'meter_reading_reason_localized' => 'getMeterReadingReasonLocalized',
        'p4_request_reason' => 'getP4RequestReason',
        'p4_request_reason_localized' => 'getP4RequestReasonLocalized',
        'meter_reading_request_reason' => 'getMeterReadingRequestReason',
        'meter_reading_request_reason_localized' => 'getMeterReadingRequestReasonLocalized',
        'usage_odnt1' => 'getUsageOdnt1',
        'usage_odnt2' => 'getUsageOdnt2',
        'usage_ldnt1' => 'getUsageLdnt1',
        'usage_ldnt2' => 'getUsageLdnt2',
        'previous_meter_reading_id' => 'getPreviousMeterReadingId',
        'meter_number' => 'getMeterNumber',
        'reading_date' => 'getReadingDate',
        'odnt1' => 'getOdnt1',
        'odnt2' => 'getOdnt2',
        'ldnt1' => 'getLdnt1',
        'ldnt2' => 'getLdnt2',
        'comment' => 'getComment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['meter_reading_id'] = isset($data['meter_reading_id']) ? $data['meter_reading_id'] : null;
        $this->container['meter_reading_method'] = isset($data['meter_reading_method']) ? $data['meter_reading_method'] : null;
        $this->container['meter_reading_method_localized'] = isset($data['meter_reading_method_localized']) ? $data['meter_reading_method_localized'] : null;
        $this->container['meter_reading_status'] = isset($data['meter_reading_status']) ? $data['meter_reading_status'] : null;
        $this->container['meter_reading_status_localized'] = isset($data['meter_reading_status_localized']) ? $data['meter_reading_status_localized'] : null;
        $this->container['meter_reading_reason'] = isset($data['meter_reading_reason']) ? $data['meter_reading_reason'] : null;
        $this->container['meter_reading_reason_localized'] = isset($data['meter_reading_reason_localized']) ? $data['meter_reading_reason_localized'] : null;
        $this->container['p4_request_reason'] = isset($data['p4_request_reason']) ? $data['p4_request_reason'] : null;
        $this->container['p4_request_reason_localized'] = isset($data['p4_request_reason_localized']) ? $data['p4_request_reason_localized'] : null;
        $this->container['meter_reading_request_reason'] = isset($data['meter_reading_request_reason']) ? $data['meter_reading_request_reason'] : null;
        $this->container['meter_reading_request_reason_localized'] = isset($data['meter_reading_request_reason_localized']) ? $data['meter_reading_request_reason_localized'] : null;
        $this->container['usage_odnt1'] = isset($data['usage_odnt1']) ? $data['usage_odnt1'] : null;
        $this->container['usage_odnt2'] = isset($data['usage_odnt2']) ? $data['usage_odnt2'] : null;
        $this->container['usage_ldnt1'] = isset($data['usage_ldnt1']) ? $data['usage_ldnt1'] : null;
        $this->container['usage_ldnt2'] = isset($data['usage_ldnt2']) ? $data['usage_ldnt2'] : null;
        $this->container['previous_meter_reading_id'] = isset($data['previous_meter_reading_id']) ? $data['previous_meter_reading_id'] : null;
        $this->container['meter_number'] = isset($data['meter_number']) ? $data['meter_number'] : null;
        $this->container['reading_date'] = isset($data['reading_date']) ? $data['reading_date'] : null;
        $this->container['odnt1'] = isset($data['odnt1']) ? $data['odnt1'] : null;
        $this->container['odnt2'] = isset($data['odnt2']) ? $data['odnt2'] : null;
        $this->container['ldnt1'] = isset($data['ldnt1']) ? $data['ldnt1'] : null;
        $this->container['ldnt2'] = isset($data['ldnt2']) ? $data['ldnt2'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets meter_reading_id
     *
     * @return string
     */
    public function getMeterReadingId()
    {
        return $this->container['meter_reading_id'];
    }

    /**
     * Sets meter_reading_id
     *
     * @param string $meter_reading_id meter_reading_id
     *
     * @return $this
     */
    public function setMeterReadingId($meter_reading_id)
    {
        $this->container['meter_reading_id'] = $meter_reading_id;

        return $this;
    }

    /**
     * Gets meter_reading_method
     *
     * @return string
     */
    public function getMeterReadingMethod()
    {
        return $this->container['meter_reading_method'];
    }

    /**
     * Sets meter_reading_method
     *
     * @param string $meter_reading_method meter_reading_method
     *
     * @return $this
     */
    public function setMeterReadingMethod($meter_reading_method)
    {
        $this->container['meter_reading_method'] = $meter_reading_method;

        return $this;
    }

    /**
     * Gets meter_reading_method_localized
     *
     * @return string
     */
    public function getMeterReadingMethodLocalized()
    {
        return $this->container['meter_reading_method_localized'];
    }

    /**
     * Sets meter_reading_method_localized
     *
     * @param string $meter_reading_method_localized meter_reading_method_localized
     *
     * @return $this
     */
    public function setMeterReadingMethodLocalized($meter_reading_method_localized)
    {
        $this->container['meter_reading_method_localized'] = $meter_reading_method_localized;

        return $this;
    }

    /**
     * Gets meter_reading_status
     *
     * @return string
     */
    public function getMeterReadingStatus()
    {
        return $this->container['meter_reading_status'];
    }

    /**
     * Sets meter_reading_status
     *
     * @param string $meter_reading_status meter_reading_status
     *
     * @return $this
     */
    public function setMeterReadingStatus($meter_reading_status)
    {
        $this->container['meter_reading_status'] = $meter_reading_status;

        return $this;
    }

    /**
     * Gets meter_reading_status_localized
     *
     * @return string
     */
    public function getMeterReadingStatusLocalized()
    {
        return $this->container['meter_reading_status_localized'];
    }

    /**
     * Sets meter_reading_status_localized
     *
     * @param string $meter_reading_status_localized meter_reading_status_localized
     *
     * @return $this
     */
    public function setMeterReadingStatusLocalized($meter_reading_status_localized)
    {
        $this->container['meter_reading_status_localized'] = $meter_reading_status_localized;

        return $this;
    }

    /**
     * Gets meter_reading_reason
     *
     * @return string
     */
    public function getMeterReadingReason()
    {
        return $this->container['meter_reading_reason'];
    }

    /**
     * Sets meter_reading_reason
     *
     * @param string $meter_reading_reason meter_reading_reason
     *
     * @return $this
     */
    public function setMeterReadingReason($meter_reading_reason)
    {
        $this->container['meter_reading_reason'] = $meter_reading_reason;

        return $this;
    }

    /**
     * Gets meter_reading_reason_localized
     *
     * @return string
     */
    public function getMeterReadingReasonLocalized()
    {
        return $this->container['meter_reading_reason_localized'];
    }

    /**
     * Sets meter_reading_reason_localized
     *
     * @param string $meter_reading_reason_localized meter_reading_reason_localized
     *
     * @return $this
     */
    public function setMeterReadingReasonLocalized($meter_reading_reason_localized)
    {
        $this->container['meter_reading_reason_localized'] = $meter_reading_reason_localized;

        return $this;
    }

    /**
     * Gets p4_request_reason
     *
     * @return string
     */
    public function getP4RequestReason()
    {
        return $this->container['p4_request_reason'];
    }

    /**
     * Sets p4_request_reason
     *
     * @param string $p4_request_reason p4_request_reason
     *
     * @return $this
     */
    public function setP4RequestReason($p4_request_reason)
    {
        $this->container['p4_request_reason'] = $p4_request_reason;

        return $this;
    }

    /**
     * Gets p4_request_reason_localized
     *
     * @return string
     */
    public function getP4RequestReasonLocalized()
    {
        return $this->container['p4_request_reason_localized'];
    }

    /**
     * Sets p4_request_reason_localized
     *
     * @param string $p4_request_reason_localized p4_request_reason_localized
     *
     * @return $this
     */
    public function setP4RequestReasonLocalized($p4_request_reason_localized)
    {
        $this->container['p4_request_reason_localized'] = $p4_request_reason_localized;

        return $this;
    }

    /**
     * Gets meter_reading_request_reason
     *
     * @return string
     */
    public function getMeterReadingRequestReason()
    {
        return $this->container['meter_reading_request_reason'];
    }

    /**
     * Sets meter_reading_request_reason
     *
     * @param string $meter_reading_request_reason meter_reading_request_reason
     *
     * @return $this
     */
    public function setMeterReadingRequestReason($meter_reading_request_reason)
    {
        $this->container['meter_reading_request_reason'] = $meter_reading_request_reason;

        return $this;
    }

    /**
     * Gets meter_reading_request_reason_localized
     *
     * @return string
     */
    public function getMeterReadingRequestReasonLocalized()
    {
        return $this->container['meter_reading_request_reason_localized'];
    }

    /**
     * Sets meter_reading_request_reason_localized
     *
     * @param string $meter_reading_request_reason_localized meter_reading_request_reason_localized
     *
     * @return $this
     */
    public function setMeterReadingRequestReasonLocalized($meter_reading_request_reason_localized)
    {
        $this->container['meter_reading_request_reason_localized'] = $meter_reading_request_reason_localized;

        return $this;
    }

    /**
     * Gets usage_odnt1
     *
     * @return int
     */
    public function getUsageOdnt1()
    {
        return $this->container['usage_odnt1'];
    }

    /**
     * Sets usage_odnt1
     *
     * @param int $usage_odnt1 usage_odnt1
     *
     * @return $this
     */
    public function setUsageOdnt1($usage_odnt1)
    {
        $this->container['usage_odnt1'] = $usage_odnt1;

        return $this;
    }

    /**
     * Gets usage_odnt2
     *
     * @return int
     */
    public function getUsageOdnt2()
    {
        return $this->container['usage_odnt2'];
    }

    /**
     * Sets usage_odnt2
     *
     * @param int $usage_odnt2 usage_odnt2
     *
     * @return $this
     */
    public function setUsageOdnt2($usage_odnt2)
    {
        $this->container['usage_odnt2'] = $usage_odnt2;

        return $this;
    }

    /**
     * Gets usage_ldnt1
     *
     * @return int
     */
    public function getUsageLdnt1()
    {
        return $this->container['usage_ldnt1'];
    }

    /**
     * Sets usage_ldnt1
     *
     * @param int $usage_ldnt1 usage_ldnt1
     *
     * @return $this
     */
    public function setUsageLdnt1($usage_ldnt1)
    {
        $this->container['usage_ldnt1'] = $usage_ldnt1;

        return $this;
    }

    /**
     * Gets usage_ldnt2
     *
     * @return int
     */
    public function getUsageLdnt2()
    {
        return $this->container['usage_ldnt2'];
    }

    /**
     * Sets usage_ldnt2
     *
     * @param int $usage_ldnt2 usage_ldnt2
     *
     * @return $this
     */
    public function setUsageLdnt2($usage_ldnt2)
    {
        $this->container['usage_ldnt2'] = $usage_ldnt2;

        return $this;
    }

    /**
     * Gets previous_meter_reading_id
     *
     * @return string
     */
    public function getPreviousMeterReadingId()
    {
        return $this->container['previous_meter_reading_id'];
    }

    /**
     * Sets previous_meter_reading_id
     *
     * @param string $previous_meter_reading_id previous_meter_reading_id
     *
     * @return $this
     */
    public function setPreviousMeterReadingId($previous_meter_reading_id)
    {
        $this->container['previous_meter_reading_id'] = $previous_meter_reading_id;

        return $this;
    }

    /**
     * Gets meter_number
     *
     * @return string
     */
    public function getMeterNumber()
    {
        return $this->container['meter_number'];
    }

    /**
     * Sets meter_number
     *
     * @param string $meter_number meter_number
     *
     * @return $this
     */
    public function setMeterNumber($meter_number)
    {
        $this->container['meter_number'] = $meter_number;

        return $this;
    }

    /**
     * Gets reading_date
     *
     * @return \DateTime
     */
    public function getReadingDate()
    {
        return $this->container['reading_date'];
    }

    /**
     * Sets reading_date
     *
     * @param \DateTime $reading_date reading_date
     *
     * @return $this
     */
    public function setReadingDate($reading_date)
    {
        $this->container['reading_date'] = $reading_date;

        return $this;
    }

    /**
     * Gets odnt1
     *
     * @return int
     */
    public function getOdnt1()
    {
        return $this->container['odnt1'];
    }

    /**
     * Sets odnt1
     *
     * @param int $odnt1 odnt1
     *
     * @return $this
     */
    public function setOdnt1($odnt1)
    {
        $this->container['odnt1'] = $odnt1;

        return $this;
    }

    /**
     * Gets odnt2
     *
     * @return int
     */
    public function getOdnt2()
    {
        return $this->container['odnt2'];
    }

    /**
     * Sets odnt2
     *
     * @param int $odnt2 odnt2
     *
     * @return $this
     */
    public function setOdnt2($odnt2)
    {
        $this->container['odnt2'] = $odnt2;

        return $this;
    }

    /**
     * Gets ldnt1
     *
     * @return int
     */
    public function getLdnt1()
    {
        return $this->container['ldnt1'];
    }

    /**
     * Sets ldnt1
     *
     * @param int $ldnt1 ldnt1
     *
     * @return $this
     */
    public function setLdnt1($ldnt1)
    {
        $this->container['ldnt1'] = $ldnt1;

        return $this;
    }

    /**
     * Gets ldnt2
     *
     * @return int
     */
    public function getLdnt2()
    {
        return $this->container['ldnt2'];
    }

    /**
     * Sets ldnt2
     *
     * @param int $ldnt2 ldnt2
     *
     * @return $this
     */
    public function setLdnt2($ldnt2)
    {
        $this->container['ldnt2'] = $ldnt2;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


