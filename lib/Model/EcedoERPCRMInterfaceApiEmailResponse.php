<?php
/**
 * EcedoERPCRMInterfaceApiEmailResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiEmailResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiEmailResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.EmailResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'email_id' => 'string',
        'email_type' => 'string',
        'email_type_localized' => 'string',
        'date_created' => '\DateTime',
        'date_sent' => '\DateTime',
        'subject' => 'string',
        'from' => 'string',
        'to' => 'string',
        'cc' => 'string[]',
        'text_body' => 'string',
        'html_body' => 'string',
        'product_group_id' => 'string',
        'status' => 'string',
        'status_localized' => 'string',
        'attachments' => '\Swagger\Client\Model\EcedoERPCRMInterfaceApiDocument[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'email_id' => null,
        'email_type' => null,
        'email_type_localized' => null,
        'date_created' => 'date-time',
        'date_sent' => 'date-time',
        'subject' => null,
        'from' => null,
        'to' => null,
        'cc' => null,
        'text_body' => null,
        'html_body' => null,
        'product_group_id' => 'uuid',
        'status' => null,
        'status_localized' => null,
        'attachments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email_id' => 'EmailId',
        'email_type' => 'EmailType',
        'email_type_localized' => 'EmailTypeLocalized',
        'date_created' => 'DateCreated',
        'date_sent' => 'DateSent',
        'subject' => 'Subject',
        'from' => 'From',
        'to' => 'To',
        'cc' => 'CC',
        'text_body' => 'TextBody',
        'html_body' => 'HTMLBody',
        'product_group_id' => 'ProductGroupId',
        'status' => 'Status',
        'status_localized' => 'StatusLocalized',
        'attachments' => 'Attachments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email_id' => 'setEmailId',
        'email_type' => 'setEmailType',
        'email_type_localized' => 'setEmailTypeLocalized',
        'date_created' => 'setDateCreated',
        'date_sent' => 'setDateSent',
        'subject' => 'setSubject',
        'from' => 'setFrom',
        'to' => 'setTo',
        'cc' => 'setCc',
        'text_body' => 'setTextBody',
        'html_body' => 'setHtmlBody',
        'product_group_id' => 'setProductGroupId',
        'status' => 'setStatus',
        'status_localized' => 'setStatusLocalized',
        'attachments' => 'setAttachments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email_id' => 'getEmailId',
        'email_type' => 'getEmailType',
        'email_type_localized' => 'getEmailTypeLocalized',
        'date_created' => 'getDateCreated',
        'date_sent' => 'getDateSent',
        'subject' => 'getSubject',
        'from' => 'getFrom',
        'to' => 'getTo',
        'cc' => 'getCc',
        'text_body' => 'getTextBody',
        'html_body' => 'getHtmlBody',
        'product_group_id' => 'getProductGroupId',
        'status' => 'getStatus',
        'status_localized' => 'getStatusLocalized',
        'attachments' => 'getAttachments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const EMAIL_TYPE_WELCOME_EMAIL = 'WelcomeEmail';
    const EMAIL_TYPE_SETTLEMENT_INVOICE_EMAIL = 'SettlementInvoiceEmail';
    const EMAIL_TYPE_ADVANCE_PAYMENT_INVOICE_EMAIL = 'AdvancePaymentInvoiceEmail';
    const EMAIL_TYPE_PRODUCER_SETTLEMENT_INVOICE_EMAIL = 'ProducerSettlementInvoiceEmail';
    const EMAIL_TYPE_LOCATION_OWNER_INVOICE_EMAIL = 'LocationOwnerInvoiceEmail';
    const EMAIL_TYPE_MSP_INVOICE_EMAIL = 'MSPInvoiceEmail';
    const EMAIL_TYPE_ENERGY_PURCHASE_SETTLEMENT_INVOICE_EMAIL = 'EnergyPurchaseSettlementInvoiceEmail';
    const EMAIL_TYPE_PURCHASE_TERMINATION_FEE_INVOICE_EMAIL = 'PurchaseTerminationFeeInvoiceEmail';
    const EMAIL_TYPE_PURCHASE_DEPOSIT_INVOICE_EMAIL = 'PurchaseDepositInvoiceEmail';
    const EMAIL_TYPE_CUSTOM_INVOICE_EMAIL = 'CustomInvoiceEmail';
    const EMAIL_TYPE_METER_READING_REQUEST_EMAIL = 'MeterReadingRequestEmail';
    const EMAIL_TYPE_NEW_ADVANCE_PAYMENT_EMAIL = 'NewAdvancePaymentEmail';
    const EMAIL_TYPE_COOLING_DOWN_PERIOD_FINISHED_EMAIL = 'CoolingDownPeriodFinishedEmail';
    const EMAIL_TYPE_CREATE_CONTRACT_RETENTION_EMAIL = 'CreateContractRetentionEmail';
    const EMAIL_TYPE_CONTRACT_AUTO_RENEWED_EMAIL = 'ContractAutoRenewedEmail';
    const EMAIL_TYPE_LOSS_PROCESSED_EMAIL = 'LossProcessedEmail';
    const EMAIL_TYPE_CER_CONTRACT_LOSS_EMAIL = 'CERContractLossEmail';
    const EMAIL_TYPE_METER_READING_CALCULATED_EMAIL = 'MeterReadingCalculatedEmail';
    const EMAIL_TYPE_METER_SWITCH_EMAIL = 'MeterSwitchEmail';
    const EMAIL_TYPE_SWITCH_SENT_EMAIL = 'SwitchSentEmail';
    const EMAIL_TYPE_MOVE_PROCESSED_EMAIL = 'MoveProcessedEmail';
    const EMAIL_TYPE_ENERGY_VKO_EMAIL = 'EnergyVKOEmail';
    const EMAIL_TYPE_ENERGY_PURCHASE_CORRECTION_SETTLEMENT_INVOICE_EMAIL = 'EnergyPurchaseCorrectionSettlementInvoiceEmail';
    const EMAIL_TYPE_CERTIFICATE_SALE_INVOICE_EMAIL = 'CertificateSaleInvoiceEmail';
    const EMAIL_TYPE_CONTRACT_CANCELLED_EMAIL = 'ContractCancelledEmail';
    const EMAIL_TYPE_MANDATE_PAYMENT_REQUEST_EMAIL = 'MandatePaymentRequestEmail';
    const EMAIL_TYPE_RECONCILIATION_INVOICE_EMAIL = 'ReconciliationInvoiceEmail';
    const EMAIL_TYPE_CER_CONTRACT_CANCELLATION_SENT_EMAIL = 'CERContractCancellationSentEmail';
    const STATUS_CREATED = 'Created';
    const STATUS_SENT = 'Sent';
    const STATUS_ERROR = 'Error';
    const STATUS_REJECTED = 'Rejected';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEmailTypeAllowableValues()
    {
        return [
            self::EMAIL_TYPE_WELCOME_EMAIL,
            self::EMAIL_TYPE_SETTLEMENT_INVOICE_EMAIL,
            self::EMAIL_TYPE_ADVANCE_PAYMENT_INVOICE_EMAIL,
            self::EMAIL_TYPE_PRODUCER_SETTLEMENT_INVOICE_EMAIL,
            self::EMAIL_TYPE_LOCATION_OWNER_INVOICE_EMAIL,
            self::EMAIL_TYPE_MSP_INVOICE_EMAIL,
            self::EMAIL_TYPE_ENERGY_PURCHASE_SETTLEMENT_INVOICE_EMAIL,
            self::EMAIL_TYPE_PURCHASE_TERMINATION_FEE_INVOICE_EMAIL,
            self::EMAIL_TYPE_PURCHASE_DEPOSIT_INVOICE_EMAIL,
            self::EMAIL_TYPE_CUSTOM_INVOICE_EMAIL,
            self::EMAIL_TYPE_METER_READING_REQUEST_EMAIL,
            self::EMAIL_TYPE_NEW_ADVANCE_PAYMENT_EMAIL,
            self::EMAIL_TYPE_COOLING_DOWN_PERIOD_FINISHED_EMAIL,
            self::EMAIL_TYPE_CREATE_CONTRACT_RETENTION_EMAIL,
            self::EMAIL_TYPE_CONTRACT_AUTO_RENEWED_EMAIL,
            self::EMAIL_TYPE_LOSS_PROCESSED_EMAIL,
            self::EMAIL_TYPE_CER_CONTRACT_LOSS_EMAIL,
            self::EMAIL_TYPE_METER_READING_CALCULATED_EMAIL,
            self::EMAIL_TYPE_METER_SWITCH_EMAIL,
            self::EMAIL_TYPE_SWITCH_SENT_EMAIL,
            self::EMAIL_TYPE_MOVE_PROCESSED_EMAIL,
            self::EMAIL_TYPE_ENERGY_VKO_EMAIL,
            self::EMAIL_TYPE_ENERGY_PURCHASE_CORRECTION_SETTLEMENT_INVOICE_EMAIL,
            self::EMAIL_TYPE_CERTIFICATE_SALE_INVOICE_EMAIL,
            self::EMAIL_TYPE_CONTRACT_CANCELLED_EMAIL,
            self::EMAIL_TYPE_MANDATE_PAYMENT_REQUEST_EMAIL,
            self::EMAIL_TYPE_RECONCILIATION_INVOICE_EMAIL,
            self::EMAIL_TYPE_CER_CONTRACT_CANCELLATION_SENT_EMAIL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_CREATED,
            self::STATUS_SENT,
            self::STATUS_ERROR,
            self::STATUS_REJECTED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email_id'] = isset($data['email_id']) ? $data['email_id'] : null;
        $this->container['email_type'] = isset($data['email_type']) ? $data['email_type'] : null;
        $this->container['email_type_localized'] = isset($data['email_type_localized']) ? $data['email_type_localized'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['date_sent'] = isset($data['date_sent']) ? $data['date_sent'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['cc'] = isset($data['cc']) ? $data['cc'] : null;
        $this->container['text_body'] = isset($data['text_body']) ? $data['text_body'] : null;
        $this->container['html_body'] = isset($data['html_body']) ? $data['html_body'] : null;
        $this->container['product_group_id'] = isset($data['product_group_id']) ? $data['product_group_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_localized'] = isset($data['status_localized']) ? $data['status_localized'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEmailTypeAllowableValues();
        if (!is_null($this->container['email_type']) && !in_array($this->container['email_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'email_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email_id
     *
     * @return string
     */
    public function getEmailId()
    {
        return $this->container['email_id'];
    }

    /**
     * Sets email_id
     *
     * @param string $email_id email_id
     *
     * @return $this
     */
    public function setEmailId($email_id)
    {
        $this->container['email_id'] = $email_id;

        return $this;
    }

    /**
     * Gets email_type
     *
     * @return string
     */
    public function getEmailType()
    {
        return $this->container['email_type'];
    }

    /**
     * Sets email_type
     *
     * @param string $email_type email_type
     *
     * @return $this
     */
    public function setEmailType($email_type)
    {
        $allowedValues = $this->getEmailTypeAllowableValues();
        if (!is_null($email_type) && !in_array($email_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'email_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['email_type'] = $email_type;

        return $this;
    }

    /**
     * Gets email_type_localized
     *
     * @return string
     */
    public function getEmailTypeLocalized()
    {
        return $this->container['email_type_localized'];
    }

    /**
     * Sets email_type_localized
     *
     * @param string $email_type_localized email_type_localized
     *
     * @return $this
     */
    public function setEmailTypeLocalized($email_type_localized)
    {
        $this->container['email_type_localized'] = $email_type_localized;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime $date_created date_created
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_sent
     *
     * @return \DateTime
     */
    public function getDateSent()
    {
        return $this->container['date_sent'];
    }

    /**
     * Sets date_sent
     *
     * @param \DateTime $date_sent date_sent
     *
     * @return $this
     */
    public function setDateSent($date_sent)
    {
        $this->container['date_sent'] = $date_sent;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject subject
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string $from from
     *
     * @return $this
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string $to to
     *
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets cc
     *
     * @return string[]
     */
    public function getCc()
    {
        return $this->container['cc'];
    }

    /**
     * Sets cc
     *
     * @param string[] $cc cc
     *
     * @return $this
     */
    public function setCc($cc)
    {
        $this->container['cc'] = $cc;

        return $this;
    }

    /**
     * Gets text_body
     *
     * @return string
     */
    public function getTextBody()
    {
        return $this->container['text_body'];
    }

    /**
     * Sets text_body
     *
     * @param string $text_body text_body
     *
     * @return $this
     */
    public function setTextBody($text_body)
    {
        $this->container['text_body'] = $text_body;

        return $this;
    }

    /**
     * Gets html_body
     *
     * @return string
     */
    public function getHtmlBody()
    {
        return $this->container['html_body'];
    }

    /**
     * Sets html_body
     *
     * @param string $html_body html_body
     *
     * @return $this
     */
    public function setHtmlBody($html_body)
    {
        $this->container['html_body'] = $html_body;

        return $this;
    }

    /**
     * Gets product_group_id
     *
     * @return string
     */
    public function getProductGroupId()
    {
        return $this->container['product_group_id'];
    }

    /**
     * Sets product_group_id
     *
     * @param string $product_group_id product_group_id
     *
     * @return $this
     */
    public function setProductGroupId($product_group_id)
    {
        $this->container['product_group_id'] = $product_group_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_localized
     *
     * @return string
     */
    public function getStatusLocalized()
    {
        return $this->container['status_localized'];
    }

    /**
     * Sets status_localized
     *
     * @param string $status_localized status_localized
     *
     * @return $this
     */
    public function setStatusLocalized($status_localized)
    {
        $this->container['status_localized'] = $status_localized;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiDocument[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceApiDocument[] $attachments attachments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


