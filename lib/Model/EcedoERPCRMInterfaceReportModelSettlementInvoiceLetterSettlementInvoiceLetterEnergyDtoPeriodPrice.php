<?php
/**
 * EcedoERPCRMInterfaceReportModelSettlementInvoiceLetterSettlementInvoiceLetterEnergyDtoPeriodPrice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceReportModelSettlementInvoiceLetterSettlementInvoiceLetterEnergyDtoPeriodPrice Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceReportModelSettlementInvoiceLetterSettlementInvoiceLetterEnergyDtoPeriodPrice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.ReportModel.SettlementInvoiceLetter.SettlementInvoiceLetterEnergyDto_PeriodPrice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'period_price_id' => 'string',
        'period_price_meter_reading_id' => 'string',
        'period_price_range_begin' => 'int',
        'period_price_range_end' => 'int',
        'period_price_range_description' => 'string',
        'period_price_prices_high_total_taxed' => 'double',
        'period_price_prices_low_total_taxed' => 'double',
        'period_price_prices_single_total_taxed' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'period_price_id' => null,
        'period_price_meter_reading_id' => null,
        'period_price_range_begin' => 'int32',
        'period_price_range_end' => 'int32',
        'period_price_range_description' => null,
        'period_price_prices_high_total_taxed' => 'double',
        'period_price_prices_low_total_taxed' => 'double',
        'period_price_prices_single_total_taxed' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'period_price_id' => 'PeriodPrice_Id',
        'period_price_meter_reading_id' => 'PeriodPrice_MeterReadingId',
        'period_price_range_begin' => 'PeriodPrice_Range_Begin',
        'period_price_range_end' => 'PeriodPrice_Range_End',
        'period_price_range_description' => 'PeriodPrice_Range_Description',
        'period_price_prices_high_total_taxed' => 'PeriodPrice_Prices_High_TotalTaxed',
        'period_price_prices_low_total_taxed' => 'PeriodPrice_Prices_Low_TotalTaxed',
        'period_price_prices_single_total_taxed' => 'PeriodPrice_Prices_Single_TotalTaxed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'period_price_id' => 'setPeriodPriceId',
        'period_price_meter_reading_id' => 'setPeriodPriceMeterReadingId',
        'period_price_range_begin' => 'setPeriodPriceRangeBegin',
        'period_price_range_end' => 'setPeriodPriceRangeEnd',
        'period_price_range_description' => 'setPeriodPriceRangeDescription',
        'period_price_prices_high_total_taxed' => 'setPeriodPricePricesHighTotalTaxed',
        'period_price_prices_low_total_taxed' => 'setPeriodPricePricesLowTotalTaxed',
        'period_price_prices_single_total_taxed' => 'setPeriodPricePricesSingleTotalTaxed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'period_price_id' => 'getPeriodPriceId',
        'period_price_meter_reading_id' => 'getPeriodPriceMeterReadingId',
        'period_price_range_begin' => 'getPeriodPriceRangeBegin',
        'period_price_range_end' => 'getPeriodPriceRangeEnd',
        'period_price_range_description' => 'getPeriodPriceRangeDescription',
        'period_price_prices_high_total_taxed' => 'getPeriodPricePricesHighTotalTaxed',
        'period_price_prices_low_total_taxed' => 'getPeriodPricePricesLowTotalTaxed',
        'period_price_prices_single_total_taxed' => 'getPeriodPricePricesSingleTotalTaxed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['period_price_id'] = isset($data['period_price_id']) ? $data['period_price_id'] : null;
        $this->container['period_price_meter_reading_id'] = isset($data['period_price_meter_reading_id']) ? $data['period_price_meter_reading_id'] : null;
        $this->container['period_price_range_begin'] = isset($data['period_price_range_begin']) ? $data['period_price_range_begin'] : null;
        $this->container['period_price_range_end'] = isset($data['period_price_range_end']) ? $data['period_price_range_end'] : null;
        $this->container['period_price_range_description'] = isset($data['period_price_range_description']) ? $data['period_price_range_description'] : null;
        $this->container['period_price_prices_high_total_taxed'] = isset($data['period_price_prices_high_total_taxed']) ? $data['period_price_prices_high_total_taxed'] : null;
        $this->container['period_price_prices_low_total_taxed'] = isset($data['period_price_prices_low_total_taxed']) ? $data['period_price_prices_low_total_taxed'] : null;
        $this->container['period_price_prices_single_total_taxed'] = isset($data['period_price_prices_single_total_taxed']) ? $data['period_price_prices_single_total_taxed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets period_price_id
     *
     * @return string
     */
    public function getPeriodPriceId()
    {
        return $this->container['period_price_id'];
    }

    /**
     * Sets period_price_id
     *
     * @param string $period_price_id period_price_id
     *
     * @return $this
     */
    public function setPeriodPriceId($period_price_id)
    {
        $this->container['period_price_id'] = $period_price_id;

        return $this;
    }

    /**
     * Gets period_price_meter_reading_id
     *
     * @return string
     */
    public function getPeriodPriceMeterReadingId()
    {
        return $this->container['period_price_meter_reading_id'];
    }

    /**
     * Sets period_price_meter_reading_id
     *
     * @param string $period_price_meter_reading_id period_price_meter_reading_id
     *
     * @return $this
     */
    public function setPeriodPriceMeterReadingId($period_price_meter_reading_id)
    {
        $this->container['period_price_meter_reading_id'] = $period_price_meter_reading_id;

        return $this;
    }

    /**
     * Gets period_price_range_begin
     *
     * @return int
     */
    public function getPeriodPriceRangeBegin()
    {
        return $this->container['period_price_range_begin'];
    }

    /**
     * Sets period_price_range_begin
     *
     * @param int $period_price_range_begin period_price_range_begin
     *
     * @return $this
     */
    public function setPeriodPriceRangeBegin($period_price_range_begin)
    {
        $this->container['period_price_range_begin'] = $period_price_range_begin;

        return $this;
    }

    /**
     * Gets period_price_range_end
     *
     * @return int
     */
    public function getPeriodPriceRangeEnd()
    {
        return $this->container['period_price_range_end'];
    }

    /**
     * Sets period_price_range_end
     *
     * @param int $period_price_range_end period_price_range_end
     *
     * @return $this
     */
    public function setPeriodPriceRangeEnd($period_price_range_end)
    {
        $this->container['period_price_range_end'] = $period_price_range_end;

        return $this;
    }

    /**
     * Gets period_price_range_description
     *
     * @return string
     */
    public function getPeriodPriceRangeDescription()
    {
        return $this->container['period_price_range_description'];
    }

    /**
     * Sets period_price_range_description
     *
     * @param string $period_price_range_description period_price_range_description
     *
     * @return $this
     */
    public function setPeriodPriceRangeDescription($period_price_range_description)
    {
        $this->container['period_price_range_description'] = $period_price_range_description;

        return $this;
    }

    /**
     * Gets period_price_prices_high_total_taxed
     *
     * @return double
     */
    public function getPeriodPricePricesHighTotalTaxed()
    {
        return $this->container['period_price_prices_high_total_taxed'];
    }

    /**
     * Sets period_price_prices_high_total_taxed
     *
     * @param double $period_price_prices_high_total_taxed period_price_prices_high_total_taxed
     *
     * @return $this
     */
    public function setPeriodPricePricesHighTotalTaxed($period_price_prices_high_total_taxed)
    {
        $this->container['period_price_prices_high_total_taxed'] = $period_price_prices_high_total_taxed;

        return $this;
    }

    /**
     * Gets period_price_prices_low_total_taxed
     *
     * @return double
     */
    public function getPeriodPricePricesLowTotalTaxed()
    {
        return $this->container['period_price_prices_low_total_taxed'];
    }

    /**
     * Sets period_price_prices_low_total_taxed
     *
     * @param double $period_price_prices_low_total_taxed period_price_prices_low_total_taxed
     *
     * @return $this
     */
    public function setPeriodPricePricesLowTotalTaxed($period_price_prices_low_total_taxed)
    {
        $this->container['period_price_prices_low_total_taxed'] = $period_price_prices_low_total_taxed;

        return $this;
    }

    /**
     * Gets period_price_prices_single_total_taxed
     *
     * @return double
     */
    public function getPeriodPricePricesSingleTotalTaxed()
    {
        return $this->container['period_price_prices_single_total_taxed'];
    }

    /**
     * Sets period_price_prices_single_total_taxed
     *
     * @param double $period_price_prices_single_total_taxed period_price_prices_single_total_taxed
     *
     * @return $this
     */
    public function setPeriodPricePricesSingleTotalTaxed($period_price_prices_single_total_taxed)
    {
        $this->container['period_price_prices_single_total_taxed'] = $period_price_prices_single_total_taxed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


