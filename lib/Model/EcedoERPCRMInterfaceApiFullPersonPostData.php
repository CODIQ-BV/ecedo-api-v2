<?php
/**
 * EcedoERPCRMInterfaceApiFullPersonPostData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiFullPersonPostData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiFullPersonPostData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.FullPersonPostData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'function' => 'string',
        'email_address' => 'string',
        'phone_number' => 'string',
        'mobile_number' => 'string',
        'product_groups' => 'string[]',
        'roles' => 'string[]',
        'roles_cc' => 'string[]',
        'gender' => 'string',
        'initials' => 'string',
        'first_name' => 'string',
        'infix' => 'string',
        'last_name' => 'string',
        'birth_date' => '\DateTime',
        'title' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'function' => null,
        'email_address' => null,
        'phone_number' => null,
        'mobile_number' => null,
        'product_groups' => null,
        'roles' => null,
        'roles_cc' => null,
        'gender' => null,
        'initials' => null,
        'first_name' => null,
        'infix' => null,
        'last_name' => null,
        'birth_date' => 'date',
        'title' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'function' => 'Function',
        'email_address' => 'EmailAddress',
        'phone_number' => 'PhoneNumber',
        'mobile_number' => 'MobileNumber',
        'product_groups' => 'ProductGroups',
        'roles' => 'Roles',
        'roles_cc' => 'RolesCC',
        'gender' => 'Gender',
        'initials' => 'Initials',
        'first_name' => 'FirstName',
        'infix' => 'Infix',
        'last_name' => 'LastName',
        'birth_date' => 'BirthDate',
        'title' => 'Title'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'function' => 'setFunction',
        'email_address' => 'setEmailAddress',
        'phone_number' => 'setPhoneNumber',
        'mobile_number' => 'setMobileNumber',
        'product_groups' => 'setProductGroups',
        'roles' => 'setRoles',
        'roles_cc' => 'setRolesCc',
        'gender' => 'setGender',
        'initials' => 'setInitials',
        'first_name' => 'setFirstName',
        'infix' => 'setInfix',
        'last_name' => 'setLastName',
        'birth_date' => 'setBirthDate',
        'title' => 'setTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'function' => 'getFunction',
        'email_address' => 'getEmailAddress',
        'phone_number' => 'getPhoneNumber',
        'mobile_number' => 'getMobileNumber',
        'product_groups' => 'getProductGroups',
        'roles' => 'getRoles',
        'roles_cc' => 'getRolesCc',
        'gender' => 'getGender',
        'initials' => 'getInitials',
        'first_name' => 'getFirstName',
        'infix' => 'getInfix',
        'last_name' => 'getLastName',
        'birth_date' => 'getBirthDate',
        'title' => 'getTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PRODUCT_GROUPS_ENERGIELEVERING = 'Energielevering';
    const PRODUCT_GROUPS_ZON = 'Zon';
    const PRODUCT_GROUPS_WIND = 'Wind';
    const PRODUCT_GROUPS_OBLIGATIE = 'Obligatie';
    const PRODUCT_GROUPS_PRODUCTIEMIDDEL = 'Productiemiddel';
    const PRODUCT_GROUPS_MEELIFT = 'Meelift';
    const PRODUCT_GROUPS_EXTERNE_OPWEK = 'ExterneOpwek';
    const PRODUCT_GROUPS_TANKKAART = 'Tankkaart';
    const PRODUCT_GROUPS_OPLAAD_PUNT_LOCATIE_EIGENAAR = 'OplaadPuntLocatieEigenaar';
    const PRODUCT_GROUPS_ONBALANS_FLEX = 'OnbalansFlex';
    const PRODUCT_GROUPS_LAADPAAL = 'Laadpaal';
    const PRODUCT_GROUPS_MSP = 'Msp';
    const PRODUCT_GROUPS_CPO = 'Cpo';
    const PRODUCT_GROUPS_RESELLER = 'Reseller';
    const ROLES_BILLING = 'Billing';
    const ROLES_METER_READINGS = 'MeterReadings';
    const ROLES_VKO = 'VKO';
    const ROLES_CC_BILLING = 'Billing';
    const ROLES_CC_METER_READINGS = 'MeterReadings';
    const ROLES_CC_VKO = 'VKO';
    const GENDER_MALE = 'Male';
    const GENDER_FEMALE = 'Female';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductGroupsAllowableValues()
    {
        return [
            self::PRODUCT_GROUPS_ENERGIELEVERING,
            self::PRODUCT_GROUPS_ZON,
            self::PRODUCT_GROUPS_WIND,
            self::PRODUCT_GROUPS_OBLIGATIE,
            self::PRODUCT_GROUPS_PRODUCTIEMIDDEL,
            self::PRODUCT_GROUPS_MEELIFT,
            self::PRODUCT_GROUPS_EXTERNE_OPWEK,
            self::PRODUCT_GROUPS_TANKKAART,
            self::PRODUCT_GROUPS_OPLAAD_PUNT_LOCATIE_EIGENAAR,
            self::PRODUCT_GROUPS_ONBALANS_FLEX,
            self::PRODUCT_GROUPS_LAADPAAL,
            self::PRODUCT_GROUPS_MSP,
            self::PRODUCT_GROUPS_CPO,
            self::PRODUCT_GROUPS_RESELLER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRolesAllowableValues()
    {
        return [
            self::ROLES_BILLING,
            self::ROLES_METER_READINGS,
            self::ROLES_VKO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRolesCcAllowableValues()
    {
        return [
            self::ROLES_CC_BILLING,
            self::ROLES_CC_METER_READINGS,
            self::ROLES_CC_VKO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_MALE,
            self::GENDER_FEMALE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['function'] = isset($data['function']) ? $data['function'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['mobile_number'] = isset($data['mobile_number']) ? $data['mobile_number'] : null;
        $this->container['product_groups'] = isset($data['product_groups']) ? $data['product_groups'] : null;
        $this->container['roles'] = isset($data['roles']) ? $data['roles'] : null;
        $this->container['roles_cc'] = isset($data['roles_cc']) ? $data['roles_cc'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['initials'] = isset($data['initials']) ? $data['initials'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['infix'] = isset($data['infix']) ? $data['infix'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['birth_date'] = isset($data['birth_date']) ? $data['birth_date'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'gender', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets function
     *
     * @return string
     */
    public function getFunction()
    {
        return $this->container['function'];
    }

    /**
     * Sets function
     *
     * @param string $function function
     *
     * @return $this
     */
    public function setFunction($function)
    {
        $this->container['function'] = $function;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address email_address
     *
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number phone_number
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets mobile_number
     *
     * @return string
     */
    public function getMobileNumber()
    {
        return $this->container['mobile_number'];
    }

    /**
     * Sets mobile_number
     *
     * @param string $mobile_number mobile_number
     *
     * @return $this
     */
    public function setMobileNumber($mobile_number)
    {
        $this->container['mobile_number'] = $mobile_number;

        return $this;
    }

    /**
     * Gets product_groups
     *
     * @return string[]
     */
    public function getProductGroups()
    {
        return $this->container['product_groups'];
    }

    /**
     * Sets product_groups
     *
     * @param string[] $product_groups product_groups
     *
     * @return $this
     */
    public function setProductGroups($product_groups)
    {
        $allowedValues = $this->getProductGroupsAllowableValues();
        if (!is_null($product_groups) && array_diff($product_groups, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'product_groups', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['product_groups'] = $product_groups;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return string[]
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param string[] $roles roles
     *
     * @return $this
     */
    public function setRoles($roles)
    {
        $allowedValues = $this->getRolesAllowableValues();
        if (!is_null($roles) && array_diff($roles, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'roles', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets roles_cc
     *
     * @return string[]
     */
    public function getRolesCc()
    {
        return $this->container['roles_cc'];
    }

    /**
     * Sets roles_cc
     *
     * @param string[] $roles_cc roles_cc
     *
     * @return $this
     */
    public function setRolesCc($roles_cc)
    {
        $allowedValues = $this->getRolesCcAllowableValues();
        if (!is_null($roles_cc) && array_diff($roles_cc, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'roles_cc', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['roles_cc'] = $roles_cc;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($gender) && !in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'gender', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets initials
     *
     * @return string
     */
    public function getInitials()
    {
        return $this->container['initials'];
    }

    /**
     * Sets initials
     *
     * @param string $initials initials
     *
     * @return $this
     */
    public function setInitials($initials)
    {
        $this->container['initials'] = $initials;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets infix
     *
     * @return string
     */
    public function getInfix()
    {
        return $this->container['infix'];
    }

    /**
     * Sets infix
     *
     * @param string $infix infix
     *
     * @return $this
     */
    public function setInfix($infix)
    {
        $this->container['infix'] = $infix;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return \DateTime
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param \DateTime $birth_date birth_date
     *
     * @return $this
     */
    public function setBirthDate($birth_date)
    {
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


