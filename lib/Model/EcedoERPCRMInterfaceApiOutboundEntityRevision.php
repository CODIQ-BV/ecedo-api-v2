<?php
/**
 * EcedoERPCRMInterfaceApiOutboundEntityRevision
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiOutboundEntityRevision Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiOutboundEntityRevision implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.ApiOutbound.EntityRevision';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'domain_entity_type' => 'string',
        'domain_entity_id' => 'string',
        'organization_id' => 'string',
        'changed_on' => '\DateTime',
        'sub_type' => 'string',
        'change_type' => 'string',
        'change_type_localized' => 'string',
        'sync_push_failed' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'domain_entity_type' => null,
        'domain_entity_id' => null,
        'organization_id' => 'uuid',
        'changed_on' => 'date-time',
        'sub_type' => null,
        'change_type' => null,
        'change_type_localized' => null,
        'sync_push_failed' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'domain_entity_type' => 'DomainEntityType',
        'domain_entity_id' => 'DomainEntityId',
        'organization_id' => 'OrganizationId',
        'changed_on' => 'ChangedOn',
        'sub_type' => 'SubType',
        'change_type' => 'ChangeType',
        'change_type_localized' => 'ChangeTypeLocalized',
        'sync_push_failed' => 'SyncPushFailed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'domain_entity_type' => 'setDomainEntityType',
        'domain_entity_id' => 'setDomainEntityId',
        'organization_id' => 'setOrganizationId',
        'changed_on' => 'setChangedOn',
        'sub_type' => 'setSubType',
        'change_type' => 'setChangeType',
        'change_type_localized' => 'setChangeTypeLocalized',
        'sync_push_failed' => 'setSyncPushFailed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'domain_entity_type' => 'getDomainEntityType',
        'domain_entity_id' => 'getDomainEntityId',
        'organization_id' => 'getOrganizationId',
        'changed_on' => 'getChangedOn',
        'sub_type' => 'getSubType',
        'change_type' => 'getChangeType',
        'change_type_localized' => 'getChangeTypeLocalized',
        'sync_push_failed' => 'getSyncPushFailed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['domain_entity_type'] = isset($data['domain_entity_type']) ? $data['domain_entity_type'] : null;
        $this->container['domain_entity_id'] = isset($data['domain_entity_id']) ? $data['domain_entity_id'] : null;
        $this->container['organization_id'] = isset($data['organization_id']) ? $data['organization_id'] : null;
        $this->container['changed_on'] = isset($data['changed_on']) ? $data['changed_on'] : null;
        $this->container['sub_type'] = isset($data['sub_type']) ? $data['sub_type'] : null;
        $this->container['change_type'] = isset($data['change_type']) ? $data['change_type'] : null;
        $this->container['change_type_localized'] = isset($data['change_type_localized']) ? $data['change_type_localized'] : null;
        $this->container['sync_push_failed'] = isset($data['sync_push_failed']) ? $data['sync_push_failed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets domain_entity_type
     *
     * @return string
     */
    public function getDomainEntityType()
    {
        return $this->container['domain_entity_type'];
    }

    /**
     * Sets domain_entity_type
     *
     * @param string $domain_entity_type domain_entity_type
     *
     * @return $this
     */
    public function setDomainEntityType($domain_entity_type)
    {
        $this->container['domain_entity_type'] = $domain_entity_type;

        return $this;
    }

    /**
     * Gets domain_entity_id
     *
     * @return string
     */
    public function getDomainEntityId()
    {
        return $this->container['domain_entity_id'];
    }

    /**
     * Sets domain_entity_id
     *
     * @param string $domain_entity_id domain_entity_id
     *
     * @return $this
     */
    public function setDomainEntityId($domain_entity_id)
    {
        $this->container['domain_entity_id'] = $domain_entity_id;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return string
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param string $organization_id organization_id
     *
     * @return $this
     */
    public function setOrganizationId($organization_id)
    {
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets changed_on
     *
     * @return \DateTime
     */
    public function getChangedOn()
    {
        return $this->container['changed_on'];
    }

    /**
     * Sets changed_on
     *
     * @param \DateTime $changed_on changed_on
     *
     * @return $this
     */
    public function setChangedOn($changed_on)
    {
        $this->container['changed_on'] = $changed_on;

        return $this;
    }

    /**
     * Gets sub_type
     *
     * @return string
     */
    public function getSubType()
    {
        return $this->container['sub_type'];
    }

    /**
     * Sets sub_type
     *
     * @param string $sub_type sub_type
     *
     * @return $this
     */
    public function setSubType($sub_type)
    {
        $this->container['sub_type'] = $sub_type;

        return $this;
    }

    /**
     * Gets change_type
     *
     * @return string
     */
    public function getChangeType()
    {
        return $this->container['change_type'];
    }

    /**
     * Sets change_type
     *
     * @param string $change_type change_type
     *
     * @return $this
     */
    public function setChangeType($change_type)
    {
        $this->container['change_type'] = $change_type;

        return $this;
    }

    /**
     * Gets change_type_localized
     *
     * @return string
     */
    public function getChangeTypeLocalized()
    {
        return $this->container['change_type_localized'];
    }

    /**
     * Sets change_type_localized
     *
     * @param string $change_type_localized change_type_localized
     *
     * @return $this
     */
    public function setChangeTypeLocalized($change_type_localized)
    {
        $this->container['change_type_localized'] = $change_type_localized;

        return $this;
    }

    /**
     * Gets sync_push_failed
     *
     * @return bool
     */
    public function getSyncPushFailed()
    {
        return $this->container['sync_push_failed'];
    }

    /**
     * Sets sync_push_failed
     *
     * @param bool $sync_push_failed sync_push_failed
     *
     * @return $this
     */
    public function setSyncPushFailed($sync_push_failed)
    {
        $this->container['sync_push_failed'] = $sync_push_failed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


