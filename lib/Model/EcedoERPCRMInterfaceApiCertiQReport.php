<?php
/**
 * EcedoERPCRMInterfaceApiCertiQReport
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiCertiQReport Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiCertiQReport implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.CertiQReport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'certi_q_report_id' => 'string',
        'report_date' => '\DateTime',
        'klantnummer' => 'string',
        'organisatie' => 'string',
        'productiemiddel' => 'string',
        'reference' => 'string',
        'productie_type' => 'string',
        'certiq_eans' => 'string',
        'producer_reference' => 'string',
        'total_gain' => 'double',
        'issue_gain' => 'double',
        'export_gain' => 'double',
        'transfer_gain' => 'double',
        'total_loss' => 'double',
        'cancel_loss' => 'double',
        'expiry_loss' => 'double',
        'export_loss' => 'double',
        'transfer_loss' => 'double',
        'withdrawal_loss' => 'double',
        'open_certificates' => 'double',
        'invoiced_customer_usage' => 'double',
        'proposal_to_redeemen' => 'double',
        'certificates_about_to_expire' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'certi_q_report_id' => null,
        'report_date' => 'date-time',
        'klantnummer' => null,
        'organisatie' => null,
        'productiemiddel' => null,
        'reference' => null,
        'productie_type' => null,
        'certiq_eans' => null,
        'producer_reference' => null,
        'total_gain' => 'double',
        'issue_gain' => 'double',
        'export_gain' => 'double',
        'transfer_gain' => 'double',
        'total_loss' => 'double',
        'cancel_loss' => 'double',
        'expiry_loss' => 'double',
        'export_loss' => 'double',
        'transfer_loss' => 'double',
        'withdrawal_loss' => 'double',
        'open_certificates' => 'double',
        'invoiced_customer_usage' => 'double',
        'proposal_to_redeemen' => 'double',
        'certificates_about_to_expire' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'certi_q_report_id' => 'CertiQReportId',
        'report_date' => 'ReportDate',
        'klantnummer' => 'Klantnummer',
        'organisatie' => 'Organisatie',
        'productiemiddel' => 'Productiemiddel',
        'reference' => 'Reference',
        'productie_type' => 'ProductieType',
        'certiq_eans' => 'CertiqEANs',
        'producer_reference' => 'ProducerReference',
        'total_gain' => 'TotalGain',
        'issue_gain' => 'IssueGain',
        'export_gain' => 'ExportGain',
        'transfer_gain' => 'TransferGain',
        'total_loss' => 'TotalLoss',
        'cancel_loss' => 'CancelLoss',
        'expiry_loss' => 'ExpiryLoss',
        'export_loss' => 'ExportLoss',
        'transfer_loss' => 'TransferLoss',
        'withdrawal_loss' => 'WithdrawalLoss',
        'open_certificates' => 'OpenCertificates',
        'invoiced_customer_usage' => 'InvoicedCustomerUsage',
        'proposal_to_redeemen' => 'ProposalToRedeemen',
        'certificates_about_to_expire' => 'CertificatesAboutToExpire'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'certi_q_report_id' => 'setCertiQReportId',
        'report_date' => 'setReportDate',
        'klantnummer' => 'setKlantnummer',
        'organisatie' => 'setOrganisatie',
        'productiemiddel' => 'setProductiemiddel',
        'reference' => 'setReference',
        'productie_type' => 'setProductieType',
        'certiq_eans' => 'setCertiqEans',
        'producer_reference' => 'setProducerReference',
        'total_gain' => 'setTotalGain',
        'issue_gain' => 'setIssueGain',
        'export_gain' => 'setExportGain',
        'transfer_gain' => 'setTransferGain',
        'total_loss' => 'setTotalLoss',
        'cancel_loss' => 'setCancelLoss',
        'expiry_loss' => 'setExpiryLoss',
        'export_loss' => 'setExportLoss',
        'transfer_loss' => 'setTransferLoss',
        'withdrawal_loss' => 'setWithdrawalLoss',
        'open_certificates' => 'setOpenCertificates',
        'invoiced_customer_usage' => 'setInvoicedCustomerUsage',
        'proposal_to_redeemen' => 'setProposalToRedeemen',
        'certificates_about_to_expire' => 'setCertificatesAboutToExpire'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'certi_q_report_id' => 'getCertiQReportId',
        'report_date' => 'getReportDate',
        'klantnummer' => 'getKlantnummer',
        'organisatie' => 'getOrganisatie',
        'productiemiddel' => 'getProductiemiddel',
        'reference' => 'getReference',
        'productie_type' => 'getProductieType',
        'certiq_eans' => 'getCertiqEans',
        'producer_reference' => 'getProducerReference',
        'total_gain' => 'getTotalGain',
        'issue_gain' => 'getIssueGain',
        'export_gain' => 'getExportGain',
        'transfer_gain' => 'getTransferGain',
        'total_loss' => 'getTotalLoss',
        'cancel_loss' => 'getCancelLoss',
        'expiry_loss' => 'getExpiryLoss',
        'export_loss' => 'getExportLoss',
        'transfer_loss' => 'getTransferLoss',
        'withdrawal_loss' => 'getWithdrawalLoss',
        'open_certificates' => 'getOpenCertificates',
        'invoiced_customer_usage' => 'getInvoicedCustomerUsage',
        'proposal_to_redeemen' => 'getProposalToRedeemen',
        'certificates_about_to_expire' => 'getCertificatesAboutToExpire'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['certi_q_report_id'] = isset($data['certi_q_report_id']) ? $data['certi_q_report_id'] : null;
        $this->container['report_date'] = isset($data['report_date']) ? $data['report_date'] : null;
        $this->container['klantnummer'] = isset($data['klantnummer']) ? $data['klantnummer'] : null;
        $this->container['organisatie'] = isset($data['organisatie']) ? $data['organisatie'] : null;
        $this->container['productiemiddel'] = isset($data['productiemiddel']) ? $data['productiemiddel'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['productie_type'] = isset($data['productie_type']) ? $data['productie_type'] : null;
        $this->container['certiq_eans'] = isset($data['certiq_eans']) ? $data['certiq_eans'] : null;
        $this->container['producer_reference'] = isset($data['producer_reference']) ? $data['producer_reference'] : null;
        $this->container['total_gain'] = isset($data['total_gain']) ? $data['total_gain'] : null;
        $this->container['issue_gain'] = isset($data['issue_gain']) ? $data['issue_gain'] : null;
        $this->container['export_gain'] = isset($data['export_gain']) ? $data['export_gain'] : null;
        $this->container['transfer_gain'] = isset($data['transfer_gain']) ? $data['transfer_gain'] : null;
        $this->container['total_loss'] = isset($data['total_loss']) ? $data['total_loss'] : null;
        $this->container['cancel_loss'] = isset($data['cancel_loss']) ? $data['cancel_loss'] : null;
        $this->container['expiry_loss'] = isset($data['expiry_loss']) ? $data['expiry_loss'] : null;
        $this->container['export_loss'] = isset($data['export_loss']) ? $data['export_loss'] : null;
        $this->container['transfer_loss'] = isset($data['transfer_loss']) ? $data['transfer_loss'] : null;
        $this->container['withdrawal_loss'] = isset($data['withdrawal_loss']) ? $data['withdrawal_loss'] : null;
        $this->container['open_certificates'] = isset($data['open_certificates']) ? $data['open_certificates'] : null;
        $this->container['invoiced_customer_usage'] = isset($data['invoiced_customer_usage']) ? $data['invoiced_customer_usage'] : null;
        $this->container['proposal_to_redeemen'] = isset($data['proposal_to_redeemen']) ? $data['proposal_to_redeemen'] : null;
        $this->container['certificates_about_to_expire'] = isset($data['certificates_about_to_expire']) ? $data['certificates_about_to_expire'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets certi_q_report_id
     *
     * @return string
     */
    public function getCertiQReportId()
    {
        return $this->container['certi_q_report_id'];
    }

    /**
     * Sets certi_q_report_id
     *
     * @param string $certi_q_report_id certi_q_report_id
     *
     * @return $this
     */
    public function setCertiQReportId($certi_q_report_id)
    {
        $this->container['certi_q_report_id'] = $certi_q_report_id;

        return $this;
    }

    /**
     * Gets report_date
     *
     * @return \DateTime
     */
    public function getReportDate()
    {
        return $this->container['report_date'];
    }

    /**
     * Sets report_date
     *
     * @param \DateTime $report_date report_date
     *
     * @return $this
     */
    public function setReportDate($report_date)
    {
        $this->container['report_date'] = $report_date;

        return $this;
    }

    /**
     * Gets klantnummer
     *
     * @return string
     */
    public function getKlantnummer()
    {
        return $this->container['klantnummer'];
    }

    /**
     * Sets klantnummer
     *
     * @param string $klantnummer klantnummer
     *
     * @return $this
     */
    public function setKlantnummer($klantnummer)
    {
        $this->container['klantnummer'] = $klantnummer;

        return $this;
    }

    /**
     * Gets organisatie
     *
     * @return string
     */
    public function getOrganisatie()
    {
        return $this->container['organisatie'];
    }

    /**
     * Sets organisatie
     *
     * @param string $organisatie organisatie
     *
     * @return $this
     */
    public function setOrganisatie($organisatie)
    {
        $this->container['organisatie'] = $organisatie;

        return $this;
    }

    /**
     * Gets productiemiddel
     *
     * @return string
     */
    public function getProductiemiddel()
    {
        return $this->container['productiemiddel'];
    }

    /**
     * Sets productiemiddel
     *
     * @param string $productiemiddel productiemiddel
     *
     * @return $this
     */
    public function setProductiemiddel($productiemiddel)
    {
        $this->container['productiemiddel'] = $productiemiddel;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets productie_type
     *
     * @return string
     */
    public function getProductieType()
    {
        return $this->container['productie_type'];
    }

    /**
     * Sets productie_type
     *
     * @param string $productie_type productie_type
     *
     * @return $this
     */
    public function setProductieType($productie_type)
    {
        $this->container['productie_type'] = $productie_type;

        return $this;
    }

    /**
     * Gets certiq_eans
     *
     * @return string
     */
    public function getCertiqEans()
    {
        return $this->container['certiq_eans'];
    }

    /**
     * Sets certiq_eans
     *
     * @param string $certiq_eans certiq_eans
     *
     * @return $this
     */
    public function setCertiqEans($certiq_eans)
    {
        $this->container['certiq_eans'] = $certiq_eans;

        return $this;
    }

    /**
     * Gets producer_reference
     *
     * @return string
     */
    public function getProducerReference()
    {
        return $this->container['producer_reference'];
    }

    /**
     * Sets producer_reference
     *
     * @param string $producer_reference producer_reference
     *
     * @return $this
     */
    public function setProducerReference($producer_reference)
    {
        $this->container['producer_reference'] = $producer_reference;

        return $this;
    }

    /**
     * Gets total_gain
     *
     * @return double
     */
    public function getTotalGain()
    {
        return $this->container['total_gain'];
    }

    /**
     * Sets total_gain
     *
     * @param double $total_gain total_gain
     *
     * @return $this
     */
    public function setTotalGain($total_gain)
    {
        $this->container['total_gain'] = $total_gain;

        return $this;
    }

    /**
     * Gets issue_gain
     *
     * @return double
     */
    public function getIssueGain()
    {
        return $this->container['issue_gain'];
    }

    /**
     * Sets issue_gain
     *
     * @param double $issue_gain issue_gain
     *
     * @return $this
     */
    public function setIssueGain($issue_gain)
    {
        $this->container['issue_gain'] = $issue_gain;

        return $this;
    }

    /**
     * Gets export_gain
     *
     * @return double
     */
    public function getExportGain()
    {
        return $this->container['export_gain'];
    }

    /**
     * Sets export_gain
     *
     * @param double $export_gain export_gain
     *
     * @return $this
     */
    public function setExportGain($export_gain)
    {
        $this->container['export_gain'] = $export_gain;

        return $this;
    }

    /**
     * Gets transfer_gain
     *
     * @return double
     */
    public function getTransferGain()
    {
        return $this->container['transfer_gain'];
    }

    /**
     * Sets transfer_gain
     *
     * @param double $transfer_gain transfer_gain
     *
     * @return $this
     */
    public function setTransferGain($transfer_gain)
    {
        $this->container['transfer_gain'] = $transfer_gain;

        return $this;
    }

    /**
     * Gets total_loss
     *
     * @return double
     */
    public function getTotalLoss()
    {
        return $this->container['total_loss'];
    }

    /**
     * Sets total_loss
     *
     * @param double $total_loss total_loss
     *
     * @return $this
     */
    public function setTotalLoss($total_loss)
    {
        $this->container['total_loss'] = $total_loss;

        return $this;
    }

    /**
     * Gets cancel_loss
     *
     * @return double
     */
    public function getCancelLoss()
    {
        return $this->container['cancel_loss'];
    }

    /**
     * Sets cancel_loss
     *
     * @param double $cancel_loss cancel_loss
     *
     * @return $this
     */
    public function setCancelLoss($cancel_loss)
    {
        $this->container['cancel_loss'] = $cancel_loss;

        return $this;
    }

    /**
     * Gets expiry_loss
     *
     * @return double
     */
    public function getExpiryLoss()
    {
        return $this->container['expiry_loss'];
    }

    /**
     * Sets expiry_loss
     *
     * @param double $expiry_loss expiry_loss
     *
     * @return $this
     */
    public function setExpiryLoss($expiry_loss)
    {
        $this->container['expiry_loss'] = $expiry_loss;

        return $this;
    }

    /**
     * Gets export_loss
     *
     * @return double
     */
    public function getExportLoss()
    {
        return $this->container['export_loss'];
    }

    /**
     * Sets export_loss
     *
     * @param double $export_loss export_loss
     *
     * @return $this
     */
    public function setExportLoss($export_loss)
    {
        $this->container['export_loss'] = $export_loss;

        return $this;
    }

    /**
     * Gets transfer_loss
     *
     * @return double
     */
    public function getTransferLoss()
    {
        return $this->container['transfer_loss'];
    }

    /**
     * Sets transfer_loss
     *
     * @param double $transfer_loss transfer_loss
     *
     * @return $this
     */
    public function setTransferLoss($transfer_loss)
    {
        $this->container['transfer_loss'] = $transfer_loss;

        return $this;
    }

    /**
     * Gets withdrawal_loss
     *
     * @return double
     */
    public function getWithdrawalLoss()
    {
        return $this->container['withdrawal_loss'];
    }

    /**
     * Sets withdrawal_loss
     *
     * @param double $withdrawal_loss withdrawal_loss
     *
     * @return $this
     */
    public function setWithdrawalLoss($withdrawal_loss)
    {
        $this->container['withdrawal_loss'] = $withdrawal_loss;

        return $this;
    }

    /**
     * Gets open_certificates
     *
     * @return double
     */
    public function getOpenCertificates()
    {
        return $this->container['open_certificates'];
    }

    /**
     * Sets open_certificates
     *
     * @param double $open_certificates open_certificates
     *
     * @return $this
     */
    public function setOpenCertificates($open_certificates)
    {
        $this->container['open_certificates'] = $open_certificates;

        return $this;
    }

    /**
     * Gets invoiced_customer_usage
     *
     * @return double
     */
    public function getInvoicedCustomerUsage()
    {
        return $this->container['invoiced_customer_usage'];
    }

    /**
     * Sets invoiced_customer_usage
     *
     * @param double $invoiced_customer_usage invoiced_customer_usage
     *
     * @return $this
     */
    public function setInvoicedCustomerUsage($invoiced_customer_usage)
    {
        $this->container['invoiced_customer_usage'] = $invoiced_customer_usage;

        return $this;
    }

    /**
     * Gets proposal_to_redeemen
     *
     * @return double
     */
    public function getProposalToRedeemen()
    {
        return $this->container['proposal_to_redeemen'];
    }

    /**
     * Sets proposal_to_redeemen
     *
     * @param double $proposal_to_redeemen proposal_to_redeemen
     *
     * @return $this
     */
    public function setProposalToRedeemen($proposal_to_redeemen)
    {
        $this->container['proposal_to_redeemen'] = $proposal_to_redeemen;

        return $this;
    }

    /**
     * Gets certificates_about_to_expire
     *
     * @return double
     */
    public function getCertificatesAboutToExpire()
    {
        return $this->container['certificates_about_to_expire'];
    }

    /**
     * Sets certificates_about_to_expire
     *
     * @param double $certificates_about_to_expire certificates_about_to_expire
     *
     * @return $this
     */
    public function setCertificatesAboutToExpire($certificates_about_to_expire)
    {
        $this->container['certificates_about_to_expire'] = $certificates_about_to_expire;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


