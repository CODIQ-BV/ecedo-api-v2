<?php
/**
 * EcedoERPCRMInterfaceApiEntityPropertyDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiEntityPropertyDefinition Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiEntityPropertyDefinition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.EntityPropertyDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'entity_type' => 'string',
        'entity_type_localized' => 'string',
        'entity_sub_type' => 'string',
        'property_name' => 'string',
        'property_description' => 'string',
        'value_type' => 'string',
        'list_of_values' => 'string[]',
        'required' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'entity_type' => null,
        'entity_type_localized' => null,
        'entity_sub_type' => null,
        'property_name' => null,
        'property_description' => null,
        'value_type' => null,
        'list_of_values' => null,
        'required' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entity_type' => 'EntityType',
        'entity_type_localized' => 'EntityTypeLocalized',
        'entity_sub_type' => 'EntitySubType',
        'property_name' => 'PropertyName',
        'property_description' => 'PropertyDescription',
        'value_type' => 'ValueType',
        'list_of_values' => 'ListOfValues',
        'required' => 'Required'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entity_type' => 'setEntityType',
        'entity_type_localized' => 'setEntityTypeLocalized',
        'entity_sub_type' => 'setEntitySubType',
        'property_name' => 'setPropertyName',
        'property_description' => 'setPropertyDescription',
        'value_type' => 'setValueType',
        'list_of_values' => 'setListOfValues',
        'required' => 'setRequired'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entity_type' => 'getEntityType',
        'entity_type_localized' => 'getEntityTypeLocalized',
        'entity_sub_type' => 'getEntitySubType',
        'property_name' => 'getPropertyName',
        'property_description' => 'getPropertyDescription',
        'value_type' => 'getValueType',
        'list_of_values' => 'getListOfValues',
        'required' => 'getRequired'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ENTITY_TYPE_MEANS_OF_PRODUCTION = 'MeansOfProduction';
    const ENTITY_TYPE_EV_CHARGER = 'EvCharger';
    const ENTITY_TYPE_MEANS_OF_PRODUCTION_CONNECTION = 'MeansOfProductionConnection';
    const ENTITY_TYPE_PROPOSITION = 'Proposition';
    const ENTITY_TYPE_INVOICE = 'Invoice';
    const VALUE_TYPE_ENUM = 'Enum';
    const VALUE_TYPE_STRING = 'String';
    const VALUE_TYPE_INT = 'Int';
    const VALUE_TYPE_BOOL = 'Bool';
    const VALUE_TYPE_DATE_TIME = 'DateTime';
    const VALUE_TYPE_DECIMAL = 'Decimal';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEntityTypeAllowableValues()
    {
        return [
            self::ENTITY_TYPE_MEANS_OF_PRODUCTION,
            self::ENTITY_TYPE_EV_CHARGER,
            self::ENTITY_TYPE_MEANS_OF_PRODUCTION_CONNECTION,
            self::ENTITY_TYPE_PROPOSITION,
            self::ENTITY_TYPE_INVOICE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getValueTypeAllowableValues()
    {
        return [
            self::VALUE_TYPE_ENUM,
            self::VALUE_TYPE_STRING,
            self::VALUE_TYPE_INT,
            self::VALUE_TYPE_BOOL,
            self::VALUE_TYPE_DATE_TIME,
            self::VALUE_TYPE_DECIMAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['entity_type'] = isset($data['entity_type']) ? $data['entity_type'] : null;
        $this->container['entity_type_localized'] = isset($data['entity_type_localized']) ? $data['entity_type_localized'] : null;
        $this->container['entity_sub_type'] = isset($data['entity_sub_type']) ? $data['entity_sub_type'] : null;
        $this->container['property_name'] = isset($data['property_name']) ? $data['property_name'] : null;
        $this->container['property_description'] = isset($data['property_description']) ? $data['property_description'] : null;
        $this->container['value_type'] = isset($data['value_type']) ? $data['value_type'] : null;
        $this->container['list_of_values'] = isset($data['list_of_values']) ? $data['list_of_values'] : null;
        $this->container['required'] = isset($data['required']) ? $data['required'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEntityTypeAllowableValues();
        if (!is_null($this->container['entity_type']) && !in_array($this->container['entity_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'entity_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getValueTypeAllowableValues();
        if (!is_null($this->container['value_type']) && !in_array($this->container['value_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'value_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entity_type
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entity_type'];
    }

    /**
     * Sets entity_type
     *
     * @param string $entity_type entity_type
     *
     * @return $this
     */
    public function setEntityType($entity_type)
    {
        $allowedValues = $this->getEntityTypeAllowableValues();
        if (!is_null($entity_type) && !in_array($entity_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'entity_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['entity_type'] = $entity_type;

        return $this;
    }

    /**
     * Gets entity_type_localized
     *
     * @return string
     */
    public function getEntityTypeLocalized()
    {
        return $this->container['entity_type_localized'];
    }

    /**
     * Sets entity_type_localized
     *
     * @param string $entity_type_localized entity_type_localized
     *
     * @return $this
     */
    public function setEntityTypeLocalized($entity_type_localized)
    {
        $this->container['entity_type_localized'] = $entity_type_localized;

        return $this;
    }

    /**
     * Gets entity_sub_type
     *
     * @return string
     */
    public function getEntitySubType()
    {
        return $this->container['entity_sub_type'];
    }

    /**
     * Sets entity_sub_type
     *
     * @param string $entity_sub_type entity_sub_type
     *
     * @return $this
     */
    public function setEntitySubType($entity_sub_type)
    {
        $this->container['entity_sub_type'] = $entity_sub_type;

        return $this;
    }

    /**
     * Gets property_name
     *
     * @return string
     */
    public function getPropertyName()
    {
        return $this->container['property_name'];
    }

    /**
     * Sets property_name
     *
     * @param string $property_name property_name
     *
     * @return $this
     */
    public function setPropertyName($property_name)
    {
        $this->container['property_name'] = $property_name;

        return $this;
    }

    /**
     * Gets property_description
     *
     * @return string
     */
    public function getPropertyDescription()
    {
        return $this->container['property_description'];
    }

    /**
     * Sets property_description
     *
     * @param string $property_description property_description
     *
     * @return $this
     */
    public function setPropertyDescription($property_description)
    {
        $this->container['property_description'] = $property_description;

        return $this;
    }

    /**
     * Gets value_type
     *
     * @return string
     */
    public function getValueType()
    {
        return $this->container['value_type'];
    }

    /**
     * Sets value_type
     *
     * @param string $value_type value_type
     *
     * @return $this
     */
    public function setValueType($value_type)
    {
        $allowedValues = $this->getValueTypeAllowableValues();
        if (!is_null($value_type) && !in_array($value_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'value_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['value_type'] = $value_type;

        return $this;
    }

    /**
     * Gets list_of_values
     *
     * @return string[]
     */
    public function getListOfValues()
    {
        return $this->container['list_of_values'];
    }

    /**
     * Sets list_of_values
     *
     * @param string[] $list_of_values list_of_values
     *
     * @return $this
     */
    public function setListOfValues($list_of_values)
    {
        $this->container['list_of_values'] = $list_of_values;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool $required required
     *
     * @return $this
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


