<?php
/**
 * EcedoERPCRMInterfaceApiInvoiceProcessRule
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiInvoiceProcessRule Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiInvoiceProcessRule implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.InvoiceProcessRule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'invoice_process_rule_id' => 'string',
        'invoice_type' => 'string',
        'invoice_type_localized' => 'string',
        'invoice_sub_type' => 'string',
        'invoice_sub_type_localized' => 'string',
        'do_block' => 'bool',
        'block_reason' => 'string',
        'cluster_reference' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'invoice_process_rule_id' => null,
        'invoice_type' => null,
        'invoice_type_localized' => null,
        'invoice_sub_type' => null,
        'invoice_sub_type_localized' => null,
        'do_block' => null,
        'block_reason' => null,
        'cluster_reference' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoice_process_rule_id' => 'InvoiceProcessRuleId',
        'invoice_type' => 'InvoiceType',
        'invoice_type_localized' => 'InvoiceTypeLocalized',
        'invoice_sub_type' => 'InvoiceSubType',
        'invoice_sub_type_localized' => 'InvoiceSubTypeLocalized',
        'do_block' => 'DoBlock',
        'block_reason' => 'BlockReason',
        'cluster_reference' => 'ClusterReference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invoice_process_rule_id' => 'setInvoiceProcessRuleId',
        'invoice_type' => 'setInvoiceType',
        'invoice_type_localized' => 'setInvoiceTypeLocalized',
        'invoice_sub_type' => 'setInvoiceSubType',
        'invoice_sub_type_localized' => 'setInvoiceSubTypeLocalized',
        'do_block' => 'setDoBlock',
        'block_reason' => 'setBlockReason',
        'cluster_reference' => 'setClusterReference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invoice_process_rule_id' => 'getInvoiceProcessRuleId',
        'invoice_type' => 'getInvoiceType',
        'invoice_type_localized' => 'getInvoiceTypeLocalized',
        'invoice_sub_type' => 'getInvoiceSubType',
        'invoice_sub_type_localized' => 'getInvoiceSubTypeLocalized',
        'do_block' => 'getDoBlock',
        'block_reason' => 'getBlockReason',
        'cluster_reference' => 'getClusterReference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const INVOICE_TYPE_ADVANCE_PAYMENT = 'AdvancePayment';
    const INVOICE_TYPE_SETTLEMENT = 'Settlement';
    const INVOICE_TYPE_PURCHASE = 'Purchase';
    const INVOICE_TYPE_CHARGE_SESSION = 'ChargeSession';
    const INVOICE_TYPE_CUSTOM = 'Custom';
    const INVOICE_SUB_TYPE_WIND_SHARE = 'WindShare';
    const INVOICE_SUB_TYPE_TERMINATION_FEE = 'TerminationFee';
    const INVOICE_SUB_TYPE_PRODUCER_SETTLEMENT = 'ProducerSettlement';
    const INVOICE_SUB_TYPE_DIRECT_PAY_SETTLEMENT = 'DirectPaySettlement';
    const INVOICE_SUB_TYPE_MSP_SETTLEMENT_ALLEGO = 'MspSettlementAllego';
    const INVOICE_SUB_TYPE_CPO_SETTLEMENT = 'CpoSettlement';
    const INVOICE_SUB_TYPE_SOLAR_SETTLEMENT = 'SolarSettlement';
    const INVOICE_SUB_TYPE_EV_CHARGE_CARD_SETTLEMENT = 'EvChargeCardSettlement';
    const INVOICE_SUB_TYPE_CHARGE_SESSION_CREDIT = 'ChargeSessionCredit';
    const INVOICE_SUB_TYPE_SMART_CHARGING_SETTLEMENT = 'SmartChargingSettlement';
    const INVOICE_SUB_TYPE_ENERGY_PURCHASE_SETTLEMENT = 'EnergyPurchaseSettlement';
    const INVOICE_SUB_TYPE_EV_CHARGER_SETTLEMENT = 'EvChargerSettlement';
    const INVOICE_SUB_TYPE_MSP_SETTLEMENT = 'MspSettlement';
    const INVOICE_SUB_TYPE_EV_COLLECTIVE_SETTLEMENT = 'EvCollectiveSettlement';
    const INVOICE_SUB_TYPE_DEPOSIT = 'Deposit';
    const INVOICE_SUB_TYPE_SERVICE_CONTRACT_SETTLEMENT = 'ServiceContractSettlement';
    const INVOICE_SUB_TYPE_ENERGY_PURCHASE_CORRECTION_SETTLEMENT = 'EnergyPurchaseCorrectionSettlement';
    const INVOICE_SUB_TYPE_RECONCILIATION_SETTLEMENT = 'ReconciliationSettlement';
    const INVOICE_SUB_TYPE_CERTIFICATE_SALE = 'CertificateSale';
    const INVOICE_SUB_TYPE_EV_BUSINESS_PARTNER = 'EVBusinessPartner';
    const INVOICE_SUB_TYPE_CUSTOM_GENERAL = 'Custom_General';
    const INVOICE_SUB_TYPE_CUSTOM_CHARGING_STATION = 'Custom_ChargingStation';
    const INVOICE_SUB_TYPE_CUSTOM_CHARGE_CARD = 'Custom_ChargeCard';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvoiceTypeAllowableValues()
    {
        return [
            self::INVOICE_TYPE_ADVANCE_PAYMENT,
            self::INVOICE_TYPE_SETTLEMENT,
            self::INVOICE_TYPE_PURCHASE,
            self::INVOICE_TYPE_CHARGE_SESSION,
            self::INVOICE_TYPE_CUSTOM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvoiceSubTypeAllowableValues()
    {
        return [
            self::INVOICE_SUB_TYPE_WIND_SHARE,
            self::INVOICE_SUB_TYPE_TERMINATION_FEE,
            self::INVOICE_SUB_TYPE_PRODUCER_SETTLEMENT,
            self::INVOICE_SUB_TYPE_DIRECT_PAY_SETTLEMENT,
            self::INVOICE_SUB_TYPE_MSP_SETTLEMENT_ALLEGO,
            self::INVOICE_SUB_TYPE_CPO_SETTLEMENT,
            self::INVOICE_SUB_TYPE_SOLAR_SETTLEMENT,
            self::INVOICE_SUB_TYPE_EV_CHARGE_CARD_SETTLEMENT,
            self::INVOICE_SUB_TYPE_CHARGE_SESSION_CREDIT,
            self::INVOICE_SUB_TYPE_SMART_CHARGING_SETTLEMENT,
            self::INVOICE_SUB_TYPE_ENERGY_PURCHASE_SETTLEMENT,
            self::INVOICE_SUB_TYPE_EV_CHARGER_SETTLEMENT,
            self::INVOICE_SUB_TYPE_MSP_SETTLEMENT,
            self::INVOICE_SUB_TYPE_EV_COLLECTIVE_SETTLEMENT,
            self::INVOICE_SUB_TYPE_DEPOSIT,
            self::INVOICE_SUB_TYPE_SERVICE_CONTRACT_SETTLEMENT,
            self::INVOICE_SUB_TYPE_ENERGY_PURCHASE_CORRECTION_SETTLEMENT,
            self::INVOICE_SUB_TYPE_RECONCILIATION_SETTLEMENT,
            self::INVOICE_SUB_TYPE_CERTIFICATE_SALE,
            self::INVOICE_SUB_TYPE_EV_BUSINESS_PARTNER,
            self::INVOICE_SUB_TYPE_CUSTOM_GENERAL,
            self::INVOICE_SUB_TYPE_CUSTOM_CHARGING_STATION,
            self::INVOICE_SUB_TYPE_CUSTOM_CHARGE_CARD,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['invoice_process_rule_id'] = isset($data['invoice_process_rule_id']) ? $data['invoice_process_rule_id'] : null;
        $this->container['invoice_type'] = isset($data['invoice_type']) ? $data['invoice_type'] : null;
        $this->container['invoice_type_localized'] = isset($data['invoice_type_localized']) ? $data['invoice_type_localized'] : null;
        $this->container['invoice_sub_type'] = isset($data['invoice_sub_type']) ? $data['invoice_sub_type'] : null;
        $this->container['invoice_sub_type_localized'] = isset($data['invoice_sub_type_localized']) ? $data['invoice_sub_type_localized'] : null;
        $this->container['do_block'] = isset($data['do_block']) ? $data['do_block'] : null;
        $this->container['block_reason'] = isset($data['block_reason']) ? $data['block_reason'] : null;
        $this->container['cluster_reference'] = isset($data['cluster_reference']) ? $data['cluster_reference'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getInvoiceTypeAllowableValues();
        if (!is_null($this->container['invoice_type']) && !in_array($this->container['invoice_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'invoice_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInvoiceSubTypeAllowableValues();
        if (!is_null($this->container['invoice_sub_type']) && !in_array($this->container['invoice_sub_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'invoice_sub_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invoice_process_rule_id
     *
     * @return string
     */
    public function getInvoiceProcessRuleId()
    {
        return $this->container['invoice_process_rule_id'];
    }

    /**
     * Sets invoice_process_rule_id
     *
     * @param string $invoice_process_rule_id invoice_process_rule_id
     *
     * @return $this
     */
    public function setInvoiceProcessRuleId($invoice_process_rule_id)
    {
        $this->container['invoice_process_rule_id'] = $invoice_process_rule_id;

        return $this;
    }

    /**
     * Gets invoice_type
     *
     * @return string
     */
    public function getInvoiceType()
    {
        return $this->container['invoice_type'];
    }

    /**
     * Sets invoice_type
     *
     * @param string $invoice_type invoice_type
     *
     * @return $this
     */
    public function setInvoiceType($invoice_type)
    {
        $allowedValues = $this->getInvoiceTypeAllowableValues();
        if (!is_null($invoice_type) && !in_array($invoice_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'invoice_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invoice_type'] = $invoice_type;

        return $this;
    }

    /**
     * Gets invoice_type_localized
     *
     * @return string
     */
    public function getInvoiceTypeLocalized()
    {
        return $this->container['invoice_type_localized'];
    }

    /**
     * Sets invoice_type_localized
     *
     * @param string $invoice_type_localized invoice_type_localized
     *
     * @return $this
     */
    public function setInvoiceTypeLocalized($invoice_type_localized)
    {
        $this->container['invoice_type_localized'] = $invoice_type_localized;

        return $this;
    }

    /**
     * Gets invoice_sub_type
     *
     * @return string
     */
    public function getInvoiceSubType()
    {
        return $this->container['invoice_sub_type'];
    }

    /**
     * Sets invoice_sub_type
     *
     * @param string $invoice_sub_type invoice_sub_type
     *
     * @return $this
     */
    public function setInvoiceSubType($invoice_sub_type)
    {
        $allowedValues = $this->getInvoiceSubTypeAllowableValues();
        if (!is_null($invoice_sub_type) && !in_array($invoice_sub_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'invoice_sub_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invoice_sub_type'] = $invoice_sub_type;

        return $this;
    }

    /**
     * Gets invoice_sub_type_localized
     *
     * @return string
     */
    public function getInvoiceSubTypeLocalized()
    {
        return $this->container['invoice_sub_type_localized'];
    }

    /**
     * Sets invoice_sub_type_localized
     *
     * @param string $invoice_sub_type_localized invoice_sub_type_localized
     *
     * @return $this
     */
    public function setInvoiceSubTypeLocalized($invoice_sub_type_localized)
    {
        $this->container['invoice_sub_type_localized'] = $invoice_sub_type_localized;

        return $this;
    }

    /**
     * Gets do_block
     *
     * @return bool
     */
    public function getDoBlock()
    {
        return $this->container['do_block'];
    }

    /**
     * Sets do_block
     *
     * @param bool $do_block do_block
     *
     * @return $this
     */
    public function setDoBlock($do_block)
    {
        $this->container['do_block'] = $do_block;

        return $this;
    }

    /**
     * Gets block_reason
     *
     * @return string
     */
    public function getBlockReason()
    {
        return $this->container['block_reason'];
    }

    /**
     * Sets block_reason
     *
     * @param string $block_reason block_reason
     *
     * @return $this
     */
    public function setBlockReason($block_reason)
    {
        $this->container['block_reason'] = $block_reason;

        return $this;
    }

    /**
     * Gets cluster_reference
     *
     * @return string
     */
    public function getClusterReference()
    {
        return $this->container['cluster_reference'];
    }

    /**
     * Sets cluster_reference
     *
     * @param string $cluster_reference cluster_reference
     *
     * @return $this
     */
    public function setClusterReference($cluster_reference)
    {
        $this->container['cluster_reference'] = $cluster_reference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


