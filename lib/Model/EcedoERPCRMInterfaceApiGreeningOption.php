<?php
/**
 * EcedoERPCRMInterfaceApiGreeningOption
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiGreeningOption Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiGreeningOption implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.GreeningOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'greening_option_id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'power_type' => 'string',
        'power_type_localized' => 'string',
        'market_segment' => 'string',
        'market_segment_localized' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'greening_option_id' => null,
        'name' => null,
        'description' => null,
        'power_type' => null,
        'power_type_localized' => null,
        'market_segment' => null,
        'market_segment_localized' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'greening_option_id' => 'GreeningOptionId',
        'name' => 'Name',
        'description' => 'Description',
        'power_type' => 'PowerType',
        'power_type_localized' => 'PowerTypeLocalized',
        'market_segment' => 'MarketSegment',
        'market_segment_localized' => 'MarketSegmentLocalized'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'greening_option_id' => 'setGreeningOptionId',
        'name' => 'setName',
        'description' => 'setDescription',
        'power_type' => 'setPowerType',
        'power_type_localized' => 'setPowerTypeLocalized',
        'market_segment' => 'setMarketSegment',
        'market_segment_localized' => 'setMarketSegmentLocalized'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'greening_option_id' => 'getGreeningOptionId',
        'name' => 'getName',
        'description' => 'getDescription',
        'power_type' => 'getPowerType',
        'power_type_localized' => 'getPowerTypeLocalized',
        'market_segment' => 'getMarketSegment',
        'market_segment_localized' => 'getMarketSegmentLocalized'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['greening_option_id'] = isset($data['greening_option_id']) ? $data['greening_option_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['power_type'] = isset($data['power_type']) ? $data['power_type'] : null;
        $this->container['power_type_localized'] = isset($data['power_type_localized']) ? $data['power_type_localized'] : null;
        $this->container['market_segment'] = isset($data['market_segment']) ? $data['market_segment'] : null;
        $this->container['market_segment_localized'] = isset($data['market_segment_localized']) ? $data['market_segment_localized'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets greening_option_id
     *
     * @return string
     */
    public function getGreeningOptionId()
    {
        return $this->container['greening_option_id'];
    }

    /**
     * Sets greening_option_id
     *
     * @param string $greening_option_id greening_option_id
     *
     * @return $this
     */
    public function setGreeningOptionId($greening_option_id)
    {
        $this->container['greening_option_id'] = $greening_option_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets power_type
     *
     * @return string
     */
    public function getPowerType()
    {
        return $this->container['power_type'];
    }

    /**
     * Sets power_type
     *
     * @param string $power_type power_type
     *
     * @return $this
     */
    public function setPowerType($power_type)
    {
        $this->container['power_type'] = $power_type;

        return $this;
    }

    /**
     * Gets power_type_localized
     *
     * @return string
     */
    public function getPowerTypeLocalized()
    {
        return $this->container['power_type_localized'];
    }

    /**
     * Sets power_type_localized
     *
     * @param string $power_type_localized power_type_localized
     *
     * @return $this
     */
    public function setPowerTypeLocalized($power_type_localized)
    {
        $this->container['power_type_localized'] = $power_type_localized;

        return $this;
    }

    /**
     * Gets market_segment
     *
     * @return string
     */
    public function getMarketSegment()
    {
        return $this->container['market_segment'];
    }

    /**
     * Sets market_segment
     *
     * @param string $market_segment market_segment
     *
     * @return $this
     */
    public function setMarketSegment($market_segment)
    {
        $this->container['market_segment'] = $market_segment;

        return $this;
    }

    /**
     * Gets market_segment_localized
     *
     * @return string
     */
    public function getMarketSegmentLocalized()
    {
        return $this->container['market_segment_localized'];
    }

    /**
     * Sets market_segment_localized
     *
     * @param string $market_segment_localized market_segment_localized
     *
     * @return $this
     */
    public function setMarketSegmentLocalized($market_segment_localized)
    {
        $this->container['market_segment_localized'] = $market_segment_localized;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


