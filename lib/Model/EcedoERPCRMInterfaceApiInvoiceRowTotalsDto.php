<?php
/**
 * EcedoERPCRMInterfaceApiInvoiceRowTotalsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiInvoiceRowTotalsDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiInvoiceRowTotalsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.InvoiceRowTotalsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'row_price_component_type' => 'string',
        'row_usage' => 'double',
        'row_price' => 'double',
        'row_amount' => 'double',
        'row_vat_amount' => 'double',
        'row_total_amount' => 'double',
        'row_vat_percentage' => 'double',
        'row_price_unit_singular' => 'string',
        'row_has_factor' => 'bool',
        'row_factor' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'row_price_component_type' => null,
        'row_usage' => 'double',
        'row_price' => 'double',
        'row_amount' => 'double',
        'row_vat_amount' => 'double',
        'row_total_amount' => 'double',
        'row_vat_percentage' => 'double',
        'row_price_unit_singular' => null,
        'row_has_factor' => null,
        'row_factor' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'row_price_component_type' => 'Row_PriceComponentType',
        'row_usage' => 'Row_Usage',
        'row_price' => 'Row_Price',
        'row_amount' => 'Row_Amount',
        'row_vat_amount' => 'Row_VatAmount',
        'row_total_amount' => 'Row_TotalAmount',
        'row_vat_percentage' => 'Row_VatPercentage',
        'row_price_unit_singular' => 'Row_PriceUnitSingular',
        'row_has_factor' => 'Row_HasFactor',
        'row_factor' => 'Row_Factor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'row_price_component_type' => 'setRowPriceComponentType',
        'row_usage' => 'setRowUsage',
        'row_price' => 'setRowPrice',
        'row_amount' => 'setRowAmount',
        'row_vat_amount' => 'setRowVatAmount',
        'row_total_amount' => 'setRowTotalAmount',
        'row_vat_percentage' => 'setRowVatPercentage',
        'row_price_unit_singular' => 'setRowPriceUnitSingular',
        'row_has_factor' => 'setRowHasFactor',
        'row_factor' => 'setRowFactor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'row_price_component_type' => 'getRowPriceComponentType',
        'row_usage' => 'getRowUsage',
        'row_price' => 'getRowPrice',
        'row_amount' => 'getRowAmount',
        'row_vat_amount' => 'getRowVatAmount',
        'row_total_amount' => 'getRowTotalAmount',
        'row_vat_percentage' => 'getRowVatPercentage',
        'row_price_unit_singular' => 'getRowPriceUnitSingular',
        'row_has_factor' => 'getRowHasFactor',
        'row_factor' => 'getRowFactor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['row_price_component_type'] = isset($data['row_price_component_type']) ? $data['row_price_component_type'] : null;
        $this->container['row_usage'] = isset($data['row_usage']) ? $data['row_usage'] : null;
        $this->container['row_price'] = isset($data['row_price']) ? $data['row_price'] : null;
        $this->container['row_amount'] = isset($data['row_amount']) ? $data['row_amount'] : null;
        $this->container['row_vat_amount'] = isset($data['row_vat_amount']) ? $data['row_vat_amount'] : null;
        $this->container['row_total_amount'] = isset($data['row_total_amount']) ? $data['row_total_amount'] : null;
        $this->container['row_vat_percentage'] = isset($data['row_vat_percentage']) ? $data['row_vat_percentage'] : null;
        $this->container['row_price_unit_singular'] = isset($data['row_price_unit_singular']) ? $data['row_price_unit_singular'] : null;
        $this->container['row_has_factor'] = isset($data['row_has_factor']) ? $data['row_has_factor'] : null;
        $this->container['row_factor'] = isset($data['row_factor']) ? $data['row_factor'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets row_price_component_type
     *
     * @return string
     */
    public function getRowPriceComponentType()
    {
        return $this->container['row_price_component_type'];
    }

    /**
     * Sets row_price_component_type
     *
     * @param string $row_price_component_type row_price_component_type
     *
     * @return $this
     */
    public function setRowPriceComponentType($row_price_component_type)
    {
        $this->container['row_price_component_type'] = $row_price_component_type;

        return $this;
    }

    /**
     * Gets row_usage
     *
     * @return double
     */
    public function getRowUsage()
    {
        return $this->container['row_usage'];
    }

    /**
     * Sets row_usage
     *
     * @param double $row_usage row_usage
     *
     * @return $this
     */
    public function setRowUsage($row_usage)
    {
        $this->container['row_usage'] = $row_usage;

        return $this;
    }

    /**
     * Gets row_price
     *
     * @return double
     */
    public function getRowPrice()
    {
        return $this->container['row_price'];
    }

    /**
     * Sets row_price
     *
     * @param double $row_price row_price
     *
     * @return $this
     */
    public function setRowPrice($row_price)
    {
        $this->container['row_price'] = $row_price;

        return $this;
    }

    /**
     * Gets row_amount
     *
     * @return double
     */
    public function getRowAmount()
    {
        return $this->container['row_amount'];
    }

    /**
     * Sets row_amount
     *
     * @param double $row_amount row_amount
     *
     * @return $this
     */
    public function setRowAmount($row_amount)
    {
        $this->container['row_amount'] = $row_amount;

        return $this;
    }

    /**
     * Gets row_vat_amount
     *
     * @return double
     */
    public function getRowVatAmount()
    {
        return $this->container['row_vat_amount'];
    }

    /**
     * Sets row_vat_amount
     *
     * @param double $row_vat_amount row_vat_amount
     *
     * @return $this
     */
    public function setRowVatAmount($row_vat_amount)
    {
        $this->container['row_vat_amount'] = $row_vat_amount;

        return $this;
    }

    /**
     * Gets row_total_amount
     *
     * @return double
     */
    public function getRowTotalAmount()
    {
        return $this->container['row_total_amount'];
    }

    /**
     * Sets row_total_amount
     *
     * @param double $row_total_amount row_total_amount
     *
     * @return $this
     */
    public function setRowTotalAmount($row_total_amount)
    {
        $this->container['row_total_amount'] = $row_total_amount;

        return $this;
    }

    /**
     * Gets row_vat_percentage
     *
     * @return double
     */
    public function getRowVatPercentage()
    {
        return $this->container['row_vat_percentage'];
    }

    /**
     * Sets row_vat_percentage
     *
     * @param double $row_vat_percentage row_vat_percentage
     *
     * @return $this
     */
    public function setRowVatPercentage($row_vat_percentage)
    {
        $this->container['row_vat_percentage'] = $row_vat_percentage;

        return $this;
    }

    /**
     * Gets row_price_unit_singular
     *
     * @return string
     */
    public function getRowPriceUnitSingular()
    {
        return $this->container['row_price_unit_singular'];
    }

    /**
     * Sets row_price_unit_singular
     *
     * @param string $row_price_unit_singular row_price_unit_singular
     *
     * @return $this
     */
    public function setRowPriceUnitSingular($row_price_unit_singular)
    {
        $this->container['row_price_unit_singular'] = $row_price_unit_singular;

        return $this;
    }

    /**
     * Gets row_has_factor
     *
     * @return bool
     */
    public function getRowHasFactor()
    {
        return $this->container['row_has_factor'];
    }

    /**
     * Sets row_has_factor
     *
     * @param bool $row_has_factor row_has_factor
     *
     * @return $this
     */
    public function setRowHasFactor($row_has_factor)
    {
        $this->container['row_has_factor'] = $row_has_factor;

        return $this;
    }

    /**
     * Gets row_factor
     *
     * @return double
     */
    public function getRowFactor()
    {
        return $this->container['row_factor'];
    }

    /**
     * Sets row_factor
     *
     * @param double $row_factor row_factor
     *
     * @return $this
     */
    public function setRowFactor($row_factor)
    {
        $this->container['row_factor'] = $row_factor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


