<?php
/**
 * EcedoERPCRMInterfaceApiCreditInvoicePostDataNewAdvancePaymentInputModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiCreditInvoicePostDataNewAdvancePaymentInputModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiCreditInvoicePostDataNewAdvancePaymentInputModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.CreditInvoicePostData.NewAdvancePaymentInputModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'has_advance_payment' => 'bool',
        'agreed_amount' => 'double',
        'calculation_reason' => 'string',
        'inform_customer' => 'bool',
        'comment' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'has_advance_payment' => null,
        'agreed_amount' => 'double',
        'calculation_reason' => null,
        'inform_customer' => null,
        'comment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'has_advance_payment' => 'HasAdvancePayment',
        'agreed_amount' => 'AgreedAmount',
        'calculation_reason' => 'CalculationReason',
        'inform_customer' => 'InformCustomer',
        'comment' => 'Comment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'has_advance_payment' => 'setHasAdvancePayment',
        'agreed_amount' => 'setAgreedAmount',
        'calculation_reason' => 'setCalculationReason',
        'inform_customer' => 'setInformCustomer',
        'comment' => 'setComment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'has_advance_payment' => 'getHasAdvancePayment',
        'agreed_amount' => 'getAgreedAmount',
        'calculation_reason' => 'getCalculationReason',
        'inform_customer' => 'getInformCustomer',
        'comment' => 'getComment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CALCULATION_REASON__NEW = 'New';
    const CALCULATION_REASON_CONTRACT_RENEWAL = 'ContractRenewal';
    const CALCULATION_REASON_SETTLEMENT = 'Settlement';
    const CALCULATION_REASON_CUSTOMER = 'Customer';
    const CALCULATION_REASON_CONTRACT_TYPE_CHANGE = 'ContractTypeChange';
    const CALCULATION_REASON_ENERGY_TAX = 'EnergyTax';
    const CALCULATION_REASON_NETWORKCOSTS = 'Networkcosts';
    const CALCULATION_REASON_ANNUAL_STANDARD_USAGE = 'AnnualStandardUsage';
    const CALCULATION_REASON_MASTER_DATA = 'MasterData';
    const CALCULATION_REASON_CLUSTER = 'Cluster';
    const CALCULATION_REASON_PHYSICAL_STATUS = 'PhysicalStatus';
    const CALCULATION_REASON_MONTH_CLOSED = 'MonthClosed';
    const CALCULATION_REASON_MOVE = 'Move';
    const CALCULATION_REASON_ADVANCE_PAYMENT_SCHEME_CHANGE = 'AdvancePaymentSchemeChange';
    const CALCULATION_REASON_PRODUCER_SWITCH = 'ProducerSwitch';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCalculationReasonAllowableValues()
    {
        return [
            self::CALCULATION_REASON__NEW,
            self::CALCULATION_REASON_CONTRACT_RENEWAL,
            self::CALCULATION_REASON_SETTLEMENT,
            self::CALCULATION_REASON_CUSTOMER,
            self::CALCULATION_REASON_CONTRACT_TYPE_CHANGE,
            self::CALCULATION_REASON_ENERGY_TAX,
            self::CALCULATION_REASON_NETWORKCOSTS,
            self::CALCULATION_REASON_ANNUAL_STANDARD_USAGE,
            self::CALCULATION_REASON_MASTER_DATA,
            self::CALCULATION_REASON_CLUSTER,
            self::CALCULATION_REASON_PHYSICAL_STATUS,
            self::CALCULATION_REASON_MONTH_CLOSED,
            self::CALCULATION_REASON_MOVE,
            self::CALCULATION_REASON_ADVANCE_PAYMENT_SCHEME_CHANGE,
            self::CALCULATION_REASON_PRODUCER_SWITCH,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['has_advance_payment'] = isset($data['has_advance_payment']) ? $data['has_advance_payment'] : null;
        $this->container['agreed_amount'] = isset($data['agreed_amount']) ? $data['agreed_amount'] : null;
        $this->container['calculation_reason'] = isset($data['calculation_reason']) ? $data['calculation_reason'] : null;
        $this->container['inform_customer'] = isset($data['inform_customer']) ? $data['inform_customer'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCalculationReasonAllowableValues();
        if (!is_null($this->container['calculation_reason']) && !in_array($this->container['calculation_reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'calculation_reason', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets has_advance_payment
     *
     * @return bool
     */
    public function getHasAdvancePayment()
    {
        return $this->container['has_advance_payment'];
    }

    /**
     * Sets has_advance_payment
     *
     * @param bool $has_advance_payment has_advance_payment
     *
     * @return $this
     */
    public function setHasAdvancePayment($has_advance_payment)
    {
        $this->container['has_advance_payment'] = $has_advance_payment;

        return $this;
    }

    /**
     * Gets agreed_amount
     *
     * @return double
     */
    public function getAgreedAmount()
    {
        return $this->container['agreed_amount'];
    }

    /**
     * Sets agreed_amount
     *
     * @param double $agreed_amount agreed_amount
     *
     * @return $this
     */
    public function setAgreedAmount($agreed_amount)
    {
        $this->container['agreed_amount'] = $agreed_amount;

        return $this;
    }

    /**
     * Gets calculation_reason
     *
     * @return string
     */
    public function getCalculationReason()
    {
        return $this->container['calculation_reason'];
    }

    /**
     * Sets calculation_reason
     *
     * @param string $calculation_reason calculation_reason
     *
     * @return $this
     */
    public function setCalculationReason($calculation_reason)
    {
        $allowedValues = $this->getCalculationReasonAllowableValues();
        if (!is_null($calculation_reason) && !in_array($calculation_reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'calculation_reason', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['calculation_reason'] = $calculation_reason;

        return $this;
    }

    /**
     * Gets inform_customer
     *
     * @return bool
     */
    public function getInformCustomer()
    {
        return $this->container['inform_customer'];
    }

    /**
     * Sets inform_customer
     *
     * @param bool $inform_customer inform_customer
     *
     * @return $this
     */
    public function setInformCustomer($inform_customer)
    {
        $this->container['inform_customer'] = $inform_customer;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


