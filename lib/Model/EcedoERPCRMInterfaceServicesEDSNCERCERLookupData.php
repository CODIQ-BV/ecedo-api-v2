<?php
/**
 * EcedoERPCRMInterfaceServicesEDSNCERCERLookupData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceServicesEDSNCERCERLookupData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceServicesEDSNCERCERLookupData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Services.EDSN.CER.CERLookupData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'notice_period' => 'int',
        'end_date_contract' => '\DateTime',
        'calculated_contract_start_date' => '\DateTime',
        'message' => 'string',
        'contract_start_date_localized' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'notice_period' => 'int32',
        'end_date_contract' => 'date',
        'calculated_contract_start_date' => 'date',
        'message' => null,
        'contract_start_date_localized' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'notice_period' => 'NoticePeriod',
        'end_date_contract' => 'EndDateContract',
        'calculated_contract_start_date' => 'CalculatedContractStartDate',
        'message' => 'Message',
        'contract_start_date_localized' => 'ContractStartDateLocalized'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'notice_period' => 'setNoticePeriod',
        'end_date_contract' => 'setEndDateContract',
        'calculated_contract_start_date' => 'setCalculatedContractStartDate',
        'message' => 'setMessage',
        'contract_start_date_localized' => 'setContractStartDateLocalized'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'notice_period' => 'getNoticePeriod',
        'end_date_contract' => 'getEndDateContract',
        'calculated_contract_start_date' => 'getCalculatedContractStartDate',
        'message' => 'getMessage',
        'contract_start_date_localized' => 'getContractStartDateLocalized'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['notice_period'] = isset($data['notice_period']) ? $data['notice_period'] : null;
        $this->container['end_date_contract'] = isset($data['end_date_contract']) ? $data['end_date_contract'] : null;
        $this->container['calculated_contract_start_date'] = isset($data['calculated_contract_start_date']) ? $data['calculated_contract_start_date'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['contract_start_date_localized'] = isset($data['contract_start_date_localized']) ? $data['contract_start_date_localized'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets notice_period
     *
     * @return int
     */
    public function getNoticePeriod()
    {
        return $this->container['notice_period'];
    }

    /**
     * Sets notice_period
     *
     * @param int $notice_period notice_period
     *
     * @return $this
     */
    public function setNoticePeriod($notice_period)
    {
        $this->container['notice_period'] = $notice_period;

        return $this;
    }

    /**
     * Gets end_date_contract
     *
     * @return \DateTime
     */
    public function getEndDateContract()
    {
        return $this->container['end_date_contract'];
    }

    /**
     * Sets end_date_contract
     *
     * @param \DateTime $end_date_contract end_date_contract
     *
     * @return $this
     */
    public function setEndDateContract($end_date_contract)
    {
        $this->container['end_date_contract'] = $end_date_contract;

        return $this;
    }

    /**
     * Gets calculated_contract_start_date
     *
     * @return \DateTime
     */
    public function getCalculatedContractStartDate()
    {
        return $this->container['calculated_contract_start_date'];
    }

    /**
     * Sets calculated_contract_start_date
     *
     * @param \DateTime $calculated_contract_start_date calculated_contract_start_date
     *
     * @return $this
     */
    public function setCalculatedContractStartDate($calculated_contract_start_date)
    {
        $this->container['calculated_contract_start_date'] = $calculated_contract_start_date;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets contract_start_date_localized
     *
     * @return string
     */
    public function getContractStartDateLocalized()
    {
        return $this->container['contract_start_date_localized'];
    }

    /**
     * Sets contract_start_date_localized
     *
     * @param string $contract_start_date_localized contract_start_date_localized
     *
     * @return $this
     */
    public function setContractStartDateLocalized($contract_start_date_localized)
    {
        $this->container['contract_start_date_localized'] = $contract_start_date_localized;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


