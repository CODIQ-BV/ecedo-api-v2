<?php
/**
 * EcedoERPCRMInterfaceReportModelSettlementInvoiceLetterSettlementInvoiceLetterEnergyDtoMeterReading
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceReportModelSettlementInvoiceLetterSettlementInvoiceLetterEnergyDtoMeterReading Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceReportModelSettlementInvoiceLetterSettlementInvoiceLetterEnergyDtoMeterReading implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.ReportModel.SettlementInvoiceLetter.SettlementInvoiceLetterEnergyDto_MeterReading';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'grid_operator_id' => 'string',
        'meter_reading_connection_cap_tar_descriptions_combined' => 'string',
        'meter_reading_connection_contract_proposition_description' => 'string',
        'meter_reading_id' => 'string',
        'organization_id' => 'string',
        'meter_reading_connection_ean' => 'string',
        'meter_reading_connection_is_electricity' => 'bool',
        'meter_reading_connection_is_gas' => 'bool',
        'meter_reading_connection_is_large_consumer' => 'bool',
        'meter_reading_connection_is_profile_large_consumer' => 'bool',
        'meter_reading_connection_bill_as_single' => 'bool',
        'meter_reading_meter_number' => 'string',
        'meter_reading_meter_no_digits' => 'int',
        'meter_reading_meter_start_date' => '\DateTime',
        'meter_reading_meter_end_date' => '\DateTime',
        'meter_reading_meter_type_code' => 'string',
        'meter_reading_position_type' => 'string',
        'meter_reading_period_start_date' => '\DateTime',
        'meter_reading_period_end_date' => '\DateTime',
        'meter_reading_period_no_days' => 'int',
        'meter_reading_position_start_reading_method' => 'string',
        'meter_reading_position_start_request_reason' => 'string',
        'meter_reading_position_start' => 'int',
        'meter_reading_position_end' => 'int',
        'meter_reading_position_usage' => 'int',
        'meter_reading_position_corrected_usage' => 'int',
        'meter_reading_position_calorific_value' => 'double',
        'meter_reading_position_factor' => 'double',
        'meter_reading_position_reading_method' => 'string',
        'meter_reading_position_request_reason' => 'string',
        'meter_reading_position_reason' => 'string',
        'meter_reading_position_start_reason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'grid_operator_id' => null,
        'meter_reading_connection_cap_tar_descriptions_combined' => null,
        'meter_reading_connection_contract_proposition_description' => null,
        'meter_reading_id' => null,
        'organization_id' => null,
        'meter_reading_connection_ean' => null,
        'meter_reading_connection_is_electricity' => null,
        'meter_reading_connection_is_gas' => null,
        'meter_reading_connection_is_large_consumer' => null,
        'meter_reading_connection_is_profile_large_consumer' => null,
        'meter_reading_connection_bill_as_single' => null,
        'meter_reading_meter_number' => null,
        'meter_reading_meter_no_digits' => 'int32',
        'meter_reading_meter_start_date' => 'date',
        'meter_reading_meter_end_date' => 'date',
        'meter_reading_meter_type_code' => null,
        'meter_reading_position_type' => null,
        'meter_reading_period_start_date' => 'date',
        'meter_reading_period_end_date' => 'date',
        'meter_reading_period_no_days' => 'int32',
        'meter_reading_position_start_reading_method' => null,
        'meter_reading_position_start_request_reason' => null,
        'meter_reading_position_start' => 'int32',
        'meter_reading_position_end' => 'int32',
        'meter_reading_position_usage' => 'int32',
        'meter_reading_position_corrected_usage' => 'int32',
        'meter_reading_position_calorific_value' => 'double',
        'meter_reading_position_factor' => 'double',
        'meter_reading_position_reading_method' => null,
        'meter_reading_position_request_reason' => null,
        'meter_reading_position_reason' => null,
        'meter_reading_position_start_reason' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'grid_operator_id' => 'GridOperator_Id',
        'meter_reading_connection_cap_tar_descriptions_combined' => 'MeterReading_Connection_CapTarDescriptions_Combined',
        'meter_reading_connection_contract_proposition_description' => 'MeterReading_Connection_Contract_Proposition_Description',
        'meter_reading_id' => 'MeterReading_Id',
        'organization_id' => 'Organization_Id',
        'meter_reading_connection_ean' => 'MeterReading_Connection_EAN',
        'meter_reading_connection_is_electricity' => 'MeterReading_Connection_IsElectricity',
        'meter_reading_connection_is_gas' => 'MeterReading_Connection_IsGas',
        'meter_reading_connection_is_large_consumer' => 'MeterReading_Connection_IsLargeConsumer',
        'meter_reading_connection_is_profile_large_consumer' => 'MeterReading_Connection_IsProfileLargeConsumer',
        'meter_reading_connection_bill_as_single' => 'MeterReading_Connection_BillAsSingle',
        'meter_reading_meter_number' => 'MeterReading_Meter_Number',
        'meter_reading_meter_no_digits' => 'MeterReading_Meter_NoDigits',
        'meter_reading_meter_start_date' => 'MeterReading_Meter_StartDate',
        'meter_reading_meter_end_date' => 'MeterReading_Meter_EndDate',
        'meter_reading_meter_type_code' => 'MeterReading_Meter_TypeCode',
        'meter_reading_position_type' => 'MeterReading_Position_Type',
        'meter_reading_period_start_date' => 'MeterReading_Period_StartDate',
        'meter_reading_period_end_date' => 'MeterReading_Period_EndDate',
        'meter_reading_period_no_days' => 'MeterReading_Period_NoDays',
        'meter_reading_position_start_reading_method' => 'MeterReading_Position_Start_ReadingMethod',
        'meter_reading_position_start_request_reason' => 'MeterReading_Position_Start_RequestReason',
        'meter_reading_position_start' => 'MeterReading_Position_Start',
        'meter_reading_position_end' => 'MeterReading_Position_End',
        'meter_reading_position_usage' => 'MeterReading_Position_Usage',
        'meter_reading_position_corrected_usage' => 'MeterReading_Position_CorrectedUsage',
        'meter_reading_position_calorific_value' => 'MeterReading_Position_CalorificValue',
        'meter_reading_position_factor' => 'MeterReading_Position_Factor',
        'meter_reading_position_reading_method' => 'MeterReading_Position_ReadingMethod',
        'meter_reading_position_request_reason' => 'MeterReading_Position_RequestReason',
        'meter_reading_position_reason' => 'MeterReading_Position_Reason',
        'meter_reading_position_start_reason' => 'MeterReading_Position_Start_Reason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'grid_operator_id' => 'setGridOperatorId',
        'meter_reading_connection_cap_tar_descriptions_combined' => 'setMeterReadingConnectionCapTarDescriptionsCombined',
        'meter_reading_connection_contract_proposition_description' => 'setMeterReadingConnectionContractPropositionDescription',
        'meter_reading_id' => 'setMeterReadingId',
        'organization_id' => 'setOrganizationId',
        'meter_reading_connection_ean' => 'setMeterReadingConnectionEan',
        'meter_reading_connection_is_electricity' => 'setMeterReadingConnectionIsElectricity',
        'meter_reading_connection_is_gas' => 'setMeterReadingConnectionIsGas',
        'meter_reading_connection_is_large_consumer' => 'setMeterReadingConnectionIsLargeConsumer',
        'meter_reading_connection_is_profile_large_consumer' => 'setMeterReadingConnectionIsProfileLargeConsumer',
        'meter_reading_connection_bill_as_single' => 'setMeterReadingConnectionBillAsSingle',
        'meter_reading_meter_number' => 'setMeterReadingMeterNumber',
        'meter_reading_meter_no_digits' => 'setMeterReadingMeterNoDigits',
        'meter_reading_meter_start_date' => 'setMeterReadingMeterStartDate',
        'meter_reading_meter_end_date' => 'setMeterReadingMeterEndDate',
        'meter_reading_meter_type_code' => 'setMeterReadingMeterTypeCode',
        'meter_reading_position_type' => 'setMeterReadingPositionType',
        'meter_reading_period_start_date' => 'setMeterReadingPeriodStartDate',
        'meter_reading_period_end_date' => 'setMeterReadingPeriodEndDate',
        'meter_reading_period_no_days' => 'setMeterReadingPeriodNoDays',
        'meter_reading_position_start_reading_method' => 'setMeterReadingPositionStartReadingMethod',
        'meter_reading_position_start_request_reason' => 'setMeterReadingPositionStartRequestReason',
        'meter_reading_position_start' => 'setMeterReadingPositionStart',
        'meter_reading_position_end' => 'setMeterReadingPositionEnd',
        'meter_reading_position_usage' => 'setMeterReadingPositionUsage',
        'meter_reading_position_corrected_usage' => 'setMeterReadingPositionCorrectedUsage',
        'meter_reading_position_calorific_value' => 'setMeterReadingPositionCalorificValue',
        'meter_reading_position_factor' => 'setMeterReadingPositionFactor',
        'meter_reading_position_reading_method' => 'setMeterReadingPositionReadingMethod',
        'meter_reading_position_request_reason' => 'setMeterReadingPositionRequestReason',
        'meter_reading_position_reason' => 'setMeterReadingPositionReason',
        'meter_reading_position_start_reason' => 'setMeterReadingPositionStartReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'grid_operator_id' => 'getGridOperatorId',
        'meter_reading_connection_cap_tar_descriptions_combined' => 'getMeterReadingConnectionCapTarDescriptionsCombined',
        'meter_reading_connection_contract_proposition_description' => 'getMeterReadingConnectionContractPropositionDescription',
        'meter_reading_id' => 'getMeterReadingId',
        'organization_id' => 'getOrganizationId',
        'meter_reading_connection_ean' => 'getMeterReadingConnectionEan',
        'meter_reading_connection_is_electricity' => 'getMeterReadingConnectionIsElectricity',
        'meter_reading_connection_is_gas' => 'getMeterReadingConnectionIsGas',
        'meter_reading_connection_is_large_consumer' => 'getMeterReadingConnectionIsLargeConsumer',
        'meter_reading_connection_is_profile_large_consumer' => 'getMeterReadingConnectionIsProfileLargeConsumer',
        'meter_reading_connection_bill_as_single' => 'getMeterReadingConnectionBillAsSingle',
        'meter_reading_meter_number' => 'getMeterReadingMeterNumber',
        'meter_reading_meter_no_digits' => 'getMeterReadingMeterNoDigits',
        'meter_reading_meter_start_date' => 'getMeterReadingMeterStartDate',
        'meter_reading_meter_end_date' => 'getMeterReadingMeterEndDate',
        'meter_reading_meter_type_code' => 'getMeterReadingMeterTypeCode',
        'meter_reading_position_type' => 'getMeterReadingPositionType',
        'meter_reading_period_start_date' => 'getMeterReadingPeriodStartDate',
        'meter_reading_period_end_date' => 'getMeterReadingPeriodEndDate',
        'meter_reading_period_no_days' => 'getMeterReadingPeriodNoDays',
        'meter_reading_position_start_reading_method' => 'getMeterReadingPositionStartReadingMethod',
        'meter_reading_position_start_request_reason' => 'getMeterReadingPositionStartRequestReason',
        'meter_reading_position_start' => 'getMeterReadingPositionStart',
        'meter_reading_position_end' => 'getMeterReadingPositionEnd',
        'meter_reading_position_usage' => 'getMeterReadingPositionUsage',
        'meter_reading_position_corrected_usage' => 'getMeterReadingPositionCorrectedUsage',
        'meter_reading_position_calorific_value' => 'getMeterReadingPositionCalorificValue',
        'meter_reading_position_factor' => 'getMeterReadingPositionFactor',
        'meter_reading_position_reading_method' => 'getMeterReadingPositionReadingMethod',
        'meter_reading_position_request_reason' => 'getMeterReadingPositionRequestReason',
        'meter_reading_position_reason' => 'getMeterReadingPositionReason',
        'meter_reading_position_start_reason' => 'getMeterReadingPositionStartReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['grid_operator_id'] = isset($data['grid_operator_id']) ? $data['grid_operator_id'] : null;
        $this->container['meter_reading_connection_cap_tar_descriptions_combined'] = isset($data['meter_reading_connection_cap_tar_descriptions_combined']) ? $data['meter_reading_connection_cap_tar_descriptions_combined'] : null;
        $this->container['meter_reading_connection_contract_proposition_description'] = isset($data['meter_reading_connection_contract_proposition_description']) ? $data['meter_reading_connection_contract_proposition_description'] : null;
        $this->container['meter_reading_id'] = isset($data['meter_reading_id']) ? $data['meter_reading_id'] : null;
        $this->container['organization_id'] = isset($data['organization_id']) ? $data['organization_id'] : null;
        $this->container['meter_reading_connection_ean'] = isset($data['meter_reading_connection_ean']) ? $data['meter_reading_connection_ean'] : null;
        $this->container['meter_reading_connection_is_electricity'] = isset($data['meter_reading_connection_is_electricity']) ? $data['meter_reading_connection_is_electricity'] : null;
        $this->container['meter_reading_connection_is_gas'] = isset($data['meter_reading_connection_is_gas']) ? $data['meter_reading_connection_is_gas'] : null;
        $this->container['meter_reading_connection_is_large_consumer'] = isset($data['meter_reading_connection_is_large_consumer']) ? $data['meter_reading_connection_is_large_consumer'] : null;
        $this->container['meter_reading_connection_is_profile_large_consumer'] = isset($data['meter_reading_connection_is_profile_large_consumer']) ? $data['meter_reading_connection_is_profile_large_consumer'] : null;
        $this->container['meter_reading_connection_bill_as_single'] = isset($data['meter_reading_connection_bill_as_single']) ? $data['meter_reading_connection_bill_as_single'] : null;
        $this->container['meter_reading_meter_number'] = isset($data['meter_reading_meter_number']) ? $data['meter_reading_meter_number'] : null;
        $this->container['meter_reading_meter_no_digits'] = isset($data['meter_reading_meter_no_digits']) ? $data['meter_reading_meter_no_digits'] : null;
        $this->container['meter_reading_meter_start_date'] = isset($data['meter_reading_meter_start_date']) ? $data['meter_reading_meter_start_date'] : null;
        $this->container['meter_reading_meter_end_date'] = isset($data['meter_reading_meter_end_date']) ? $data['meter_reading_meter_end_date'] : null;
        $this->container['meter_reading_meter_type_code'] = isset($data['meter_reading_meter_type_code']) ? $data['meter_reading_meter_type_code'] : null;
        $this->container['meter_reading_position_type'] = isset($data['meter_reading_position_type']) ? $data['meter_reading_position_type'] : null;
        $this->container['meter_reading_period_start_date'] = isset($data['meter_reading_period_start_date']) ? $data['meter_reading_period_start_date'] : null;
        $this->container['meter_reading_period_end_date'] = isset($data['meter_reading_period_end_date']) ? $data['meter_reading_period_end_date'] : null;
        $this->container['meter_reading_period_no_days'] = isset($data['meter_reading_period_no_days']) ? $data['meter_reading_period_no_days'] : null;
        $this->container['meter_reading_position_start_reading_method'] = isset($data['meter_reading_position_start_reading_method']) ? $data['meter_reading_position_start_reading_method'] : null;
        $this->container['meter_reading_position_start_request_reason'] = isset($data['meter_reading_position_start_request_reason']) ? $data['meter_reading_position_start_request_reason'] : null;
        $this->container['meter_reading_position_start'] = isset($data['meter_reading_position_start']) ? $data['meter_reading_position_start'] : null;
        $this->container['meter_reading_position_end'] = isset($data['meter_reading_position_end']) ? $data['meter_reading_position_end'] : null;
        $this->container['meter_reading_position_usage'] = isset($data['meter_reading_position_usage']) ? $data['meter_reading_position_usage'] : null;
        $this->container['meter_reading_position_corrected_usage'] = isset($data['meter_reading_position_corrected_usage']) ? $data['meter_reading_position_corrected_usage'] : null;
        $this->container['meter_reading_position_calorific_value'] = isset($data['meter_reading_position_calorific_value']) ? $data['meter_reading_position_calorific_value'] : null;
        $this->container['meter_reading_position_factor'] = isset($data['meter_reading_position_factor']) ? $data['meter_reading_position_factor'] : null;
        $this->container['meter_reading_position_reading_method'] = isset($data['meter_reading_position_reading_method']) ? $data['meter_reading_position_reading_method'] : null;
        $this->container['meter_reading_position_request_reason'] = isset($data['meter_reading_position_request_reason']) ? $data['meter_reading_position_request_reason'] : null;
        $this->container['meter_reading_position_reason'] = isset($data['meter_reading_position_reason']) ? $data['meter_reading_position_reason'] : null;
        $this->container['meter_reading_position_start_reason'] = isset($data['meter_reading_position_start_reason']) ? $data['meter_reading_position_start_reason'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets grid_operator_id
     *
     * @return string
     */
    public function getGridOperatorId()
    {
        return $this->container['grid_operator_id'];
    }

    /**
     * Sets grid_operator_id
     *
     * @param string $grid_operator_id grid_operator_id
     *
     * @return $this
     */
    public function setGridOperatorId($grid_operator_id)
    {
        $this->container['grid_operator_id'] = $grid_operator_id;

        return $this;
    }

    /**
     * Gets meter_reading_connection_cap_tar_descriptions_combined
     *
     * @return string
     */
    public function getMeterReadingConnectionCapTarDescriptionsCombined()
    {
        return $this->container['meter_reading_connection_cap_tar_descriptions_combined'];
    }

    /**
     * Sets meter_reading_connection_cap_tar_descriptions_combined
     *
     * @param string $meter_reading_connection_cap_tar_descriptions_combined meter_reading_connection_cap_tar_descriptions_combined
     *
     * @return $this
     */
    public function setMeterReadingConnectionCapTarDescriptionsCombined($meter_reading_connection_cap_tar_descriptions_combined)
    {
        $this->container['meter_reading_connection_cap_tar_descriptions_combined'] = $meter_reading_connection_cap_tar_descriptions_combined;

        return $this;
    }

    /**
     * Gets meter_reading_connection_contract_proposition_description
     *
     * @return string
     */
    public function getMeterReadingConnectionContractPropositionDescription()
    {
        return $this->container['meter_reading_connection_contract_proposition_description'];
    }

    /**
     * Sets meter_reading_connection_contract_proposition_description
     *
     * @param string $meter_reading_connection_contract_proposition_description meter_reading_connection_contract_proposition_description
     *
     * @return $this
     */
    public function setMeterReadingConnectionContractPropositionDescription($meter_reading_connection_contract_proposition_description)
    {
        $this->container['meter_reading_connection_contract_proposition_description'] = $meter_reading_connection_contract_proposition_description;

        return $this;
    }

    /**
     * Gets meter_reading_id
     *
     * @return string
     */
    public function getMeterReadingId()
    {
        return $this->container['meter_reading_id'];
    }

    /**
     * Sets meter_reading_id
     *
     * @param string $meter_reading_id meter_reading_id
     *
     * @return $this
     */
    public function setMeterReadingId($meter_reading_id)
    {
        $this->container['meter_reading_id'] = $meter_reading_id;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return string
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param string $organization_id organization_id
     *
     * @return $this
     */
    public function setOrganizationId($organization_id)
    {
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets meter_reading_connection_ean
     *
     * @return string
     */
    public function getMeterReadingConnectionEan()
    {
        return $this->container['meter_reading_connection_ean'];
    }

    /**
     * Sets meter_reading_connection_ean
     *
     * @param string $meter_reading_connection_ean meter_reading_connection_ean
     *
     * @return $this
     */
    public function setMeterReadingConnectionEan($meter_reading_connection_ean)
    {
        $this->container['meter_reading_connection_ean'] = $meter_reading_connection_ean;

        return $this;
    }

    /**
     * Gets meter_reading_connection_is_electricity
     *
     * @return bool
     */
    public function getMeterReadingConnectionIsElectricity()
    {
        return $this->container['meter_reading_connection_is_electricity'];
    }

    /**
     * Sets meter_reading_connection_is_electricity
     *
     * @param bool $meter_reading_connection_is_electricity meter_reading_connection_is_electricity
     *
     * @return $this
     */
    public function setMeterReadingConnectionIsElectricity($meter_reading_connection_is_electricity)
    {
        $this->container['meter_reading_connection_is_electricity'] = $meter_reading_connection_is_electricity;

        return $this;
    }

    /**
     * Gets meter_reading_connection_is_gas
     *
     * @return bool
     */
    public function getMeterReadingConnectionIsGas()
    {
        return $this->container['meter_reading_connection_is_gas'];
    }

    /**
     * Sets meter_reading_connection_is_gas
     *
     * @param bool $meter_reading_connection_is_gas meter_reading_connection_is_gas
     *
     * @return $this
     */
    public function setMeterReadingConnectionIsGas($meter_reading_connection_is_gas)
    {
        $this->container['meter_reading_connection_is_gas'] = $meter_reading_connection_is_gas;

        return $this;
    }

    /**
     * Gets meter_reading_connection_is_large_consumer
     *
     * @return bool
     */
    public function getMeterReadingConnectionIsLargeConsumer()
    {
        return $this->container['meter_reading_connection_is_large_consumer'];
    }

    /**
     * Sets meter_reading_connection_is_large_consumer
     *
     * @param bool $meter_reading_connection_is_large_consumer meter_reading_connection_is_large_consumer
     *
     * @return $this
     */
    public function setMeterReadingConnectionIsLargeConsumer($meter_reading_connection_is_large_consumer)
    {
        $this->container['meter_reading_connection_is_large_consumer'] = $meter_reading_connection_is_large_consumer;

        return $this;
    }

    /**
     * Gets meter_reading_connection_is_profile_large_consumer
     *
     * @return bool
     */
    public function getMeterReadingConnectionIsProfileLargeConsumer()
    {
        return $this->container['meter_reading_connection_is_profile_large_consumer'];
    }

    /**
     * Sets meter_reading_connection_is_profile_large_consumer
     *
     * @param bool $meter_reading_connection_is_profile_large_consumer meter_reading_connection_is_profile_large_consumer
     *
     * @return $this
     */
    public function setMeterReadingConnectionIsProfileLargeConsumer($meter_reading_connection_is_profile_large_consumer)
    {
        $this->container['meter_reading_connection_is_profile_large_consumer'] = $meter_reading_connection_is_profile_large_consumer;

        return $this;
    }

    /**
     * Gets meter_reading_connection_bill_as_single
     *
     * @return bool
     */
    public function getMeterReadingConnectionBillAsSingle()
    {
        return $this->container['meter_reading_connection_bill_as_single'];
    }

    /**
     * Sets meter_reading_connection_bill_as_single
     *
     * @param bool $meter_reading_connection_bill_as_single meter_reading_connection_bill_as_single
     *
     * @return $this
     */
    public function setMeterReadingConnectionBillAsSingle($meter_reading_connection_bill_as_single)
    {
        $this->container['meter_reading_connection_bill_as_single'] = $meter_reading_connection_bill_as_single;

        return $this;
    }

    /**
     * Gets meter_reading_meter_number
     *
     * @return string
     */
    public function getMeterReadingMeterNumber()
    {
        return $this->container['meter_reading_meter_number'];
    }

    /**
     * Sets meter_reading_meter_number
     *
     * @param string $meter_reading_meter_number meter_reading_meter_number
     *
     * @return $this
     */
    public function setMeterReadingMeterNumber($meter_reading_meter_number)
    {
        $this->container['meter_reading_meter_number'] = $meter_reading_meter_number;

        return $this;
    }

    /**
     * Gets meter_reading_meter_no_digits
     *
     * @return int
     */
    public function getMeterReadingMeterNoDigits()
    {
        return $this->container['meter_reading_meter_no_digits'];
    }

    /**
     * Sets meter_reading_meter_no_digits
     *
     * @param int $meter_reading_meter_no_digits meter_reading_meter_no_digits
     *
     * @return $this
     */
    public function setMeterReadingMeterNoDigits($meter_reading_meter_no_digits)
    {
        $this->container['meter_reading_meter_no_digits'] = $meter_reading_meter_no_digits;

        return $this;
    }

    /**
     * Gets meter_reading_meter_start_date
     *
     * @return \DateTime
     */
    public function getMeterReadingMeterStartDate()
    {
        return $this->container['meter_reading_meter_start_date'];
    }

    /**
     * Sets meter_reading_meter_start_date
     *
     * @param \DateTime $meter_reading_meter_start_date meter_reading_meter_start_date
     *
     * @return $this
     */
    public function setMeterReadingMeterStartDate($meter_reading_meter_start_date)
    {
        $this->container['meter_reading_meter_start_date'] = $meter_reading_meter_start_date;

        return $this;
    }

    /**
     * Gets meter_reading_meter_end_date
     *
     * @return \DateTime
     */
    public function getMeterReadingMeterEndDate()
    {
        return $this->container['meter_reading_meter_end_date'];
    }

    /**
     * Sets meter_reading_meter_end_date
     *
     * @param \DateTime $meter_reading_meter_end_date meter_reading_meter_end_date
     *
     * @return $this
     */
    public function setMeterReadingMeterEndDate($meter_reading_meter_end_date)
    {
        $this->container['meter_reading_meter_end_date'] = $meter_reading_meter_end_date;

        return $this;
    }

    /**
     * Gets meter_reading_meter_type_code
     *
     * @return string
     */
    public function getMeterReadingMeterTypeCode()
    {
        return $this->container['meter_reading_meter_type_code'];
    }

    /**
     * Sets meter_reading_meter_type_code
     *
     * @param string $meter_reading_meter_type_code meter_reading_meter_type_code
     *
     * @return $this
     */
    public function setMeterReadingMeterTypeCode($meter_reading_meter_type_code)
    {
        $this->container['meter_reading_meter_type_code'] = $meter_reading_meter_type_code;

        return $this;
    }

    /**
     * Gets meter_reading_position_type
     *
     * @return string
     */
    public function getMeterReadingPositionType()
    {
        return $this->container['meter_reading_position_type'];
    }

    /**
     * Sets meter_reading_position_type
     *
     * @param string $meter_reading_position_type meter_reading_position_type
     *
     * @return $this
     */
    public function setMeterReadingPositionType($meter_reading_position_type)
    {
        $this->container['meter_reading_position_type'] = $meter_reading_position_type;

        return $this;
    }

    /**
     * Gets meter_reading_period_start_date
     *
     * @return \DateTime
     */
    public function getMeterReadingPeriodStartDate()
    {
        return $this->container['meter_reading_period_start_date'];
    }

    /**
     * Sets meter_reading_period_start_date
     *
     * @param \DateTime $meter_reading_period_start_date meter_reading_period_start_date
     *
     * @return $this
     */
    public function setMeterReadingPeriodStartDate($meter_reading_period_start_date)
    {
        $this->container['meter_reading_period_start_date'] = $meter_reading_period_start_date;

        return $this;
    }

    /**
     * Gets meter_reading_period_end_date
     *
     * @return \DateTime
     */
    public function getMeterReadingPeriodEndDate()
    {
        return $this->container['meter_reading_period_end_date'];
    }

    /**
     * Sets meter_reading_period_end_date
     *
     * @param \DateTime $meter_reading_period_end_date meter_reading_period_end_date
     *
     * @return $this
     */
    public function setMeterReadingPeriodEndDate($meter_reading_period_end_date)
    {
        $this->container['meter_reading_period_end_date'] = $meter_reading_period_end_date;

        return $this;
    }

    /**
     * Gets meter_reading_period_no_days
     *
     * @return int
     */
    public function getMeterReadingPeriodNoDays()
    {
        return $this->container['meter_reading_period_no_days'];
    }

    /**
     * Sets meter_reading_period_no_days
     *
     * @param int $meter_reading_period_no_days meter_reading_period_no_days
     *
     * @return $this
     */
    public function setMeterReadingPeriodNoDays($meter_reading_period_no_days)
    {
        $this->container['meter_reading_period_no_days'] = $meter_reading_period_no_days;

        return $this;
    }

    /**
     * Gets meter_reading_position_start_reading_method
     *
     * @return string
     */
    public function getMeterReadingPositionStartReadingMethod()
    {
        return $this->container['meter_reading_position_start_reading_method'];
    }

    /**
     * Sets meter_reading_position_start_reading_method
     *
     * @param string $meter_reading_position_start_reading_method meter_reading_position_start_reading_method
     *
     * @return $this
     */
    public function setMeterReadingPositionStartReadingMethod($meter_reading_position_start_reading_method)
    {
        $this->container['meter_reading_position_start_reading_method'] = $meter_reading_position_start_reading_method;

        return $this;
    }

    /**
     * Gets meter_reading_position_start_request_reason
     *
     * @return string
     */
    public function getMeterReadingPositionStartRequestReason()
    {
        return $this->container['meter_reading_position_start_request_reason'];
    }

    /**
     * Sets meter_reading_position_start_request_reason
     *
     * @param string $meter_reading_position_start_request_reason meter_reading_position_start_request_reason
     *
     * @return $this
     */
    public function setMeterReadingPositionStartRequestReason($meter_reading_position_start_request_reason)
    {
        $this->container['meter_reading_position_start_request_reason'] = $meter_reading_position_start_request_reason;

        return $this;
    }

    /**
     * Gets meter_reading_position_start
     *
     * @return int
     */
    public function getMeterReadingPositionStart()
    {
        return $this->container['meter_reading_position_start'];
    }

    /**
     * Sets meter_reading_position_start
     *
     * @param int $meter_reading_position_start meter_reading_position_start
     *
     * @return $this
     */
    public function setMeterReadingPositionStart($meter_reading_position_start)
    {
        $this->container['meter_reading_position_start'] = $meter_reading_position_start;

        return $this;
    }

    /**
     * Gets meter_reading_position_end
     *
     * @return int
     */
    public function getMeterReadingPositionEnd()
    {
        return $this->container['meter_reading_position_end'];
    }

    /**
     * Sets meter_reading_position_end
     *
     * @param int $meter_reading_position_end meter_reading_position_end
     *
     * @return $this
     */
    public function setMeterReadingPositionEnd($meter_reading_position_end)
    {
        $this->container['meter_reading_position_end'] = $meter_reading_position_end;

        return $this;
    }

    /**
     * Gets meter_reading_position_usage
     *
     * @return int
     */
    public function getMeterReadingPositionUsage()
    {
        return $this->container['meter_reading_position_usage'];
    }

    /**
     * Sets meter_reading_position_usage
     *
     * @param int $meter_reading_position_usage meter_reading_position_usage
     *
     * @return $this
     */
    public function setMeterReadingPositionUsage($meter_reading_position_usage)
    {
        $this->container['meter_reading_position_usage'] = $meter_reading_position_usage;

        return $this;
    }

    /**
     * Gets meter_reading_position_corrected_usage
     *
     * @return int
     */
    public function getMeterReadingPositionCorrectedUsage()
    {
        return $this->container['meter_reading_position_corrected_usage'];
    }

    /**
     * Sets meter_reading_position_corrected_usage
     *
     * @param int $meter_reading_position_corrected_usage meter_reading_position_corrected_usage
     *
     * @return $this
     */
    public function setMeterReadingPositionCorrectedUsage($meter_reading_position_corrected_usage)
    {
        $this->container['meter_reading_position_corrected_usage'] = $meter_reading_position_corrected_usage;

        return $this;
    }

    /**
     * Gets meter_reading_position_calorific_value
     *
     * @return double
     */
    public function getMeterReadingPositionCalorificValue()
    {
        return $this->container['meter_reading_position_calorific_value'];
    }

    /**
     * Sets meter_reading_position_calorific_value
     *
     * @param double $meter_reading_position_calorific_value meter_reading_position_calorific_value
     *
     * @return $this
     */
    public function setMeterReadingPositionCalorificValue($meter_reading_position_calorific_value)
    {
        $this->container['meter_reading_position_calorific_value'] = $meter_reading_position_calorific_value;

        return $this;
    }

    /**
     * Gets meter_reading_position_factor
     *
     * @return double
     */
    public function getMeterReadingPositionFactor()
    {
        return $this->container['meter_reading_position_factor'];
    }

    /**
     * Sets meter_reading_position_factor
     *
     * @param double $meter_reading_position_factor meter_reading_position_factor
     *
     * @return $this
     */
    public function setMeterReadingPositionFactor($meter_reading_position_factor)
    {
        $this->container['meter_reading_position_factor'] = $meter_reading_position_factor;

        return $this;
    }

    /**
     * Gets meter_reading_position_reading_method
     *
     * @return string
     */
    public function getMeterReadingPositionReadingMethod()
    {
        return $this->container['meter_reading_position_reading_method'];
    }

    /**
     * Sets meter_reading_position_reading_method
     *
     * @param string $meter_reading_position_reading_method meter_reading_position_reading_method
     *
     * @return $this
     */
    public function setMeterReadingPositionReadingMethod($meter_reading_position_reading_method)
    {
        $this->container['meter_reading_position_reading_method'] = $meter_reading_position_reading_method;

        return $this;
    }

    /**
     * Gets meter_reading_position_request_reason
     *
     * @return string
     */
    public function getMeterReadingPositionRequestReason()
    {
        return $this->container['meter_reading_position_request_reason'];
    }

    /**
     * Sets meter_reading_position_request_reason
     *
     * @param string $meter_reading_position_request_reason meter_reading_position_request_reason
     *
     * @return $this
     */
    public function setMeterReadingPositionRequestReason($meter_reading_position_request_reason)
    {
        $this->container['meter_reading_position_request_reason'] = $meter_reading_position_request_reason;

        return $this;
    }

    /**
     * Gets meter_reading_position_reason
     *
     * @return string
     */
    public function getMeterReadingPositionReason()
    {
        return $this->container['meter_reading_position_reason'];
    }

    /**
     * Sets meter_reading_position_reason
     *
     * @param string $meter_reading_position_reason meter_reading_position_reason
     *
     * @return $this
     */
    public function setMeterReadingPositionReason($meter_reading_position_reason)
    {
        $this->container['meter_reading_position_reason'] = $meter_reading_position_reason;

        return $this;
    }

    /**
     * Gets meter_reading_position_start_reason
     *
     * @return string
     */
    public function getMeterReadingPositionStartReason()
    {
        return $this->container['meter_reading_position_start_reason'];
    }

    /**
     * Sets meter_reading_position_start_reason
     *
     * @param string $meter_reading_position_start_reason meter_reading_position_start_reason
     *
     * @return $this
     */
    public function setMeterReadingPositionStartReason($meter_reading_position_start_reason)
    {
        $this->container['meter_reading_position_start_reason'] = $meter_reading_position_start_reason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


