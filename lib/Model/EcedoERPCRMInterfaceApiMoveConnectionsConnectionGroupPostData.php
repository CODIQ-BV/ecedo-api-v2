<?php
/**
 * EcedoERPCRMInterfaceApiMoveConnectionsConnectionGroupPostData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiMoveConnectionsConnectionGroupPostData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiMoveConnectionsConnectionGroupPostData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.MoveConnectionsConnectionGroupPostData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'move_in_date' => '\DateTime',
        'move_out_date' => '\DateTime',
        'previous_cluster_reference' => 'string',
        'connections' => '\Swagger\Client\Model\EcedoERPCRMInterfaceApiConnectionPostData[]',
        'cer_pre_notified' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'move_in_date' => 'date',
        'move_out_date' => 'date',
        'previous_cluster_reference' => null,
        'connections' => null,
        'cer_pre_notified' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'move_in_date' => 'MoveInDate',
        'move_out_date' => 'MoveOutDate',
        'previous_cluster_reference' => 'PreviousClusterReference',
        'connections' => 'Connections',
        'cer_pre_notified' => 'CERPreNotified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'move_in_date' => 'setMoveInDate',
        'move_out_date' => 'setMoveOutDate',
        'previous_cluster_reference' => 'setPreviousClusterReference',
        'connections' => 'setConnections',
        'cer_pre_notified' => 'setCerPreNotified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'move_in_date' => 'getMoveInDate',
        'move_out_date' => 'getMoveOutDate',
        'previous_cluster_reference' => 'getPreviousClusterReference',
        'connections' => 'getConnections',
        'cer_pre_notified' => 'getCerPreNotified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['move_in_date'] = isset($data['move_in_date']) ? $data['move_in_date'] : null;
        $this->container['move_out_date'] = isset($data['move_out_date']) ? $data['move_out_date'] : null;
        $this->container['previous_cluster_reference'] = isset($data['previous_cluster_reference']) ? $data['previous_cluster_reference'] : null;
        $this->container['connections'] = isset($data['connections']) ? $data['connections'] : null;
        $this->container['cer_pre_notified'] = isset($data['cer_pre_notified']) ? $data['cer_pre_notified'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets move_in_date
     *
     * @return \DateTime
     */
    public function getMoveInDate()
    {
        return $this->container['move_in_date'];
    }

    /**
     * Sets move_in_date
     *
     * @param \DateTime $move_in_date move_in_date
     *
     * @return $this
     */
    public function setMoveInDate($move_in_date)
    {
        $this->container['move_in_date'] = $move_in_date;

        return $this;
    }

    /**
     * Gets move_out_date
     *
     * @return \DateTime
     */
    public function getMoveOutDate()
    {
        return $this->container['move_out_date'];
    }

    /**
     * Sets move_out_date
     *
     * @param \DateTime $move_out_date move_out_date
     *
     * @return $this
     */
    public function setMoveOutDate($move_out_date)
    {
        $this->container['move_out_date'] = $move_out_date;

        return $this;
    }

    /**
     * Gets previous_cluster_reference
     *
     * @return string
     */
    public function getPreviousClusterReference()
    {
        return $this->container['previous_cluster_reference'];
    }

    /**
     * Sets previous_cluster_reference
     *
     * @param string $previous_cluster_reference previous_cluster_reference
     *
     * @return $this
     */
    public function setPreviousClusterReference($previous_cluster_reference)
    {
        $this->container['previous_cluster_reference'] = $previous_cluster_reference;

        return $this;
    }

    /**
     * Gets connections
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiConnectionPostData[]
     */
    public function getConnections()
    {
        return $this->container['connections'];
    }

    /**
     * Sets connections
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceApiConnectionPostData[] $connections connections
     *
     * @return $this
     */
    public function setConnections($connections)
    {
        $this->container['connections'] = $connections;

        return $this;
    }

    /**
     * Gets cer_pre_notified
     *
     * @return bool
     */
    public function getCerPreNotified()
    {
        return $this->container['cer_pre_notified'];
    }

    /**
     * Sets cer_pre_notified
     *
     * @param bool $cer_pre_notified cer_pre_notified
     *
     * @return $this
     */
    public function setCerPreNotified($cer_pre_notified)
    {
        $this->container['cer_pre_notified'] = $cer_pre_notified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


