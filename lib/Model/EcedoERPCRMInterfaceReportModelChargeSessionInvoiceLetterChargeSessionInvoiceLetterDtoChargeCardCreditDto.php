<?php
/**
 * EcedoERPCRMInterfaceReportModelChargeSessionInvoiceLetterChargeSessionInvoiceLetterDtoChargeCardCreditDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceReportModelChargeSessionInvoiceLetterChargeSessionInvoiceLetterDtoChargeCardCreditDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceReportModelChargeSessionInvoiceLetterChargeSessionInvoiceLetterDtoChargeCardCreditDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.ReportModel.ChargeSessionInvoiceLetter.ChargeSessionInvoiceLetterDto_ChargeCardCreditDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ev_charge_card_number' => 'string',
        'product_credit_dto_id' => 'string',
        'credit_start_date' => '\DateTime',
        'credit_end_date' => '\DateTime',
        'initial_amount' => 'double',
        'current_amount' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ev_charge_card_number' => null,
        'product_credit_dto_id' => null,
        'credit_start_date' => 'date',
        'credit_end_date' => 'date',
        'initial_amount' => 'double',
        'current_amount' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ev_charge_card_number' => 'EvChargeCard_Number',
        'product_credit_dto_id' => 'ProductCreditDto_Id',
        'credit_start_date' => 'Credit_StartDate',
        'credit_end_date' => 'Credit_EndDate',
        'initial_amount' => 'InitialAmount',
        'current_amount' => 'CurrentAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ev_charge_card_number' => 'setEvChargeCardNumber',
        'product_credit_dto_id' => 'setProductCreditDtoId',
        'credit_start_date' => 'setCreditStartDate',
        'credit_end_date' => 'setCreditEndDate',
        'initial_amount' => 'setInitialAmount',
        'current_amount' => 'setCurrentAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ev_charge_card_number' => 'getEvChargeCardNumber',
        'product_credit_dto_id' => 'getProductCreditDtoId',
        'credit_start_date' => 'getCreditStartDate',
        'credit_end_date' => 'getCreditEndDate',
        'initial_amount' => 'getInitialAmount',
        'current_amount' => 'getCurrentAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ev_charge_card_number'] = isset($data['ev_charge_card_number']) ? $data['ev_charge_card_number'] : null;
        $this->container['product_credit_dto_id'] = isset($data['product_credit_dto_id']) ? $data['product_credit_dto_id'] : null;
        $this->container['credit_start_date'] = isset($data['credit_start_date']) ? $data['credit_start_date'] : null;
        $this->container['credit_end_date'] = isset($data['credit_end_date']) ? $data['credit_end_date'] : null;
        $this->container['initial_amount'] = isset($data['initial_amount']) ? $data['initial_amount'] : null;
        $this->container['current_amount'] = isset($data['current_amount']) ? $data['current_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ev_charge_card_number
     *
     * @return string
     */
    public function getEvChargeCardNumber()
    {
        return $this->container['ev_charge_card_number'];
    }

    /**
     * Sets ev_charge_card_number
     *
     * @param string $ev_charge_card_number ev_charge_card_number
     *
     * @return $this
     */
    public function setEvChargeCardNumber($ev_charge_card_number)
    {
        $this->container['ev_charge_card_number'] = $ev_charge_card_number;

        return $this;
    }

    /**
     * Gets product_credit_dto_id
     *
     * @return string
     */
    public function getProductCreditDtoId()
    {
        return $this->container['product_credit_dto_id'];
    }

    /**
     * Sets product_credit_dto_id
     *
     * @param string $product_credit_dto_id product_credit_dto_id
     *
     * @return $this
     */
    public function setProductCreditDtoId($product_credit_dto_id)
    {
        $this->container['product_credit_dto_id'] = $product_credit_dto_id;

        return $this;
    }

    /**
     * Gets credit_start_date
     *
     * @return \DateTime
     */
    public function getCreditStartDate()
    {
        return $this->container['credit_start_date'];
    }

    /**
     * Sets credit_start_date
     *
     * @param \DateTime $credit_start_date credit_start_date
     *
     * @return $this
     */
    public function setCreditStartDate($credit_start_date)
    {
        $this->container['credit_start_date'] = $credit_start_date;

        return $this;
    }

    /**
     * Gets credit_end_date
     *
     * @return \DateTime
     */
    public function getCreditEndDate()
    {
        return $this->container['credit_end_date'];
    }

    /**
     * Sets credit_end_date
     *
     * @param \DateTime $credit_end_date credit_end_date
     *
     * @return $this
     */
    public function setCreditEndDate($credit_end_date)
    {
        $this->container['credit_end_date'] = $credit_end_date;

        return $this;
    }

    /**
     * Gets initial_amount
     *
     * @return double
     */
    public function getInitialAmount()
    {
        return $this->container['initial_amount'];
    }

    /**
     * Sets initial_amount
     *
     * @param double $initial_amount initial_amount
     *
     * @return $this
     */
    public function setInitialAmount($initial_amount)
    {
        $this->container['initial_amount'] = $initial_amount;

        return $this;
    }

    /**
     * Gets current_amount
     *
     * @return double
     */
    public function getCurrentAmount()
    {
        return $this->container['current_amount'];
    }

    /**
     * Sets current_amount
     *
     * @param double $current_amount current_amount
     *
     * @return $this
     */
    public function setCurrentAmount($current_amount)
    {
        $this->container['current_amount'] = $current_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


