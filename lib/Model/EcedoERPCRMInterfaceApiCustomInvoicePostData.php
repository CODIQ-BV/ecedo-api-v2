<?php
/**
 * EcedoERPCRMInterfaceApiCustomInvoicePostData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiCustomInvoicePostData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiCustomInvoicePostData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.CustomInvoicePostData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'debtor_id' => 'string',
        'financial_description' => 'string',
        'invoice_date' => '\DateTime',
        'payment_due_date' => '\DateTime',
        'payment_method' => 'string',
        'invoice_rows' => '\Swagger\Client\Model\EcedoERPCRMInterfaceApiCustomInvoiceRowPostData[]',
        'invoice_sub_type' => 'string',
        'client_reference' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'debtor_id' => 'uuid',
        'financial_description' => null,
        'invoice_date' => 'date',
        'payment_due_date' => 'date',
        'payment_method' => null,
        'invoice_rows' => null,
        'invoice_sub_type' => null,
        'client_reference' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'debtor_id' => 'DebtorId',
        'financial_description' => 'FinancialDescription',
        'invoice_date' => 'InvoiceDate',
        'payment_due_date' => 'PaymentDueDate',
        'payment_method' => 'PaymentMethod',
        'invoice_rows' => 'InvoiceRows',
        'invoice_sub_type' => 'InvoiceSubType',
        'client_reference' => 'ClientReference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'debtor_id' => 'setDebtorId',
        'financial_description' => 'setFinancialDescription',
        'invoice_date' => 'setInvoiceDate',
        'payment_due_date' => 'setPaymentDueDate',
        'payment_method' => 'setPaymentMethod',
        'invoice_rows' => 'setInvoiceRows',
        'invoice_sub_type' => 'setInvoiceSubType',
        'client_reference' => 'setClientReference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'debtor_id' => 'getDebtorId',
        'financial_description' => 'getFinancialDescription',
        'invoice_date' => 'getInvoiceDate',
        'payment_due_date' => 'getPaymentDueDate',
        'payment_method' => 'getPaymentMethod',
        'invoice_rows' => 'getInvoiceRows',
        'invoice_sub_type' => 'getInvoiceSubType',
        'client_reference' => 'getClientReference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PAYMENT_METHOD_AUTOMATIC_COLLECTION = 'AutomaticCollection';
    const PAYMENT_METHOD_INVOICE = 'Invoice';
    const PAYMENT_METHOD_VIA_PARENT_ORGANIZATION = 'ViaParentOrganization';
    const PAYMENT_METHOD_DIRECT_PAY = 'DirectPay';
    const INVOICE_SUB_TYPE_WIND_SHARE = 'WindShare';
    const INVOICE_SUB_TYPE_TERMINATION_FEE = 'TerminationFee';
    const INVOICE_SUB_TYPE_PRODUCER_SETTLEMENT = 'ProducerSettlement';
    const INVOICE_SUB_TYPE_DIRECT_PAY_SETTLEMENT = 'DirectPaySettlement';
    const INVOICE_SUB_TYPE_MSP_SETTLEMENT_ALLEGO = 'MspSettlementAllego';
    const INVOICE_SUB_TYPE_CPO_SETTLEMENT = 'CpoSettlement';
    const INVOICE_SUB_TYPE_SOLAR_SETTLEMENT = 'SolarSettlement';
    const INVOICE_SUB_TYPE_EV_CHARGE_CARD_SETTLEMENT = 'EvChargeCardSettlement';
    const INVOICE_SUB_TYPE_CHARGE_SESSION_CREDIT = 'ChargeSessionCredit';
    const INVOICE_SUB_TYPE_SMART_CHARGING_SETTLEMENT = 'SmartChargingSettlement';
    const INVOICE_SUB_TYPE_ENERGY_PURCHASE_SETTLEMENT = 'EnergyPurchaseSettlement';
    const INVOICE_SUB_TYPE_EV_CHARGER_SETTLEMENT = 'EvChargerSettlement';
    const INVOICE_SUB_TYPE_MSP_SETTLEMENT = 'MspSettlement';
    const INVOICE_SUB_TYPE_EV_COLLECTIVE_SETTLEMENT = 'EvCollectiveSettlement';
    const INVOICE_SUB_TYPE_DEPOSIT = 'Deposit';
    const INVOICE_SUB_TYPE_SERVICE_CONTRACT_SETTLEMENT = 'ServiceContractSettlement';
    const INVOICE_SUB_TYPE_ENERGY_PURCHASE_CORRECTION_SETTLEMENT = 'EnergyPurchaseCorrectionSettlement';
    const INVOICE_SUB_TYPE_RECONCILIATION_SETTLEMENT = 'ReconciliationSettlement';
    const INVOICE_SUB_TYPE_CERTIFICATE_SALE = 'CertificateSale';
    const INVOICE_SUB_TYPE_EV_BUSINESS_PARTNER = 'EVBusinessPartner';
    const INVOICE_SUB_TYPE_CUSTOM_GENERAL = 'Custom_General';
    const INVOICE_SUB_TYPE_CUSTOM_CHARGING_STATION = 'Custom_ChargingStation';
    const INVOICE_SUB_TYPE_CUSTOM_CHARGE_CARD = 'Custom_ChargeCard';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentMethodAllowableValues()
    {
        return [
            self::PAYMENT_METHOD_AUTOMATIC_COLLECTION,
            self::PAYMENT_METHOD_INVOICE,
            self::PAYMENT_METHOD_VIA_PARENT_ORGANIZATION,
            self::PAYMENT_METHOD_DIRECT_PAY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvoiceSubTypeAllowableValues()
    {
        return [
            self::INVOICE_SUB_TYPE_WIND_SHARE,
            self::INVOICE_SUB_TYPE_TERMINATION_FEE,
            self::INVOICE_SUB_TYPE_PRODUCER_SETTLEMENT,
            self::INVOICE_SUB_TYPE_DIRECT_PAY_SETTLEMENT,
            self::INVOICE_SUB_TYPE_MSP_SETTLEMENT_ALLEGO,
            self::INVOICE_SUB_TYPE_CPO_SETTLEMENT,
            self::INVOICE_SUB_TYPE_SOLAR_SETTLEMENT,
            self::INVOICE_SUB_TYPE_EV_CHARGE_CARD_SETTLEMENT,
            self::INVOICE_SUB_TYPE_CHARGE_SESSION_CREDIT,
            self::INVOICE_SUB_TYPE_SMART_CHARGING_SETTLEMENT,
            self::INVOICE_SUB_TYPE_ENERGY_PURCHASE_SETTLEMENT,
            self::INVOICE_SUB_TYPE_EV_CHARGER_SETTLEMENT,
            self::INVOICE_SUB_TYPE_MSP_SETTLEMENT,
            self::INVOICE_SUB_TYPE_EV_COLLECTIVE_SETTLEMENT,
            self::INVOICE_SUB_TYPE_DEPOSIT,
            self::INVOICE_SUB_TYPE_SERVICE_CONTRACT_SETTLEMENT,
            self::INVOICE_SUB_TYPE_ENERGY_PURCHASE_CORRECTION_SETTLEMENT,
            self::INVOICE_SUB_TYPE_RECONCILIATION_SETTLEMENT,
            self::INVOICE_SUB_TYPE_CERTIFICATE_SALE,
            self::INVOICE_SUB_TYPE_EV_BUSINESS_PARTNER,
            self::INVOICE_SUB_TYPE_CUSTOM_GENERAL,
            self::INVOICE_SUB_TYPE_CUSTOM_CHARGING_STATION,
            self::INVOICE_SUB_TYPE_CUSTOM_CHARGE_CARD,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['debtor_id'] = isset($data['debtor_id']) ? $data['debtor_id'] : null;
        $this->container['financial_description'] = isset($data['financial_description']) ? $data['financial_description'] : null;
        $this->container['invoice_date'] = isset($data['invoice_date']) ? $data['invoice_date'] : null;
        $this->container['payment_due_date'] = isset($data['payment_due_date']) ? $data['payment_due_date'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['invoice_rows'] = isset($data['invoice_rows']) ? $data['invoice_rows'] : null;
        $this->container['invoice_sub_type'] = isset($data['invoice_sub_type']) ? $data['invoice_sub_type'] : null;
        $this->container['client_reference'] = isset($data['client_reference']) ? $data['client_reference'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($this->container['payment_method']) && !in_array($this->container['payment_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInvoiceSubTypeAllowableValues();
        if (!is_null($this->container['invoice_sub_type']) && !in_array($this->container['invoice_sub_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'invoice_sub_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets debtor_id
     *
     * @return string
     */
    public function getDebtorId()
    {
        return $this->container['debtor_id'];
    }

    /**
     * Sets debtor_id
     *
     * @param string $debtor_id Optionele Guid waarmee gespecificeerd kan worden voor welke (contract)debiteur deze factuur moet worden aangemaakt. Als deze variabele niet wordt meegegeven wordt de hoofddebiteur van de klant gebruikt.
     *
     * @return $this
     */
    public function setDebtorId($debtor_id)
    {
        $this->container['debtor_id'] = $debtor_id;

        return $this;
    }

    /**
     * Gets financial_description
     *
     * @return string
     */
    public function getFinancialDescription()
    {
        return $this->container['financial_description'];
    }

    /**
     * Sets financial_description
     *
     * @param string $financial_description De financiële omschrijving van de factuur. Dit is o.a. zichtbaar in de omschrijving van een automatische incasso.
     *
     * @return $this
     */
    public function setFinancialDescription($financial_description)
    {
        $this->container['financial_description'] = $financial_description;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return \DateTime
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param \DateTime $invoice_date Optionele factuurdatum. Als deze datum niet wordt meegegeven wordt automatisch vandaag gebruikt.
     *
     * @return $this
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets payment_due_date
     *
     * @return \DateTime
     */
    public function getPaymentDueDate()
    {
        return $this->container['payment_due_date'];
    }

    /**
     * Sets payment_due_date
     *
     * @param \DateTime $payment_due_date Optionele vervaldatum van de factuur. Als deze niet wordt meegegeven wordt deze automatisch gebaseerd op de factuurdatum en de betaaltermijn van de klant.
     *
     * @return $this
     */
    public function setPaymentDueDate($payment_due_date)
    {
        $this->container['payment_due_date'] = $payment_due_date;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method Optionele betaalmethode voor deze factuur. Als deze variabele niet wordt meegegeven wordt automatisch de betaalmethode van de debiteur geselecteerd.
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($payment_method) && !in_array($payment_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets invoice_rows
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiCustomInvoiceRowPostData[]
     */
    public function getInvoiceRows()
    {
        return $this->container['invoice_rows'];
    }

    /**
     * Sets invoice_rows
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceApiCustomInvoiceRowPostData[] $invoice_rows Een lijst van factuurregels. Zie de specificatie van het het object voor meer informatie.
     *
     * @return $this
     */
    public function setInvoiceRows($invoice_rows)
    {
        $this->container['invoice_rows'] = $invoice_rows;

        return $this;
    }

    /**
     * Gets invoice_sub_type
     *
     * @return string
     */
    public function getInvoiceSubType()
    {
        return $this->container['invoice_sub_type'];
    }

    /**
     * Sets invoice_sub_type
     *
     * @param string $invoice_sub_type Optioneel factuur-subtype. Als deze niet wordt meegegeven wordt de waarde `InvoiceSubTypes.Custom_General` gebruikt. Door een specifiek subtype te gebruiken kan afgeweken worden in bijvoorbeeld de factuur-opmaak. Alleen InvoiceSubTypes met prefix 'Custom_' zijn toegestaan.
     *
     * @return $this
     */
    public function setInvoiceSubType($invoice_sub_type)
    {
        $allowedValues = $this->getInvoiceSubTypeAllowableValues();
        if (!is_null($invoice_sub_type) && !in_array($invoice_sub_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'invoice_sub_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invoice_sub_type'] = $invoice_sub_type;

        return $this;
    }

    /**
     * Gets client_reference
     *
     * @return string
     */
    public function getClientReference()
    {
        return $this->container['client_reference'];
    }

    /**
     * Sets client_reference
     *
     * @param string $client_reference Optioneel Eigen referentie naar deze factuur
     *
     * @return $this
     */
    public function setClientReference($client_reference)
    {
        $this->container['client_reference'] = $client_reference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


