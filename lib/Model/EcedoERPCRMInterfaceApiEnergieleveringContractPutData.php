<?php
/**
 * EcedoERPCRMInterfaceApiEnergieleveringContractPutData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiEnergieleveringContractPutData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiEnergieleveringContractPutData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.EnergieleveringContractPutData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'meelift_proposition_reference' => 'string',
        'original_end_date' => '\DateTime',
        'start_reason' => 'string',
        'end_reason' => 'string',
        'previous_contract_id' => 'string',
        'channel' => 'string',
        'sales_reference' => 'string',
        'status' => 'string',
        'cancellation_reason' => 'string',
        'contract_properties' => '\Swagger\Client\Model\EcedoERPCRMInterfaceApiContractPropertyPostData[]',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'agreement_date' => '\DateTime',
        'proposition_reference' => 'string',
        'comment' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'meelift_proposition_reference' => null,
        'original_end_date' => 'date',
        'start_reason' => null,
        'end_reason' => null,
        'previous_contract_id' => 'uuid',
        'channel' => null,
        'sales_reference' => null,
        'status' => null,
        'cancellation_reason' => null,
        'contract_properties' => null,
        'start_date' => 'date',
        'end_date' => 'date',
        'agreement_date' => 'date',
        'proposition_reference' => null,
        'comment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'meelift_proposition_reference' => 'MeeliftPropositionReference',
        'original_end_date' => 'OriginalEndDate',
        'start_reason' => 'StartReason',
        'end_reason' => 'EndReason',
        'previous_contract_id' => 'PreviousContractId',
        'channel' => 'Channel',
        'sales_reference' => 'SalesReference',
        'status' => 'Status',
        'cancellation_reason' => 'CancellationReason',
        'contract_properties' => 'ContractProperties',
        'start_date' => 'StartDate',
        'end_date' => 'EndDate',
        'agreement_date' => 'AgreementDate',
        'proposition_reference' => 'PropositionReference',
        'comment' => 'Comment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'meelift_proposition_reference' => 'setMeeliftPropositionReference',
        'original_end_date' => 'setOriginalEndDate',
        'start_reason' => 'setStartReason',
        'end_reason' => 'setEndReason',
        'previous_contract_id' => 'setPreviousContractId',
        'channel' => 'setChannel',
        'sales_reference' => 'setSalesReference',
        'status' => 'setStatus',
        'cancellation_reason' => 'setCancellationReason',
        'contract_properties' => 'setContractProperties',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'agreement_date' => 'setAgreementDate',
        'proposition_reference' => 'setPropositionReference',
        'comment' => 'setComment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'meelift_proposition_reference' => 'getMeeliftPropositionReference',
        'original_end_date' => 'getOriginalEndDate',
        'start_reason' => 'getStartReason',
        'end_reason' => 'getEndReason',
        'previous_contract_id' => 'getPreviousContractId',
        'channel' => 'getChannel',
        'sales_reference' => 'getSalesReference',
        'status' => 'getStatus',
        'cancellation_reason' => 'getCancellationReason',
        'contract_properties' => 'getContractProperties',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'agreement_date' => 'getAgreementDate',
        'proposition_reference' => 'getPropositionReference',
        'comment' => 'getComment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const START_REASON_INITIAL = 'Initial';
    const START_REASON_CUSTOMER_RENEWAL = 'CustomerRenewal';
    const START_REASON_CONTRACT_TYPE_CHANGE = 'ContractTypeChange';
    const START_REASON_AUTOMATIC_RENEWAL = 'AutomaticRenewal';
    const START_REASON_MOVE = 'Move';
    const START_REASON_PRODUCER_SWITCH = 'ProducerSwitch';
    const STATUS_PROVISIONAL = 'Provisional';
    const STATUS_ACTIVE = 'Active';
    const STATUS_CANCELLED = 'Cancelled';
    const STATUS_ENDED = 'Ended';
    const STATUS_WAIT_FOR_APPROVAL = 'WaitForApproval';
    const STATUS_PROPOSED = 'Proposed';
    const STATUS_FINALIZED = 'Finalized';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStartReasonAllowableValues()
    {
        return [
            self::START_REASON_INITIAL,
            self::START_REASON_CUSTOMER_RENEWAL,
            self::START_REASON_CONTRACT_TYPE_CHANGE,
            self::START_REASON_AUTOMATIC_RENEWAL,
            self::START_REASON_MOVE,
            self::START_REASON_PRODUCER_SWITCH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PROVISIONAL,
            self::STATUS_ACTIVE,
            self::STATUS_CANCELLED,
            self::STATUS_ENDED,
            self::STATUS_WAIT_FOR_APPROVAL,
            self::STATUS_PROPOSED,
            self::STATUS_FINALIZED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['meelift_proposition_reference'] = isset($data['meelift_proposition_reference']) ? $data['meelift_proposition_reference'] : null;
        $this->container['original_end_date'] = isset($data['original_end_date']) ? $data['original_end_date'] : null;
        $this->container['start_reason'] = isset($data['start_reason']) ? $data['start_reason'] : null;
        $this->container['end_reason'] = isset($data['end_reason']) ? $data['end_reason'] : null;
        $this->container['previous_contract_id'] = isset($data['previous_contract_id']) ? $data['previous_contract_id'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['sales_reference'] = isset($data['sales_reference']) ? $data['sales_reference'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['cancellation_reason'] = isset($data['cancellation_reason']) ? $data['cancellation_reason'] : null;
        $this->container['contract_properties'] = isset($data['contract_properties']) ? $data['contract_properties'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['agreement_date'] = isset($data['agreement_date']) ? $data['agreement_date'] : null;
        $this->container['proposition_reference'] = isset($data['proposition_reference']) ? $data['proposition_reference'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStartReasonAllowableValues();
        if (!is_null($this->container['start_reason']) && !in_array($this->container['start_reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'start_reason', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets meelift_proposition_reference
     *
     * @return string
     */
    public function getMeeliftPropositionReference()
    {
        return $this->container['meelift_proposition_reference'];
    }

    /**
     * Sets meelift_proposition_reference
     *
     * @param string $meelift_proposition_reference Optionele parameter (default null). Hiermee kan de meeliftpropositie van een contract worden aangepast. Gebruik dit alleen in zeer specifieke gevallen.
     *
     * @return $this
     */
    public function setMeeliftPropositionReference($meelift_proposition_reference)
    {
        $this->container['meelift_proposition_reference'] = $meelift_proposition_reference;

        return $this;
    }

    /**
     * Gets original_end_date
     *
     * @return \DateTime
     */
    public function getOriginalEndDate()
    {
        return $this->container['original_end_date'];
    }

    /**
     * Sets original_end_date
     *
     * @param \DateTime $original_end_date Optionele parameter (default null). Hiermee kan de originele einddatum van een contract worden aangepast. Gebruik dit alleen in zeer specifieke gevallen.
     *
     * @return $this
     */
    public function setOriginalEndDate($original_end_date)
    {
        $this->container['original_end_date'] = $original_end_date;

        return $this;
    }

    /**
     * Gets start_reason
     *
     * @return string
     */
    public function getStartReason()
    {
        return $this->container['start_reason'];
    }

    /**
     * Sets start_reason
     *
     * @param string $start_reason Optionele parameter (default null). Hiermee kan de startreden van een contract worden aangepast. Gebruik dit alleen in zeer specifieke gevallen.
     *
     * @return $this
     */
    public function setStartReason($start_reason)
    {
        $allowedValues = $this->getStartReasonAllowableValues();
        if (!is_null($start_reason) && !in_array($start_reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'start_reason', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['start_reason'] = $start_reason;

        return $this;
    }

    /**
     * Gets end_reason
     *
     * @return string
     */
    public function getEndReason()
    {
        return $this->container['end_reason'];
    }

    /**
     * Sets end_reason
     *
     * @param string $end_reason Optionele parameter (default null). Hiermee kan de eindreden van een contract worden aangepast. Gebruik dit alleen in zeer specifieke gevallen.
     *
     * @return $this
     */
    public function setEndReason($end_reason)
    {
        $this->container['end_reason'] = $end_reason;

        return $this;
    }

    /**
     * Gets previous_contract_id
     *
     * @return string
     */
    public function getPreviousContractId()
    {
        return $this->container['previous_contract_id'];
    }

    /**
     * Sets previous_contract_id
     *
     * @param string $previous_contract_id Optionele parameter (default null). Hiermee kan het huidige contract aan een voorgaand contract worden gekoppeld of kan de koppeling worden verbroken. Gebruik dit alleen in zeer specifieke gevallen.
     *
     * @return $this
     */
    public function setPreviousContractId($previous_contract_id)
    {
        $this->container['previous_contract_id'] = $previous_contract_id;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel Optionele parameter (default null). Dit is een verouderde parameter. Gebruik de ContractProperties-array in plaats van dit directe veld. De bestaande waarde wordt alleen bijgewerkt wanneer de nieuwe waarde niet null is. Geef een lege string mee om de bestaande waarde weg te halen. Dit veld mag niet gebruikt worden wanneer er ContractProperties worden meegestuurd.
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets sales_reference
     *
     * @return string
     */
    public function getSalesReference()
    {
        return $this->container['sales_reference'];
    }

    /**
     * Sets sales_reference
     *
     * @param string $sales_reference Optionele parameter (default null). Dit is een verouderde parameter. Gebruik de ContractProperties-array in plaats van dit directe veld. De bestaande waarde wordt alleen bijgewerkt wanneer de nieuwe waarde niet null is. Geef een lege string mee om de bestaande waarde weg te halen. Dit veld mag niet gebruikt worden wanneer er ContractProperties worden meegestuurd.
     *
     * @return $this
     */
    public function setSalesReference($sales_reference)
    {
        $this->container['sales_reference'] = $sales_reference;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Optionele parameter (default null). Deze parameter kan alleen gebruikt worden bij energieleveringcontracten. Daarnaast is het alleen mogelijk om de status van een actief contract aan te passen naar geannuleerd en de status van een geannuleerd contract aan te passen naar actief. Andere transities zijn niet toegestaan. Bij het aanpassen van de status wordt automatisch de eindreden van het contract ingesteld.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets cancellation_reason
     *
     * @return string
     */
    public function getCancellationReason()
    {
        return $this->container['cancellation_reason'];
    }

    /**
     * Sets cancellation_reason
     *
     * @param string $cancellation_reason Optionele parameter (default null). Deze parameter kan alleen gebruikt worden om de reden van opzegging bij te werken.
     *
     * @return $this
     */
    public function setCancellationReason($cancellation_reason)
    {
        $this->container['cancellation_reason'] = $cancellation_reason;

        return $this;
    }

    /**
     * Gets contract_properties
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiContractPropertyPostData[]
     */
    public function getContractProperties()
    {
        return $this->container['contract_properties'];
    }

    /**
     * Sets contract_properties
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceApiContractPropertyPostData[] $contract_properties Optionele parameter (default null). Deze lijst kan gebruikt worden om de waarden van contractafspraken aan te passen of om bestaande contractafspraken weg te halen.
     *
     * @return $this
     */
    public function setContractProperties($contract_properties)
    {
        $this->container['contract_properties'] = $contract_properties;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date Optionele parameter (default null). Hiermee kan de startdatum van een contract worden aangepast. Gebruik dit alleen in zeer specifieke gevallen.
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date Optionele parameter (default null). Hiermee kan de einddatum van een contract worden aangepast. Gebruik dit alleen in zeer specifieke gevallen.
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets agreement_date
     *
     * @return \DateTime
     */
    public function getAgreementDate()
    {
        return $this->container['agreement_date'];
    }

    /**
     * Sets agreement_date
     *
     * @param \DateTime $agreement_date Optionele parameter (default null). Hiermee kan de tekendatum van een contract worden aangepast. Gebruik dit alleen in zeer specifieke gevallen.
     *
     * @return $this
     */
    public function setAgreementDate($agreement_date)
    {
        $this->container['agreement_date'] = $agreement_date;

        return $this;
    }

    /**
     * Gets proposition_reference
     *
     * @return string
     */
    public function getPropositionReference()
    {
        return $this->container['proposition_reference'];
    }

    /**
     * Sets proposition_reference
     *
     * @param string $proposition_reference Optionele parameter (default null). Hiermee kan de propositie van een contract worden aangepast. Gebruik dit alleen in zeer specifieke gevallen.
     *
     * @return $this
     */
    public function setPropositionReference($proposition_reference)
    {
        $this->container['proposition_reference'] = $proposition_reference;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Optionele parameter (default null). De bestaande waarde wordt alleen bijgewerkt wanneer de nieuwe waarde niet null is. Geef een lege string mee om de bestaande waarde weg te halen.
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


