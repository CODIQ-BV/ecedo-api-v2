<?php
/**
 * EcedoERPCRMInterfaceApiCertiqDashboardDataPerPeriod
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiCertiqDashboardDataPerPeriod Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiCertiqDashboardDataPerPeriod implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.CertiqDashboardDataPerPeriod';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'cnt_total_issued' => 'int',
        'cnt_issued_own_usage' => 'int',
        'cnt_used' => 'int',
        'cnt_expired' => 'int',
        'cnt_exported' => 'int',
        'cnt_withdrawal_loss' => 'int',
        'cnt_imported' => 'int',
        'cnt_incoming_transfers' => 'int',
        'cnt_outgoing_transfers' => 'int',
        'cnt_total_valid' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'start_date' => 'date',
        'end_date' => 'date',
        'cnt_total_issued' => 'int32',
        'cnt_issued_own_usage' => 'int32',
        'cnt_used' => 'int32',
        'cnt_expired' => 'int32',
        'cnt_exported' => 'int32',
        'cnt_withdrawal_loss' => 'int32',
        'cnt_imported' => 'int32',
        'cnt_incoming_transfers' => 'int32',
        'cnt_outgoing_transfers' => 'int32',
        'cnt_total_valid' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_date' => 'StartDate',
        'end_date' => 'EndDate',
        'cnt_total_issued' => 'CntTotalIssued',
        'cnt_issued_own_usage' => 'CntIssuedOwnUsage',
        'cnt_used' => 'CntUsed',
        'cnt_expired' => 'CntExpired',
        'cnt_exported' => 'CntExported',
        'cnt_withdrawal_loss' => 'CntWithdrawalLoss',
        'cnt_imported' => 'CntImported',
        'cnt_incoming_transfers' => 'CntIncomingTransfers',
        'cnt_outgoing_transfers' => 'CntOutgoingTransfers',
        'cnt_total_valid' => 'CntTotalValid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'cnt_total_issued' => 'setCntTotalIssued',
        'cnt_issued_own_usage' => 'setCntIssuedOwnUsage',
        'cnt_used' => 'setCntUsed',
        'cnt_expired' => 'setCntExpired',
        'cnt_exported' => 'setCntExported',
        'cnt_withdrawal_loss' => 'setCntWithdrawalLoss',
        'cnt_imported' => 'setCntImported',
        'cnt_incoming_transfers' => 'setCntIncomingTransfers',
        'cnt_outgoing_transfers' => 'setCntOutgoingTransfers',
        'cnt_total_valid' => 'setCntTotalValid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'cnt_total_issued' => 'getCntTotalIssued',
        'cnt_issued_own_usage' => 'getCntIssuedOwnUsage',
        'cnt_used' => 'getCntUsed',
        'cnt_expired' => 'getCntExpired',
        'cnt_exported' => 'getCntExported',
        'cnt_withdrawal_loss' => 'getCntWithdrawalLoss',
        'cnt_imported' => 'getCntImported',
        'cnt_incoming_transfers' => 'getCntIncomingTransfers',
        'cnt_outgoing_transfers' => 'getCntOutgoingTransfers',
        'cnt_total_valid' => 'getCntTotalValid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['cnt_total_issued'] = isset($data['cnt_total_issued']) ? $data['cnt_total_issued'] : null;
        $this->container['cnt_issued_own_usage'] = isset($data['cnt_issued_own_usage']) ? $data['cnt_issued_own_usage'] : null;
        $this->container['cnt_used'] = isset($data['cnt_used']) ? $data['cnt_used'] : null;
        $this->container['cnt_expired'] = isset($data['cnt_expired']) ? $data['cnt_expired'] : null;
        $this->container['cnt_exported'] = isset($data['cnt_exported']) ? $data['cnt_exported'] : null;
        $this->container['cnt_withdrawal_loss'] = isset($data['cnt_withdrawal_loss']) ? $data['cnt_withdrawal_loss'] : null;
        $this->container['cnt_imported'] = isset($data['cnt_imported']) ? $data['cnt_imported'] : null;
        $this->container['cnt_incoming_transfers'] = isset($data['cnt_incoming_transfers']) ? $data['cnt_incoming_transfers'] : null;
        $this->container['cnt_outgoing_transfers'] = isset($data['cnt_outgoing_transfers']) ? $data['cnt_outgoing_transfers'] : null;
        $this->container['cnt_total_valid'] = isset($data['cnt_total_valid']) ? $data['cnt_total_valid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets cnt_total_issued
     *
     * @return int
     */
    public function getCntTotalIssued()
    {
        return $this->container['cnt_total_issued'];
    }

    /**
     * Sets cnt_total_issued
     *
     * @param int $cnt_total_issued cnt_total_issued
     *
     * @return $this
     */
    public function setCntTotalIssued($cnt_total_issued)
    {
        $this->container['cnt_total_issued'] = $cnt_total_issued;

        return $this;
    }

    /**
     * Gets cnt_issued_own_usage
     *
     * @return int
     */
    public function getCntIssuedOwnUsage()
    {
        return $this->container['cnt_issued_own_usage'];
    }

    /**
     * Sets cnt_issued_own_usage
     *
     * @param int $cnt_issued_own_usage cnt_issued_own_usage
     *
     * @return $this
     */
    public function setCntIssuedOwnUsage($cnt_issued_own_usage)
    {
        $this->container['cnt_issued_own_usage'] = $cnt_issued_own_usage;

        return $this;
    }

    /**
     * Gets cnt_used
     *
     * @return int
     */
    public function getCntUsed()
    {
        return $this->container['cnt_used'];
    }

    /**
     * Sets cnt_used
     *
     * @param int $cnt_used cnt_used
     *
     * @return $this
     */
    public function setCntUsed($cnt_used)
    {
        $this->container['cnt_used'] = $cnt_used;

        return $this;
    }

    /**
     * Gets cnt_expired
     *
     * @return int
     */
    public function getCntExpired()
    {
        return $this->container['cnt_expired'];
    }

    /**
     * Sets cnt_expired
     *
     * @param int $cnt_expired cnt_expired
     *
     * @return $this
     */
    public function setCntExpired($cnt_expired)
    {
        $this->container['cnt_expired'] = $cnt_expired;

        return $this;
    }

    /**
     * Gets cnt_exported
     *
     * @return int
     */
    public function getCntExported()
    {
        return $this->container['cnt_exported'];
    }

    /**
     * Sets cnt_exported
     *
     * @param int $cnt_exported cnt_exported
     *
     * @return $this
     */
    public function setCntExported($cnt_exported)
    {
        $this->container['cnt_exported'] = $cnt_exported;

        return $this;
    }

    /**
     * Gets cnt_withdrawal_loss
     *
     * @return int
     */
    public function getCntWithdrawalLoss()
    {
        return $this->container['cnt_withdrawal_loss'];
    }

    /**
     * Sets cnt_withdrawal_loss
     *
     * @param int $cnt_withdrawal_loss cnt_withdrawal_loss
     *
     * @return $this
     */
    public function setCntWithdrawalLoss($cnt_withdrawal_loss)
    {
        $this->container['cnt_withdrawal_loss'] = $cnt_withdrawal_loss;

        return $this;
    }

    /**
     * Gets cnt_imported
     *
     * @return int
     */
    public function getCntImported()
    {
        return $this->container['cnt_imported'];
    }

    /**
     * Sets cnt_imported
     *
     * @param int $cnt_imported cnt_imported
     *
     * @return $this
     */
    public function setCntImported($cnt_imported)
    {
        $this->container['cnt_imported'] = $cnt_imported;

        return $this;
    }

    /**
     * Gets cnt_incoming_transfers
     *
     * @return int
     */
    public function getCntIncomingTransfers()
    {
        return $this->container['cnt_incoming_transfers'];
    }

    /**
     * Sets cnt_incoming_transfers
     *
     * @param int $cnt_incoming_transfers cnt_incoming_transfers
     *
     * @return $this
     */
    public function setCntIncomingTransfers($cnt_incoming_transfers)
    {
        $this->container['cnt_incoming_transfers'] = $cnt_incoming_transfers;

        return $this;
    }

    /**
     * Gets cnt_outgoing_transfers
     *
     * @return int
     */
    public function getCntOutgoingTransfers()
    {
        return $this->container['cnt_outgoing_transfers'];
    }

    /**
     * Sets cnt_outgoing_transfers
     *
     * @param int $cnt_outgoing_transfers cnt_outgoing_transfers
     *
     * @return $this
     */
    public function setCntOutgoingTransfers($cnt_outgoing_transfers)
    {
        $this->container['cnt_outgoing_transfers'] = $cnt_outgoing_transfers;

        return $this;
    }

    /**
     * Gets cnt_total_valid
     *
     * @return int
     */
    public function getCntTotalValid()
    {
        return $this->container['cnt_total_valid'];
    }

    /**
     * Sets cnt_total_valid
     *
     * @param int $cnt_total_valid cnt_total_valid
     *
     * @return $this
     */
    public function setCntTotalValid($cnt_total_valid)
    {
        $this->container['cnt_total_valid'] = $cnt_total_valid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


