<?php
/**
 * EcedoERPCRMInterfaceReportModelSettlementInvoiceLetterSettlementInvoiceLetterEnergyDtoNewAdvancePayment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceReportModelSettlementInvoiceLetterSettlementInvoiceLetterEnergyDtoNewAdvancePayment Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceReportModelSettlementInvoiceLetterSettlementInvoiceLetterEnergyDtoNewAdvancePayment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.ReportModel.SettlementInvoiceLetter.SettlementInvoiceLetterEnergyDto_NewAdvancePayment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'advance_payment_id' => 'string',
        'organization_id' => 'string',
        'has_advance_payment' => 'bool',
        'has_agreed_amount' => 'bool',
        'advance_payment_start_date' => '\DateTime',
        'advance_payment_total_amount' => 'double',
        'advance_payment_total_amount_electricity' => 'double',
        'advance_payment_total_amount_gas' => 'double',
        'advance_payment_scheme' => 'string',
        'advance_payment_annual_standard_usage' => '\Swagger\Client\Model\EcedoERPCRMInterfaceReportModelAnnualStandardUsageDto'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'advance_payment_id' => null,
        'organization_id' => null,
        'has_advance_payment' => null,
        'has_agreed_amount' => null,
        'advance_payment_start_date' => 'date',
        'advance_payment_total_amount' => 'double',
        'advance_payment_total_amount_electricity' => 'double',
        'advance_payment_total_amount_gas' => 'double',
        'advance_payment_scheme' => null,
        'advance_payment_annual_standard_usage' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'advance_payment_id' => 'AdvancePayment_Id',
        'organization_id' => 'Organization_Id',
        'has_advance_payment' => 'HasAdvancePayment',
        'has_agreed_amount' => 'HasAgreedAmount',
        'advance_payment_start_date' => 'AdvancePayment_StartDate',
        'advance_payment_total_amount' => 'AdvancePayment_TotalAmount',
        'advance_payment_total_amount_electricity' => 'AdvancePayment_TotalAmountElectricity',
        'advance_payment_total_amount_gas' => 'AdvancePayment_TotalAmountGas',
        'advance_payment_scheme' => 'AdvancePayment_Scheme',
        'advance_payment_annual_standard_usage' => 'AdvancePayment_AnnualStandardUsage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'advance_payment_id' => 'setAdvancePaymentId',
        'organization_id' => 'setOrganizationId',
        'has_advance_payment' => 'setHasAdvancePayment',
        'has_agreed_amount' => 'setHasAgreedAmount',
        'advance_payment_start_date' => 'setAdvancePaymentStartDate',
        'advance_payment_total_amount' => 'setAdvancePaymentTotalAmount',
        'advance_payment_total_amount_electricity' => 'setAdvancePaymentTotalAmountElectricity',
        'advance_payment_total_amount_gas' => 'setAdvancePaymentTotalAmountGas',
        'advance_payment_scheme' => 'setAdvancePaymentScheme',
        'advance_payment_annual_standard_usage' => 'setAdvancePaymentAnnualStandardUsage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'advance_payment_id' => 'getAdvancePaymentId',
        'organization_id' => 'getOrganizationId',
        'has_advance_payment' => 'getHasAdvancePayment',
        'has_agreed_amount' => 'getHasAgreedAmount',
        'advance_payment_start_date' => 'getAdvancePaymentStartDate',
        'advance_payment_total_amount' => 'getAdvancePaymentTotalAmount',
        'advance_payment_total_amount_electricity' => 'getAdvancePaymentTotalAmountElectricity',
        'advance_payment_total_amount_gas' => 'getAdvancePaymentTotalAmountGas',
        'advance_payment_scheme' => 'getAdvancePaymentScheme',
        'advance_payment_annual_standard_usage' => 'getAdvancePaymentAnnualStandardUsage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['advance_payment_id'] = isset($data['advance_payment_id']) ? $data['advance_payment_id'] : null;
        $this->container['organization_id'] = isset($data['organization_id']) ? $data['organization_id'] : null;
        $this->container['has_advance_payment'] = isset($data['has_advance_payment']) ? $data['has_advance_payment'] : null;
        $this->container['has_agreed_amount'] = isset($data['has_agreed_amount']) ? $data['has_agreed_amount'] : null;
        $this->container['advance_payment_start_date'] = isset($data['advance_payment_start_date']) ? $data['advance_payment_start_date'] : null;
        $this->container['advance_payment_total_amount'] = isset($data['advance_payment_total_amount']) ? $data['advance_payment_total_amount'] : null;
        $this->container['advance_payment_total_amount_electricity'] = isset($data['advance_payment_total_amount_electricity']) ? $data['advance_payment_total_amount_electricity'] : null;
        $this->container['advance_payment_total_amount_gas'] = isset($data['advance_payment_total_amount_gas']) ? $data['advance_payment_total_amount_gas'] : null;
        $this->container['advance_payment_scheme'] = isset($data['advance_payment_scheme']) ? $data['advance_payment_scheme'] : null;
        $this->container['advance_payment_annual_standard_usage'] = isset($data['advance_payment_annual_standard_usage']) ? $data['advance_payment_annual_standard_usage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets advance_payment_id
     *
     * @return string
     */
    public function getAdvancePaymentId()
    {
        return $this->container['advance_payment_id'];
    }

    /**
     * Sets advance_payment_id
     *
     * @param string $advance_payment_id advance_payment_id
     *
     * @return $this
     */
    public function setAdvancePaymentId($advance_payment_id)
    {
        $this->container['advance_payment_id'] = $advance_payment_id;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return string
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param string $organization_id organization_id
     *
     * @return $this
     */
    public function setOrganizationId($organization_id)
    {
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets has_advance_payment
     *
     * @return bool
     */
    public function getHasAdvancePayment()
    {
        return $this->container['has_advance_payment'];
    }

    /**
     * Sets has_advance_payment
     *
     * @param bool $has_advance_payment has_advance_payment
     *
     * @return $this
     */
    public function setHasAdvancePayment($has_advance_payment)
    {
        $this->container['has_advance_payment'] = $has_advance_payment;

        return $this;
    }

    /**
     * Gets has_agreed_amount
     *
     * @return bool
     */
    public function getHasAgreedAmount()
    {
        return $this->container['has_agreed_amount'];
    }

    /**
     * Sets has_agreed_amount
     *
     * @param bool $has_agreed_amount has_agreed_amount
     *
     * @return $this
     */
    public function setHasAgreedAmount($has_agreed_amount)
    {
        $this->container['has_agreed_amount'] = $has_agreed_amount;

        return $this;
    }

    /**
     * Gets advance_payment_start_date
     *
     * @return \DateTime
     */
    public function getAdvancePaymentStartDate()
    {
        return $this->container['advance_payment_start_date'];
    }

    /**
     * Sets advance_payment_start_date
     *
     * @param \DateTime $advance_payment_start_date advance_payment_start_date
     *
     * @return $this
     */
    public function setAdvancePaymentStartDate($advance_payment_start_date)
    {
        $this->container['advance_payment_start_date'] = $advance_payment_start_date;

        return $this;
    }

    /**
     * Gets advance_payment_total_amount
     *
     * @return double
     */
    public function getAdvancePaymentTotalAmount()
    {
        return $this->container['advance_payment_total_amount'];
    }

    /**
     * Sets advance_payment_total_amount
     *
     * @param double $advance_payment_total_amount advance_payment_total_amount
     *
     * @return $this
     */
    public function setAdvancePaymentTotalAmount($advance_payment_total_amount)
    {
        $this->container['advance_payment_total_amount'] = $advance_payment_total_amount;

        return $this;
    }

    /**
     * Gets advance_payment_total_amount_electricity
     *
     * @return double
     */
    public function getAdvancePaymentTotalAmountElectricity()
    {
        return $this->container['advance_payment_total_amount_electricity'];
    }

    /**
     * Sets advance_payment_total_amount_electricity
     *
     * @param double $advance_payment_total_amount_electricity advance_payment_total_amount_electricity
     *
     * @return $this
     */
    public function setAdvancePaymentTotalAmountElectricity($advance_payment_total_amount_electricity)
    {
        $this->container['advance_payment_total_amount_electricity'] = $advance_payment_total_amount_electricity;

        return $this;
    }

    /**
     * Gets advance_payment_total_amount_gas
     *
     * @return double
     */
    public function getAdvancePaymentTotalAmountGas()
    {
        return $this->container['advance_payment_total_amount_gas'];
    }

    /**
     * Sets advance_payment_total_amount_gas
     *
     * @param double $advance_payment_total_amount_gas advance_payment_total_amount_gas
     *
     * @return $this
     */
    public function setAdvancePaymentTotalAmountGas($advance_payment_total_amount_gas)
    {
        $this->container['advance_payment_total_amount_gas'] = $advance_payment_total_amount_gas;

        return $this;
    }

    /**
     * Gets advance_payment_scheme
     *
     * @return string
     */
    public function getAdvancePaymentScheme()
    {
        return $this->container['advance_payment_scheme'];
    }

    /**
     * Sets advance_payment_scheme
     *
     * @param string $advance_payment_scheme advance_payment_scheme
     *
     * @return $this
     */
    public function setAdvancePaymentScheme($advance_payment_scheme)
    {
        $this->container['advance_payment_scheme'] = $advance_payment_scheme;

        return $this;
    }

    /**
     * Gets advance_payment_annual_standard_usage
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceReportModelAnnualStandardUsageDto
     */
    public function getAdvancePaymentAnnualStandardUsage()
    {
        return $this->container['advance_payment_annual_standard_usage'];
    }

    /**
     * Sets advance_payment_annual_standard_usage
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceReportModelAnnualStandardUsageDto $advance_payment_annual_standard_usage advance_payment_annual_standard_usage
     *
     * @return $this
     */
    public function setAdvancePaymentAnnualStandardUsage($advance_payment_annual_standard_usage)
    {
        $this->container['advance_payment_annual_standard_usage'] = $advance_payment_annual_standard_usage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


