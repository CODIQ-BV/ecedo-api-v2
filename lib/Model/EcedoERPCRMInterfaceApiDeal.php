<?php
/**
 * EcedoERPCRMInterfaceApiDeal
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiDeal Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiDeal implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.Deal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'deal_id' => 'string',
        'volume' => 'double',
        'volume_unit' => 'string',
        'volume_unit_localized' => 'string',
        'price' => 'double',
        'price_unit' => 'string',
        'price_unit_localized' => 'string',
        'deal_type' => 'string',
        'deal_type_localized' => 'string',
        'market_segment' => 'string',
        'market_segment_localized' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'approved_by' => 'string',
        'document_id' => 'string',
        'counter_party' => 'string',
        'comment' => 'string',
        'total_value' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'deal_id' => null,
        'volume' => 'double',
        'volume_unit' => null,
        'volume_unit_localized' => null,
        'price' => 'double',
        'price_unit' => null,
        'price_unit_localized' => null,
        'deal_type' => null,
        'deal_type_localized' => null,
        'market_segment' => null,
        'market_segment_localized' => null,
        'start_date' => 'date',
        'end_date' => 'date',
        'approved_by' => null,
        'document_id' => 'uuid',
        'counter_party' => null,
        'comment' => null,
        'total_value' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deal_id' => 'DealId',
        'volume' => 'Volume',
        'volume_unit' => 'VolumeUnit',
        'volume_unit_localized' => 'VolumeUnitLocalized',
        'price' => 'Price',
        'price_unit' => 'PriceUnit',
        'price_unit_localized' => 'PriceUnitLocalized',
        'deal_type' => 'DealType',
        'deal_type_localized' => 'DealTypeLocalized',
        'market_segment' => 'MarketSegment',
        'market_segment_localized' => 'MarketSegmentLocalized',
        'start_date' => 'StartDate',
        'end_date' => 'EndDate',
        'approved_by' => 'ApprovedBy',
        'document_id' => 'DocumentId',
        'counter_party' => 'CounterParty',
        'comment' => 'Comment',
        'total_value' => 'TotalValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deal_id' => 'setDealId',
        'volume' => 'setVolume',
        'volume_unit' => 'setVolumeUnit',
        'volume_unit_localized' => 'setVolumeUnitLocalized',
        'price' => 'setPrice',
        'price_unit' => 'setPriceUnit',
        'price_unit_localized' => 'setPriceUnitLocalized',
        'deal_type' => 'setDealType',
        'deal_type_localized' => 'setDealTypeLocalized',
        'market_segment' => 'setMarketSegment',
        'market_segment_localized' => 'setMarketSegmentLocalized',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'approved_by' => 'setApprovedBy',
        'document_id' => 'setDocumentId',
        'counter_party' => 'setCounterParty',
        'comment' => 'setComment',
        'total_value' => 'setTotalValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deal_id' => 'getDealId',
        'volume' => 'getVolume',
        'volume_unit' => 'getVolumeUnit',
        'volume_unit_localized' => 'getVolumeUnitLocalized',
        'price' => 'getPrice',
        'price_unit' => 'getPriceUnit',
        'price_unit_localized' => 'getPriceUnitLocalized',
        'deal_type' => 'getDealType',
        'deal_type_localized' => 'getDealTypeLocalized',
        'market_segment' => 'getMarketSegment',
        'market_segment_localized' => 'getMarketSegmentLocalized',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'approved_by' => 'getApprovedBy',
        'document_id' => 'getDocumentId',
        'counter_party' => 'getCounterParty',
        'comment' => 'getComment',
        'total_value' => 'getTotalValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DEAL_TYPE_BASE_DEAL = 'BaseDeal';
    const DEAL_TYPE_PEAK_DEAL = 'PeakDeal';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDealTypeAllowableValues()
    {
        return [
            self::DEAL_TYPE_BASE_DEAL,
            self::DEAL_TYPE_PEAK_DEAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['deal_id'] = isset($data['deal_id']) ? $data['deal_id'] : null;
        $this->container['volume'] = isset($data['volume']) ? $data['volume'] : null;
        $this->container['volume_unit'] = isset($data['volume_unit']) ? $data['volume_unit'] : null;
        $this->container['volume_unit_localized'] = isset($data['volume_unit_localized']) ? $data['volume_unit_localized'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['price_unit'] = isset($data['price_unit']) ? $data['price_unit'] : null;
        $this->container['price_unit_localized'] = isset($data['price_unit_localized']) ? $data['price_unit_localized'] : null;
        $this->container['deal_type'] = isset($data['deal_type']) ? $data['deal_type'] : null;
        $this->container['deal_type_localized'] = isset($data['deal_type_localized']) ? $data['deal_type_localized'] : null;
        $this->container['market_segment'] = isset($data['market_segment']) ? $data['market_segment'] : null;
        $this->container['market_segment_localized'] = isset($data['market_segment_localized']) ? $data['market_segment_localized'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['approved_by'] = isset($data['approved_by']) ? $data['approved_by'] : null;
        $this->container['document_id'] = isset($data['document_id']) ? $data['document_id'] : null;
        $this->container['counter_party'] = isset($data['counter_party']) ? $data['counter_party'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['total_value'] = isset($data['total_value']) ? $data['total_value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDealTypeAllowableValues();
        if (!is_null($this->container['deal_type']) && !in_array($this->container['deal_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'deal_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deal_id
     *
     * @return string
     */
    public function getDealId()
    {
        return $this->container['deal_id'];
    }

    /**
     * Sets deal_id
     *
     * @param string $deal_id deal_id
     *
     * @return $this
     */
    public function setDealId($deal_id)
    {
        $this->container['deal_id'] = $deal_id;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return double
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param double $volume volume
     *
     * @return $this
     */
    public function setVolume($volume)
    {
        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets volume_unit
     *
     * @return string
     */
    public function getVolumeUnit()
    {
        return $this->container['volume_unit'];
    }

    /**
     * Sets volume_unit
     *
     * @param string $volume_unit volume_unit
     *
     * @return $this
     */
    public function setVolumeUnit($volume_unit)
    {
        $this->container['volume_unit'] = $volume_unit;

        return $this;
    }

    /**
     * Gets volume_unit_localized
     *
     * @return string
     */
    public function getVolumeUnitLocalized()
    {
        return $this->container['volume_unit_localized'];
    }

    /**
     * Sets volume_unit_localized
     *
     * @param string $volume_unit_localized volume_unit_localized
     *
     * @return $this
     */
    public function setVolumeUnitLocalized($volume_unit_localized)
    {
        $this->container['volume_unit_localized'] = $volume_unit_localized;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets price_unit
     *
     * @return string
     */
    public function getPriceUnit()
    {
        return $this->container['price_unit'];
    }

    /**
     * Sets price_unit
     *
     * @param string $price_unit price_unit
     *
     * @return $this
     */
    public function setPriceUnit($price_unit)
    {
        $this->container['price_unit'] = $price_unit;

        return $this;
    }

    /**
     * Gets price_unit_localized
     *
     * @return string
     */
    public function getPriceUnitLocalized()
    {
        return $this->container['price_unit_localized'];
    }

    /**
     * Sets price_unit_localized
     *
     * @param string $price_unit_localized price_unit_localized
     *
     * @return $this
     */
    public function setPriceUnitLocalized($price_unit_localized)
    {
        $this->container['price_unit_localized'] = $price_unit_localized;

        return $this;
    }

    /**
     * Gets deal_type
     *
     * @return string
     */
    public function getDealType()
    {
        return $this->container['deal_type'];
    }

    /**
     * Sets deal_type
     *
     * @param string $deal_type deal_type
     *
     * @return $this
     */
    public function setDealType($deal_type)
    {
        $allowedValues = $this->getDealTypeAllowableValues();
        if (!is_null($deal_type) && !in_array($deal_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'deal_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deal_type'] = $deal_type;

        return $this;
    }

    /**
     * Gets deal_type_localized
     *
     * @return string
     */
    public function getDealTypeLocalized()
    {
        return $this->container['deal_type_localized'];
    }

    /**
     * Sets deal_type_localized
     *
     * @param string $deal_type_localized deal_type_localized
     *
     * @return $this
     */
    public function setDealTypeLocalized($deal_type_localized)
    {
        $this->container['deal_type_localized'] = $deal_type_localized;

        return $this;
    }

    /**
     * Gets market_segment
     *
     * @return string
     */
    public function getMarketSegment()
    {
        return $this->container['market_segment'];
    }

    /**
     * Sets market_segment
     *
     * @param string $market_segment market_segment
     *
     * @return $this
     */
    public function setMarketSegment($market_segment)
    {
        $this->container['market_segment'] = $market_segment;

        return $this;
    }

    /**
     * Gets market_segment_localized
     *
     * @return string
     */
    public function getMarketSegmentLocalized()
    {
        return $this->container['market_segment_localized'];
    }

    /**
     * Sets market_segment_localized
     *
     * @param string $market_segment_localized market_segment_localized
     *
     * @return $this
     */
    public function setMarketSegmentLocalized($market_segment_localized)
    {
        $this->container['market_segment_localized'] = $market_segment_localized;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets approved_by
     *
     * @return string
     */
    public function getApprovedBy()
    {
        return $this->container['approved_by'];
    }

    /**
     * Sets approved_by
     *
     * @param string $approved_by approved_by
     *
     * @return $this
     */
    public function setApprovedBy($approved_by)
    {
        $this->container['approved_by'] = $approved_by;

        return $this;
    }

    /**
     * Gets document_id
     *
     * @return string
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param string $document_id document_id
     *
     * @return $this
     */
    public function setDocumentId($document_id)
    {
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets counter_party
     *
     * @return string
     */
    public function getCounterParty()
    {
        return $this->container['counter_party'];
    }

    /**
     * Sets counter_party
     *
     * @param string $counter_party counter_party
     *
     * @return $this
     */
    public function setCounterParty($counter_party)
    {
        $this->container['counter_party'] = $counter_party;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets total_value
     *
     * @return double
     */
    public function getTotalValue()
    {
        return $this->container['total_value'];
    }

    /**
     * Sets total_value
     *
     * @param double $total_value total_value
     *
     * @return $this
     */
    public function setTotalValue($total_value)
    {
        $this->container['total_value'] = $total_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


