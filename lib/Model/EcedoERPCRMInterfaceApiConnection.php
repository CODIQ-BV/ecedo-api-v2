<?php
/**
 * EcedoERPCRMInterfaceApiConnection
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiConnection Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiConnection implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.Connection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'organization_id' => 'string',
        'connection_id' => 'string',
        'cluster_id' => 'string',
        'cluster_reference' => 'string',
        'description' => 'string',
        'comment' => 'string',
        'status' => 'string',
        'status_localized' => 'string',
        'ean' => 'string',
        'market_segment' => 'string',
        'market_segment_localized' => 'string',
        'usage_type' => 'string',
        'usage_type_localized' => 'string',
        'type_of_supply' => 'string',
        'type_of_supply_localized' => 'string',
        'profile' => 'string',
        'metering_method' => 'string',
        'grid_operator' => 'string',
        'grid_operator_ean' => 'string',
        'has_smart_meter' => 'bool',
        'has_smart_meter_service' => 'bool',
        'grid_area' => 'string',
        'gos' => 'string',
        'gos_region' => 'int',
        'gos_region_localized' => 'string',
        'cap_tar_code' => 'string',
        'address' => '\Swagger\Client\Model\EcedoERPCRMInterfaceApiAddress',
        'annual_standard_usage' => '\Swagger\Client\Model\EcedoERPCRMInterfaceApiAnnualStandardUsage',
        'expected_annual_standard_usage' => '\Swagger\Client\Model\EcedoERPCRMInterfaceApiExpectedAnnualStandardUsage',
        'active_annual_standard_usage_type' => 'string',
        'contract' => '\Swagger\Client\Model\EcedoERPCRMInterfaceApiContract',
        'meelift_contract' => '\Swagger\Client\Model\EcedoERPCRMInterfaceApiMeeliftContract',
        'advance_payment' => '\Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePayment',
        'meter' => '\Swagger\Client\Model\EcedoERPCRMInterfaceApiMeter',
        'switch_type' => 'string',
        'switch_type_localized' => 'string',
        'has_single_usage' => 'bool',
        'has_double_usage' => 'bool',
        'bill_as_single' => 'bool',
        'request_p4_interval_readings' => 'bool',
        'administrative_status_smart_meter' => 'string',
        'administrative_status_smart_meter_localized' => 'string',
        'connection_properties' => '\Swagger\Client\Model\EcedoERPCRMInterfaceApiConnectionProperty[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'organization_id' => null,
        'connection_id' => null,
        'cluster_id' => 'uuid',
        'cluster_reference' => null,
        'description' => null,
        'comment' => null,
        'status' => null,
        'status_localized' => null,
        'ean' => null,
        'market_segment' => null,
        'market_segment_localized' => null,
        'usage_type' => null,
        'usage_type_localized' => null,
        'type_of_supply' => null,
        'type_of_supply_localized' => null,
        'profile' => null,
        'metering_method' => null,
        'grid_operator' => null,
        'grid_operator_ean' => null,
        'has_smart_meter' => null,
        'has_smart_meter_service' => null,
        'grid_area' => null,
        'gos' => null,
        'gos_region' => 'int32',
        'gos_region_localized' => null,
        'cap_tar_code' => null,
        'address' => null,
        'annual_standard_usage' => null,
        'expected_annual_standard_usage' => null,
        'active_annual_standard_usage_type' => null,
        'contract' => null,
        'meelift_contract' => null,
        'advance_payment' => null,
        'meter' => null,
        'switch_type' => null,
        'switch_type_localized' => null,
        'has_single_usage' => null,
        'has_double_usage' => null,
        'bill_as_single' => null,
        'request_p4_interval_readings' => null,
        'administrative_status_smart_meter' => null,
        'administrative_status_smart_meter_localized' => null,
        'connection_properties' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organization_id' => 'OrganizationId',
        'connection_id' => 'ConnectionId',
        'cluster_id' => 'ClusterId',
        'cluster_reference' => 'ClusterReference',
        'description' => 'Description',
        'comment' => 'Comment',
        'status' => 'Status',
        'status_localized' => 'StatusLocalized',
        'ean' => 'EAN',
        'market_segment' => 'MarketSegment',
        'market_segment_localized' => 'MarketSegmentLocalized',
        'usage_type' => 'UsageType',
        'usage_type_localized' => 'UsageTypeLocalized',
        'type_of_supply' => 'TypeOfSupply',
        'type_of_supply_localized' => 'TypeOfSupplyLocalized',
        'profile' => 'Profile',
        'metering_method' => 'MeteringMethod',
        'grid_operator' => 'GridOperator',
        'grid_operator_ean' => 'GridOperatorEAN',
        'has_smart_meter' => 'HasSmartMeter',
        'has_smart_meter_service' => 'HasSmartMeterService',
        'grid_area' => 'GridArea',
        'gos' => 'Gos',
        'gos_region' => 'GosRegion',
        'gos_region_localized' => 'GosRegionLocalized',
        'cap_tar_code' => 'CapTarCode',
        'address' => 'Address',
        'annual_standard_usage' => 'AnnualStandardUsage',
        'expected_annual_standard_usage' => 'ExpectedAnnualStandardUsage',
        'active_annual_standard_usage_type' => 'ActiveAnnualStandardUsageType',
        'contract' => 'Contract',
        'meelift_contract' => 'MeeliftContract',
        'advance_payment' => 'AdvancePayment',
        'meter' => 'Meter',
        'switch_type' => 'SwitchType',
        'switch_type_localized' => 'SwitchTypeLocalized',
        'has_single_usage' => 'HasSingleUsage',
        'has_double_usage' => 'HasDoubleUsage',
        'bill_as_single' => 'BillAsSingle',
        'request_p4_interval_readings' => 'RequestP4IntervalReadings',
        'administrative_status_smart_meter' => 'AdministrativeStatusSmartMeter',
        'administrative_status_smart_meter_localized' => 'AdministrativeStatusSmartMeterLocalized',
        'connection_properties' => 'ConnectionProperties'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organization_id' => 'setOrganizationId',
        'connection_id' => 'setConnectionId',
        'cluster_id' => 'setClusterId',
        'cluster_reference' => 'setClusterReference',
        'description' => 'setDescription',
        'comment' => 'setComment',
        'status' => 'setStatus',
        'status_localized' => 'setStatusLocalized',
        'ean' => 'setEan',
        'market_segment' => 'setMarketSegment',
        'market_segment_localized' => 'setMarketSegmentLocalized',
        'usage_type' => 'setUsageType',
        'usage_type_localized' => 'setUsageTypeLocalized',
        'type_of_supply' => 'setTypeOfSupply',
        'type_of_supply_localized' => 'setTypeOfSupplyLocalized',
        'profile' => 'setProfile',
        'metering_method' => 'setMeteringMethod',
        'grid_operator' => 'setGridOperator',
        'grid_operator_ean' => 'setGridOperatorEan',
        'has_smart_meter' => 'setHasSmartMeter',
        'has_smart_meter_service' => 'setHasSmartMeterService',
        'grid_area' => 'setGridArea',
        'gos' => 'setGos',
        'gos_region' => 'setGosRegion',
        'gos_region_localized' => 'setGosRegionLocalized',
        'cap_tar_code' => 'setCapTarCode',
        'address' => 'setAddress',
        'annual_standard_usage' => 'setAnnualStandardUsage',
        'expected_annual_standard_usage' => 'setExpectedAnnualStandardUsage',
        'active_annual_standard_usage_type' => 'setActiveAnnualStandardUsageType',
        'contract' => 'setContract',
        'meelift_contract' => 'setMeeliftContract',
        'advance_payment' => 'setAdvancePayment',
        'meter' => 'setMeter',
        'switch_type' => 'setSwitchType',
        'switch_type_localized' => 'setSwitchTypeLocalized',
        'has_single_usage' => 'setHasSingleUsage',
        'has_double_usage' => 'setHasDoubleUsage',
        'bill_as_single' => 'setBillAsSingle',
        'request_p4_interval_readings' => 'setRequestP4IntervalReadings',
        'administrative_status_smart_meter' => 'setAdministrativeStatusSmartMeter',
        'administrative_status_smart_meter_localized' => 'setAdministrativeStatusSmartMeterLocalized',
        'connection_properties' => 'setConnectionProperties'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organization_id' => 'getOrganizationId',
        'connection_id' => 'getConnectionId',
        'cluster_id' => 'getClusterId',
        'cluster_reference' => 'getClusterReference',
        'description' => 'getDescription',
        'comment' => 'getComment',
        'status' => 'getStatus',
        'status_localized' => 'getStatusLocalized',
        'ean' => 'getEan',
        'market_segment' => 'getMarketSegment',
        'market_segment_localized' => 'getMarketSegmentLocalized',
        'usage_type' => 'getUsageType',
        'usage_type_localized' => 'getUsageTypeLocalized',
        'type_of_supply' => 'getTypeOfSupply',
        'type_of_supply_localized' => 'getTypeOfSupplyLocalized',
        'profile' => 'getProfile',
        'metering_method' => 'getMeteringMethod',
        'grid_operator' => 'getGridOperator',
        'grid_operator_ean' => 'getGridOperatorEan',
        'has_smart_meter' => 'getHasSmartMeter',
        'has_smart_meter_service' => 'getHasSmartMeterService',
        'grid_area' => 'getGridArea',
        'gos' => 'getGos',
        'gos_region' => 'getGosRegion',
        'gos_region_localized' => 'getGosRegionLocalized',
        'cap_tar_code' => 'getCapTarCode',
        'address' => 'getAddress',
        'annual_standard_usage' => 'getAnnualStandardUsage',
        'expected_annual_standard_usage' => 'getExpectedAnnualStandardUsage',
        'active_annual_standard_usage_type' => 'getActiveAnnualStandardUsageType',
        'contract' => 'getContract',
        'meelift_contract' => 'getMeeliftContract',
        'advance_payment' => 'getAdvancePayment',
        'meter' => 'getMeter',
        'switch_type' => 'getSwitchType',
        'switch_type_localized' => 'getSwitchTypeLocalized',
        'has_single_usage' => 'getHasSingleUsage',
        'has_double_usage' => 'getHasDoubleUsage',
        'bill_as_single' => 'getBillAsSingle',
        'request_p4_interval_readings' => 'getRequestP4IntervalReadings',
        'administrative_status_smart_meter' => 'getAdministrativeStatusSmartMeter',
        'administrative_status_smart_meter_localized' => 'getAdministrativeStatusSmartMeterLocalized',
        'connection_properties' => 'getConnectionProperties'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['organization_id'] = isset($data['organization_id']) ? $data['organization_id'] : null;
        $this->container['connection_id'] = isset($data['connection_id']) ? $data['connection_id'] : null;
        $this->container['cluster_id'] = isset($data['cluster_id']) ? $data['cluster_id'] : null;
        $this->container['cluster_reference'] = isset($data['cluster_reference']) ? $data['cluster_reference'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_localized'] = isset($data['status_localized']) ? $data['status_localized'] : null;
        $this->container['ean'] = isset($data['ean']) ? $data['ean'] : null;
        $this->container['market_segment'] = isset($data['market_segment']) ? $data['market_segment'] : null;
        $this->container['market_segment_localized'] = isset($data['market_segment_localized']) ? $data['market_segment_localized'] : null;
        $this->container['usage_type'] = isset($data['usage_type']) ? $data['usage_type'] : null;
        $this->container['usage_type_localized'] = isset($data['usage_type_localized']) ? $data['usage_type_localized'] : null;
        $this->container['type_of_supply'] = isset($data['type_of_supply']) ? $data['type_of_supply'] : null;
        $this->container['type_of_supply_localized'] = isset($data['type_of_supply_localized']) ? $data['type_of_supply_localized'] : null;
        $this->container['profile'] = isset($data['profile']) ? $data['profile'] : null;
        $this->container['metering_method'] = isset($data['metering_method']) ? $data['metering_method'] : null;
        $this->container['grid_operator'] = isset($data['grid_operator']) ? $data['grid_operator'] : null;
        $this->container['grid_operator_ean'] = isset($data['grid_operator_ean']) ? $data['grid_operator_ean'] : null;
        $this->container['has_smart_meter'] = isset($data['has_smart_meter']) ? $data['has_smart_meter'] : null;
        $this->container['has_smart_meter_service'] = isset($data['has_smart_meter_service']) ? $data['has_smart_meter_service'] : null;
        $this->container['grid_area'] = isset($data['grid_area']) ? $data['grid_area'] : null;
        $this->container['gos'] = isset($data['gos']) ? $data['gos'] : null;
        $this->container['gos_region'] = isset($data['gos_region']) ? $data['gos_region'] : null;
        $this->container['gos_region_localized'] = isset($data['gos_region_localized']) ? $data['gos_region_localized'] : null;
        $this->container['cap_tar_code'] = isset($data['cap_tar_code']) ? $data['cap_tar_code'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['annual_standard_usage'] = isset($data['annual_standard_usage']) ? $data['annual_standard_usage'] : null;
        $this->container['expected_annual_standard_usage'] = isset($data['expected_annual_standard_usage']) ? $data['expected_annual_standard_usage'] : null;
        $this->container['active_annual_standard_usage_type'] = isset($data['active_annual_standard_usage_type']) ? $data['active_annual_standard_usage_type'] : null;
        $this->container['contract'] = isset($data['contract']) ? $data['contract'] : null;
        $this->container['meelift_contract'] = isset($data['meelift_contract']) ? $data['meelift_contract'] : null;
        $this->container['advance_payment'] = isset($data['advance_payment']) ? $data['advance_payment'] : null;
        $this->container['meter'] = isset($data['meter']) ? $data['meter'] : null;
        $this->container['switch_type'] = isset($data['switch_type']) ? $data['switch_type'] : null;
        $this->container['switch_type_localized'] = isset($data['switch_type_localized']) ? $data['switch_type_localized'] : null;
        $this->container['has_single_usage'] = isset($data['has_single_usage']) ? $data['has_single_usage'] : null;
        $this->container['has_double_usage'] = isset($data['has_double_usage']) ? $data['has_double_usage'] : null;
        $this->container['bill_as_single'] = isset($data['bill_as_single']) ? $data['bill_as_single'] : null;
        $this->container['request_p4_interval_readings'] = isset($data['request_p4_interval_readings']) ? $data['request_p4_interval_readings'] : null;
        $this->container['administrative_status_smart_meter'] = isset($data['administrative_status_smart_meter']) ? $data['administrative_status_smart_meter'] : null;
        $this->container['administrative_status_smart_meter_localized'] = isset($data['administrative_status_smart_meter_localized']) ? $data['administrative_status_smart_meter_localized'] : null;
        $this->container['connection_properties'] = isset($data['connection_properties']) ? $data['connection_properties'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organization_id
     *
     * @return string
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param string $organization_id organization_id
     *
     * @return $this
     */
    public function setOrganizationId($organization_id)
    {
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets connection_id
     *
     * @return string
     */
    public function getConnectionId()
    {
        return $this->container['connection_id'];
    }

    /**
     * Sets connection_id
     *
     * @param string $connection_id connection_id
     *
     * @return $this
     */
    public function setConnectionId($connection_id)
    {
        $this->container['connection_id'] = $connection_id;

        return $this;
    }

    /**
     * Gets cluster_id
     *
     * @return string
     */
    public function getClusterId()
    {
        return $this->container['cluster_id'];
    }

    /**
     * Sets cluster_id
     *
     * @param string $cluster_id cluster_id
     *
     * @return $this
     */
    public function setClusterId($cluster_id)
    {
        $this->container['cluster_id'] = $cluster_id;

        return $this;
    }

    /**
     * Gets cluster_reference
     *
     * @return string
     */
    public function getClusterReference()
    {
        return $this->container['cluster_reference'];
    }

    /**
     * Sets cluster_reference
     *
     * @param string $cluster_reference cluster_reference
     *
     * @return $this
     */
    public function setClusterReference($cluster_reference)
    {
        $this->container['cluster_reference'] = $cluster_reference;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_localized
     *
     * @return string
     */
    public function getStatusLocalized()
    {
        return $this->container['status_localized'];
    }

    /**
     * Sets status_localized
     *
     * @param string $status_localized status_localized
     *
     * @return $this
     */
    public function setStatusLocalized($status_localized)
    {
        $this->container['status_localized'] = $status_localized;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string $ean ean
     *
     * @return $this
     */
    public function setEan($ean)
    {
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets market_segment
     *
     * @return string
     */
    public function getMarketSegment()
    {
        return $this->container['market_segment'];
    }

    /**
     * Sets market_segment
     *
     * @param string $market_segment market_segment
     *
     * @return $this
     */
    public function setMarketSegment($market_segment)
    {
        $this->container['market_segment'] = $market_segment;

        return $this;
    }

    /**
     * Gets market_segment_localized
     *
     * @return string
     */
    public function getMarketSegmentLocalized()
    {
        return $this->container['market_segment_localized'];
    }

    /**
     * Sets market_segment_localized
     *
     * @param string $market_segment_localized market_segment_localized
     *
     * @return $this
     */
    public function setMarketSegmentLocalized($market_segment_localized)
    {
        $this->container['market_segment_localized'] = $market_segment_localized;

        return $this;
    }

    /**
     * Gets usage_type
     *
     * @return string
     */
    public function getUsageType()
    {
        return $this->container['usage_type'];
    }

    /**
     * Sets usage_type
     *
     * @param string $usage_type usage_type
     *
     * @return $this
     */
    public function setUsageType($usage_type)
    {
        $this->container['usage_type'] = $usage_type;

        return $this;
    }

    /**
     * Gets usage_type_localized
     *
     * @return string
     */
    public function getUsageTypeLocalized()
    {
        return $this->container['usage_type_localized'];
    }

    /**
     * Sets usage_type_localized
     *
     * @param string $usage_type_localized usage_type_localized
     *
     * @return $this
     */
    public function setUsageTypeLocalized($usage_type_localized)
    {
        $this->container['usage_type_localized'] = $usage_type_localized;

        return $this;
    }

    /**
     * Gets type_of_supply
     *
     * @return string
     */
    public function getTypeOfSupply()
    {
        return $this->container['type_of_supply'];
    }

    /**
     * Sets type_of_supply
     *
     * @param string $type_of_supply type_of_supply
     *
     * @return $this
     */
    public function setTypeOfSupply($type_of_supply)
    {
        $this->container['type_of_supply'] = $type_of_supply;

        return $this;
    }

    /**
     * Gets type_of_supply_localized
     *
     * @return string
     */
    public function getTypeOfSupplyLocalized()
    {
        return $this->container['type_of_supply_localized'];
    }

    /**
     * Sets type_of_supply_localized
     *
     * @param string $type_of_supply_localized type_of_supply_localized
     *
     * @return $this
     */
    public function setTypeOfSupplyLocalized($type_of_supply_localized)
    {
        $this->container['type_of_supply_localized'] = $type_of_supply_localized;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return string
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param string $profile profile
     *
     * @return $this
     */
    public function setProfile($profile)
    {
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets metering_method
     *
     * @return string
     */
    public function getMeteringMethod()
    {
        return $this->container['metering_method'];
    }

    /**
     * Sets metering_method
     *
     * @param string $metering_method metering_method
     *
     * @return $this
     */
    public function setMeteringMethod($metering_method)
    {
        $this->container['metering_method'] = $metering_method;

        return $this;
    }

    /**
     * Gets grid_operator
     *
     * @return string
     */
    public function getGridOperator()
    {
        return $this->container['grid_operator'];
    }

    /**
     * Sets grid_operator
     *
     * @param string $grid_operator grid_operator
     *
     * @return $this
     */
    public function setGridOperator($grid_operator)
    {
        $this->container['grid_operator'] = $grid_operator;

        return $this;
    }

    /**
     * Gets grid_operator_ean
     *
     * @return string
     */
    public function getGridOperatorEan()
    {
        return $this->container['grid_operator_ean'];
    }

    /**
     * Sets grid_operator_ean
     *
     * @param string $grid_operator_ean grid_operator_ean
     *
     * @return $this
     */
    public function setGridOperatorEan($grid_operator_ean)
    {
        $this->container['grid_operator_ean'] = $grid_operator_ean;

        return $this;
    }

    /**
     * Gets has_smart_meter
     *
     * @return bool
     */
    public function getHasSmartMeter()
    {
        return $this->container['has_smart_meter'];
    }

    /**
     * Sets has_smart_meter
     *
     * @param bool $has_smart_meter has_smart_meter
     *
     * @return $this
     */
    public function setHasSmartMeter($has_smart_meter)
    {
        $this->container['has_smart_meter'] = $has_smart_meter;

        return $this;
    }

    /**
     * Gets has_smart_meter_service
     *
     * @return bool
     */
    public function getHasSmartMeterService()
    {
        return $this->container['has_smart_meter_service'];
    }

    /**
     * Sets has_smart_meter_service
     *
     * @param bool $has_smart_meter_service has_smart_meter_service
     *
     * @return $this
     */
    public function setHasSmartMeterService($has_smart_meter_service)
    {
        $this->container['has_smart_meter_service'] = $has_smart_meter_service;

        return $this;
    }

    /**
     * Gets grid_area
     *
     * @return string
     */
    public function getGridArea()
    {
        return $this->container['grid_area'];
    }

    /**
     * Sets grid_area
     *
     * @param string $grid_area grid_area
     *
     * @return $this
     */
    public function setGridArea($grid_area)
    {
        $this->container['grid_area'] = $grid_area;

        return $this;
    }

    /**
     * Gets gos
     *
     * @return string
     */
    public function getGos()
    {
        return $this->container['gos'];
    }

    /**
     * Sets gos
     *
     * @param string $gos gos
     *
     * @return $this
     */
    public function setGos($gos)
    {
        $this->container['gos'] = $gos;

        return $this;
    }

    /**
     * Gets gos_region
     *
     * @return int
     */
    public function getGosRegion()
    {
        return $this->container['gos_region'];
    }

    /**
     * Sets gos_region
     *
     * @param int $gos_region gos_region
     *
     * @return $this
     */
    public function setGosRegion($gos_region)
    {
        $this->container['gos_region'] = $gos_region;

        return $this;
    }

    /**
     * Gets gos_region_localized
     *
     * @return string
     */
    public function getGosRegionLocalized()
    {
        return $this->container['gos_region_localized'];
    }

    /**
     * Sets gos_region_localized
     *
     * @param string $gos_region_localized gos_region_localized
     *
     * @return $this
     */
    public function setGosRegionLocalized($gos_region_localized)
    {
        $this->container['gos_region_localized'] = $gos_region_localized;

        return $this;
    }

    /**
     * Gets cap_tar_code
     *
     * @return string
     */
    public function getCapTarCode()
    {
        return $this->container['cap_tar_code'];
    }

    /**
     * Sets cap_tar_code
     *
     * @param string $cap_tar_code cap_tar_code
     *
     * @return $this
     */
    public function setCapTarCode($cap_tar_code)
    {
        $this->container['cap_tar_code'] = $cap_tar_code;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceApiAddress $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets annual_standard_usage
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiAnnualStandardUsage
     */
    public function getAnnualStandardUsage()
    {
        return $this->container['annual_standard_usage'];
    }

    /**
     * Sets annual_standard_usage
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceApiAnnualStandardUsage $annual_standard_usage annual_standard_usage
     *
     * @return $this
     */
    public function setAnnualStandardUsage($annual_standard_usage)
    {
        $this->container['annual_standard_usage'] = $annual_standard_usage;

        return $this;
    }

    /**
     * Gets expected_annual_standard_usage
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiExpectedAnnualStandardUsage
     */
    public function getExpectedAnnualStandardUsage()
    {
        return $this->container['expected_annual_standard_usage'];
    }

    /**
     * Sets expected_annual_standard_usage
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceApiExpectedAnnualStandardUsage $expected_annual_standard_usage expected_annual_standard_usage
     *
     * @return $this
     */
    public function setExpectedAnnualStandardUsage($expected_annual_standard_usage)
    {
        $this->container['expected_annual_standard_usage'] = $expected_annual_standard_usage;

        return $this;
    }

    /**
     * Gets active_annual_standard_usage_type
     *
     * @return string
     */
    public function getActiveAnnualStandardUsageType()
    {
        return $this->container['active_annual_standard_usage_type'];
    }

    /**
     * Sets active_annual_standard_usage_type
     *
     * @param string $active_annual_standard_usage_type active_annual_standard_usage_type
     *
     * @return $this
     */
    public function setActiveAnnualStandardUsageType($active_annual_standard_usage_type)
    {
        $this->container['active_annual_standard_usage_type'] = $active_annual_standard_usage_type;

        return $this;
    }

    /**
     * Gets contract
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiContract
     */
    public function getContract()
    {
        return $this->container['contract'];
    }

    /**
     * Sets contract
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceApiContract $contract Dit veld bevat het actieve of het eerstvolgende toekomstige contract. Als de aansluiting alleen historische contracten heeft is de waarde van dit veld `null`
     *
     * @return $this
     */
    public function setContract($contract)
    {
        $this->container['contract'] = $contract;

        return $this;
    }

    /**
     * Gets meelift_contract
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiMeeliftContract
     */
    public function getMeeliftContract()
    {
        return $this->container['meelift_contract'];
    }

    /**
     * Sets meelift_contract
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceApiMeeliftContract $meelift_contract Als de meelift-functionaliteit is ingeschakeld bevat dit veld het actieve of het eerstvolgende toekomstige contract. Als de meelift-functionaliteit niet is ingeschakeld is deze waarde altijd `null`
     *
     * @return $this
     */
    public function setMeeliftContract($meelift_contract)
    {
        $this->container['meelift_contract'] = $meelift_contract;

        return $this;
    }

    /**
     * Gets advance_payment
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePayment
     */
    public function getAdvancePayment()
    {
        return $this->container['advance_payment'];
    }

    /**
     * Sets advance_payment
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePayment $advance_payment advance_payment
     *
     * @return $this
     */
    public function setAdvancePayment($advance_payment)
    {
        $this->container['advance_payment'] = $advance_payment;

        return $this;
    }

    /**
     * Gets meter
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiMeter
     */
    public function getMeter()
    {
        return $this->container['meter'];
    }

    /**
     * Sets meter
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceApiMeter $meter meter
     *
     * @return $this
     */
    public function setMeter($meter)
    {
        $this->container['meter'] = $meter;

        return $this;
    }

    /**
     * Gets switch_type
     *
     * @return string
     */
    public function getSwitchType()
    {
        return $this->container['switch_type'];
    }

    /**
     * Sets switch_type
     *
     * @param string $switch_type switch_type
     *
     * @return $this
     */
    public function setSwitchType($switch_type)
    {
        $this->container['switch_type'] = $switch_type;

        return $this;
    }

    /**
     * Gets switch_type_localized
     *
     * @return string
     */
    public function getSwitchTypeLocalized()
    {
        return $this->container['switch_type_localized'];
    }

    /**
     * Sets switch_type_localized
     *
     * @param string $switch_type_localized switch_type_localized
     *
     * @return $this
     */
    public function setSwitchTypeLocalized($switch_type_localized)
    {
        $this->container['switch_type_localized'] = $switch_type_localized;

        return $this;
    }

    /**
     * Gets has_single_usage
     *
     * @return bool
     */
    public function getHasSingleUsage()
    {
        return $this->container['has_single_usage'];
    }

    /**
     * Sets has_single_usage
     *
     * @param bool $has_single_usage has_single_usage
     *
     * @return $this
     */
    public function setHasSingleUsage($has_single_usage)
    {
        $this->container['has_single_usage'] = $has_single_usage;

        return $this;
    }

    /**
     * Gets has_double_usage
     *
     * @return bool
     */
    public function getHasDoubleUsage()
    {
        return $this->container['has_double_usage'];
    }

    /**
     * Sets has_double_usage
     *
     * @param bool $has_double_usage has_double_usage
     *
     * @return $this
     */
    public function setHasDoubleUsage($has_double_usage)
    {
        $this->container['has_double_usage'] = $has_double_usage;

        return $this;
    }

    /**
     * Gets bill_as_single
     *
     * @return bool
     */
    public function getBillAsSingle()
    {
        return $this->container['bill_as_single'];
    }

    /**
     * Sets bill_as_single
     *
     * @param bool $bill_as_single bill_as_single
     *
     * @return $this
     */
    public function setBillAsSingle($bill_as_single)
    {
        $this->container['bill_as_single'] = $bill_as_single;

        return $this;
    }

    /**
     * Gets request_p4_interval_readings
     *
     * @return bool
     */
    public function getRequestP4IntervalReadings()
    {
        return $this->container['request_p4_interval_readings'];
    }

    /**
     * Sets request_p4_interval_readings
     *
     * @param bool $request_p4_interval_readings request_p4_interval_readings
     *
     * @return $this
     */
    public function setRequestP4IntervalReadings($request_p4_interval_readings)
    {
        $this->container['request_p4_interval_readings'] = $request_p4_interval_readings;

        return $this;
    }

    /**
     * Gets administrative_status_smart_meter
     *
     * @return string
     */
    public function getAdministrativeStatusSmartMeter()
    {
        return $this->container['administrative_status_smart_meter'];
    }

    /**
     * Sets administrative_status_smart_meter
     *
     * @param string $administrative_status_smart_meter administrative_status_smart_meter
     *
     * @return $this
     */
    public function setAdministrativeStatusSmartMeter($administrative_status_smart_meter)
    {
        $this->container['administrative_status_smart_meter'] = $administrative_status_smart_meter;

        return $this;
    }

    /**
     * Gets administrative_status_smart_meter_localized
     *
     * @return string
     */
    public function getAdministrativeStatusSmartMeterLocalized()
    {
        return $this->container['administrative_status_smart_meter_localized'];
    }

    /**
     * Sets administrative_status_smart_meter_localized
     *
     * @param string $administrative_status_smart_meter_localized administrative_status_smart_meter_localized
     *
     * @return $this
     */
    public function setAdministrativeStatusSmartMeterLocalized($administrative_status_smart_meter_localized)
    {
        $this->container['administrative_status_smart_meter_localized'] = $administrative_status_smart_meter_localized;

        return $this;
    }

    /**
     * Gets connection_properties
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiConnectionProperty[]
     */
    public function getConnectionProperties()
    {
        return $this->container['connection_properties'];
    }

    /**
     * Sets connection_properties
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceApiConnectionProperty[] $connection_properties connection_properties
     *
     * @return $this
     */
    public function setConnectionProperties($connection_properties)
    {
        $this->container['connection_properties'] = $connection_properties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


