<?php
/**
 * EcedoERPCRMInterfaceApiConnectionPostData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiConnectionPostData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiConnectionPostData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.ConnectionPostData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'market_segment' => 'string',
        'ean' => 'string',
        'switch_balance_responsible_party_ean' => 'string',
        'switch_supplier_ean' => 'string',
        'cluster' => 'string',
        'description' => 'string',
        'comment' => 'string',
        'switch_type' => 'string',
        'contract' => '\Swagger\Client\Model\EcedoERPCRMInterfaceApiContractImportPostData',
        'is_residential' => 'bool',
        'connection_properties' => '\Swagger\Client\Model\EcedoERPCRMInterfaceApiConnectionPropertyPostData[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'market_segment' => null,
        'ean' => null,
        'switch_balance_responsible_party_ean' => null,
        'switch_supplier_ean' => null,
        'cluster' => null,
        'description' => null,
        'comment' => null,
        'switch_type' => null,
        'contract' => null,
        'is_residential' => null,
        'connection_properties' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'market_segment' => 'MarketSegment',
        'ean' => 'EAN',
        'switch_balance_responsible_party_ean' => 'SwitchBalanceResponsiblePartyEAN',
        'switch_supplier_ean' => 'SwitchSupplierEAN',
        'cluster' => 'Cluster',
        'description' => 'Description',
        'comment' => 'Comment',
        'switch_type' => 'SwitchType',
        'contract' => 'Contract',
        'is_residential' => 'IsResidential',
        'connection_properties' => 'ConnectionProperties'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'market_segment' => 'setMarketSegment',
        'ean' => 'setEan',
        'switch_balance_responsible_party_ean' => 'setSwitchBalanceResponsiblePartyEan',
        'switch_supplier_ean' => 'setSwitchSupplierEan',
        'cluster' => 'setCluster',
        'description' => 'setDescription',
        'comment' => 'setComment',
        'switch_type' => 'setSwitchType',
        'contract' => 'setContract',
        'is_residential' => 'setIsResidential',
        'connection_properties' => 'setConnectionProperties'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'market_segment' => 'getMarketSegment',
        'ean' => 'getEan',
        'switch_balance_responsible_party_ean' => 'getSwitchBalanceResponsiblePartyEan',
        'switch_supplier_ean' => 'getSwitchSupplierEan',
        'cluster' => 'getCluster',
        'description' => 'getDescription',
        'comment' => 'getComment',
        'switch_type' => 'getSwitchType',
        'contract' => 'getContract',
        'is_residential' => 'getIsResidential',
        'connection_properties' => 'getConnectionProperties'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MARKET_SEGMENT_ELECTRICITY = 'Electricity';
    const MARKET_SEGMENT_GAS = 'Gas';
    const SWITCH_TYPE__SWITCH = 'Switch';
    const SWITCH_TYPE_MOVE_IN = 'MoveIn';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMarketSegmentAllowableValues()
    {
        return [
            self::MARKET_SEGMENT_ELECTRICITY,
            self::MARKET_SEGMENT_GAS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSwitchTypeAllowableValues()
    {
        return [
            self::SWITCH_TYPE__SWITCH,
            self::SWITCH_TYPE_MOVE_IN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['market_segment'] = isset($data['market_segment']) ? $data['market_segment'] : null;
        $this->container['ean'] = isset($data['ean']) ? $data['ean'] : null;
        $this->container['switch_balance_responsible_party_ean'] = isset($data['switch_balance_responsible_party_ean']) ? $data['switch_balance_responsible_party_ean'] : null;
        $this->container['switch_supplier_ean'] = isset($data['switch_supplier_ean']) ? $data['switch_supplier_ean'] : null;
        $this->container['cluster'] = isset($data['cluster']) ? $data['cluster'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['switch_type'] = isset($data['switch_type']) ? $data['switch_type'] : null;
        $this->container['contract'] = isset($data['contract']) ? $data['contract'] : null;
        $this->container['is_residential'] = isset($data['is_residential']) ? $data['is_residential'] : null;
        $this->container['connection_properties'] = isset($data['connection_properties']) ? $data['connection_properties'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMarketSegmentAllowableValues();
        if (!is_null($this->container['market_segment']) && !in_array($this->container['market_segment'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'market_segment', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSwitchTypeAllowableValues();
        if (!is_null($this->container['switch_type']) && !in_array($this->container['switch_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'switch_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets market_segment
     *
     * @return string
     */
    public function getMarketSegment()
    {
        return $this->container['market_segment'];
    }

    /**
     * Sets market_segment
     *
     * @param string $market_segment market_segment
     *
     * @return $this
     */
    public function setMarketSegment($market_segment)
    {
        $allowedValues = $this->getMarketSegmentAllowableValues();
        if (!is_null($market_segment) && !in_array($market_segment, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'market_segment', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['market_segment'] = $market_segment;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string $ean ean
     *
     * @return $this
     */
    public function setEan($ean)
    {
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets switch_balance_responsible_party_ean
     *
     * @return string
     */
    public function getSwitchBalanceResponsiblePartyEan()
    {
        return $this->container['switch_balance_responsible_party_ean'];
    }

    /**
     * Sets switch_balance_responsible_party_ean
     *
     * @param string $switch_balance_responsible_party_ean switch_balance_responsible_party_ean
     *
     * @return $this
     */
    public function setSwitchBalanceResponsiblePartyEan($switch_balance_responsible_party_ean)
    {
        $this->container['switch_balance_responsible_party_ean'] = $switch_balance_responsible_party_ean;

        return $this;
    }

    /**
     * Gets switch_supplier_ean
     *
     * @return string
     */
    public function getSwitchSupplierEan()
    {
        return $this->container['switch_supplier_ean'];
    }

    /**
     * Sets switch_supplier_ean
     *
     * @param string $switch_supplier_ean switch_supplier_ean
     *
     * @return $this
     */
    public function setSwitchSupplierEan($switch_supplier_ean)
    {
        $this->container['switch_supplier_ean'] = $switch_supplier_ean;

        return $this;
    }

    /**
     * Gets cluster
     *
     * @return string
     */
    public function getCluster()
    {
        return $this->container['cluster'];
    }

    /**
     * Sets cluster
     *
     * @param string $cluster cluster
     *
     * @return $this
     */
    public function setCluster($cluster)
    {
        $this->container['cluster'] = $cluster;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets switch_type
     *
     * @return string
     */
    public function getSwitchType()
    {
        return $this->container['switch_type'];
    }

    /**
     * Sets switch_type
     *
     * @param string $switch_type switch_type
     *
     * @return $this
     */
    public function setSwitchType($switch_type)
    {
        $allowedValues = $this->getSwitchTypeAllowableValues();
        if (!is_null($switch_type) && !in_array($switch_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'switch_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['switch_type'] = $switch_type;

        return $this;
    }

    /**
     * Gets contract
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiContractImportPostData
     */
    public function getContract()
    {
        return $this->container['contract'];
    }

    /**
     * Sets contract
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceApiContractImportPostData $contract contract
     *
     * @return $this
     */
    public function setContract($contract)
    {
        $this->container['contract'] = $contract;

        return $this;
    }

    /**
     * Gets is_residential
     *
     * @return bool
     */
    public function getIsResidential()
    {
        return $this->container['is_residential'];
    }

    /**
     * Sets is_residential
     *
     * @param bool $is_residential is_residential
     *
     * @return $this
     */
    public function setIsResidential($is_residential)
    {
        $this->container['is_residential'] = $is_residential;

        return $this;
    }

    /**
     * Gets connection_properties
     *
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiConnectionPropertyPostData[]
     */
    public function getConnectionProperties()
    {
        return $this->container['connection_properties'];
    }

    /**
     * Sets connection_properties
     *
     * @param \Swagger\Client\Model\EcedoERPCRMInterfaceApiConnectionPropertyPostData[] $connection_properties connection_properties
     *
     * @return $this
     */
    public function setConnectionProperties($connection_properties)
    {
        $this->container['connection_properties'] = $connection_properties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


