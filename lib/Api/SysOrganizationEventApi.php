<?php
/**
 * SysOrganizationEventApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SysOrganizationEventApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SysOrganizationEventApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sysOrganizationEventGetFirstPossibleEventDate
     *
     * Bepaal eerst mogelijke eventdatum op basis van een gewenste eventdatum
     *
     * @param  \DateTime $desired_event_date Gewenste eventdatum (verplicht veld) (required)
     * @param  string $event_type Type event (verplicht veld). Deze API ondersteunt niet alle &#x60;OrganizationEventTypes&#x60; die in de specificatie zichtbaar zijn. Zie de API omschrijving voor meer informatie (required)
     * @param  string $usage_type Verbruikstype van de aansluiting (verplicht veld) (required)
     * @param  bool $include_cooling_down_period Optionele parameter (default false) die aangeeft of de afkoelperiode worden meegenomen in de berekening. Dit is alleen mogelijk bij eventTypes &#39;ChangeOfSupplier&#39; en &#39;MoveIn&#39; (optional)
     * @param  bool $treat_as_consumer Optionele parameter (default true) die aangeeft of de datum bepaald moet worden voor een klant die als consument behandeld moet worden. Afhankelijk van de systeeminstellingen hebben klanten die niet als consument behandeld moeten worden geen recht op een afkoelperiode. Alleen van toepassing bij eventTypes &#39;ChangeOfSupplier&#39; en &#39;MoveIn&#39; (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DateTime
     */
    public function sysOrganizationEventGetFirstPossibleEventDate($desired_event_date, $event_type, $usage_type, $include_cooling_down_period = null, $treat_as_consumer = null)
    {
        list($response) = $this->sysOrganizationEventGetFirstPossibleEventDateWithHttpInfo($desired_event_date, $event_type, $usage_type, $include_cooling_down_period, $treat_as_consumer);
        return $response;
    }

    /**
     * Operation sysOrganizationEventGetFirstPossibleEventDateWithHttpInfo
     *
     * Bepaal eerst mogelijke eventdatum op basis van een gewenste eventdatum
     *
     * @param  \DateTime $desired_event_date Gewenste eventdatum (verplicht veld) (required)
     * @param  string $event_type Type event (verplicht veld). Deze API ondersteunt niet alle &#x60;OrganizationEventTypes&#x60; die in de specificatie zichtbaar zijn. Zie de API omschrijving voor meer informatie (required)
     * @param  string $usage_type Verbruikstype van de aansluiting (verplicht veld) (required)
     * @param  bool $include_cooling_down_period Optionele parameter (default false) die aangeeft of de afkoelperiode worden meegenomen in de berekening. Dit is alleen mogelijk bij eventTypes &#39;ChangeOfSupplier&#39; en &#39;MoveIn&#39; (optional)
     * @param  bool $treat_as_consumer Optionele parameter (default true) die aangeeft of de datum bepaald moet worden voor een klant die als consument behandeld moet worden. Afhankelijk van de systeeminstellingen hebben klanten die niet als consument behandeld moeten worden geen recht op een afkoelperiode. Alleen van toepassing bij eventTypes &#39;ChangeOfSupplier&#39; en &#39;MoveIn&#39; (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DateTime, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysOrganizationEventGetFirstPossibleEventDateWithHttpInfo($desired_event_date, $event_type, $usage_type, $include_cooling_down_period = null, $treat_as_consumer = null)
    {
        $returnType = '\DateTime';
        $request = $this->sysOrganizationEventGetFirstPossibleEventDateRequest($desired_event_date, $event_type, $usage_type, $include_cooling_down_period, $treat_as_consumer);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DateTime',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysOrganizationEventGetFirstPossibleEventDateAsync
     *
     * Bepaal eerst mogelijke eventdatum op basis van een gewenste eventdatum
     *
     * @param  \DateTime $desired_event_date Gewenste eventdatum (verplicht veld) (required)
     * @param  string $event_type Type event (verplicht veld). Deze API ondersteunt niet alle &#x60;OrganizationEventTypes&#x60; die in de specificatie zichtbaar zijn. Zie de API omschrijving voor meer informatie (required)
     * @param  string $usage_type Verbruikstype van de aansluiting (verplicht veld) (required)
     * @param  bool $include_cooling_down_period Optionele parameter (default false) die aangeeft of de afkoelperiode worden meegenomen in de berekening. Dit is alleen mogelijk bij eventTypes &#39;ChangeOfSupplier&#39; en &#39;MoveIn&#39; (optional)
     * @param  bool $treat_as_consumer Optionele parameter (default true) die aangeeft of de datum bepaald moet worden voor een klant die als consument behandeld moet worden. Afhankelijk van de systeeminstellingen hebben klanten die niet als consument behandeld moeten worden geen recht op een afkoelperiode. Alleen van toepassing bij eventTypes &#39;ChangeOfSupplier&#39; en &#39;MoveIn&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysOrganizationEventGetFirstPossibleEventDateAsync($desired_event_date, $event_type, $usage_type, $include_cooling_down_period = null, $treat_as_consumer = null)
    {
        return $this->sysOrganizationEventGetFirstPossibleEventDateAsyncWithHttpInfo($desired_event_date, $event_type, $usage_type, $include_cooling_down_period, $treat_as_consumer)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysOrganizationEventGetFirstPossibleEventDateAsyncWithHttpInfo
     *
     * Bepaal eerst mogelijke eventdatum op basis van een gewenste eventdatum
     *
     * @param  \DateTime $desired_event_date Gewenste eventdatum (verplicht veld) (required)
     * @param  string $event_type Type event (verplicht veld). Deze API ondersteunt niet alle &#x60;OrganizationEventTypes&#x60; die in de specificatie zichtbaar zijn. Zie de API omschrijving voor meer informatie (required)
     * @param  string $usage_type Verbruikstype van de aansluiting (verplicht veld) (required)
     * @param  bool $include_cooling_down_period Optionele parameter (default false) die aangeeft of de afkoelperiode worden meegenomen in de berekening. Dit is alleen mogelijk bij eventTypes &#39;ChangeOfSupplier&#39; en &#39;MoveIn&#39; (optional)
     * @param  bool $treat_as_consumer Optionele parameter (default true) die aangeeft of de datum bepaald moet worden voor een klant die als consument behandeld moet worden. Afhankelijk van de systeeminstellingen hebben klanten die niet als consument behandeld moeten worden geen recht op een afkoelperiode. Alleen van toepassing bij eventTypes &#39;ChangeOfSupplier&#39; en &#39;MoveIn&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysOrganizationEventGetFirstPossibleEventDateAsyncWithHttpInfo($desired_event_date, $event_type, $usage_type, $include_cooling_down_period = null, $treat_as_consumer = null)
    {
        $returnType = '\DateTime';
        $request = $this->sysOrganizationEventGetFirstPossibleEventDateRequest($desired_event_date, $event_type, $usage_type, $include_cooling_down_period, $treat_as_consumer);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysOrganizationEventGetFirstPossibleEventDate'
     *
     * @param  \DateTime $desired_event_date Gewenste eventdatum (verplicht veld) (required)
     * @param  string $event_type Type event (verplicht veld). Deze API ondersteunt niet alle &#x60;OrganizationEventTypes&#x60; die in de specificatie zichtbaar zijn. Zie de API omschrijving voor meer informatie (required)
     * @param  string $usage_type Verbruikstype van de aansluiting (verplicht veld) (required)
     * @param  bool $include_cooling_down_period Optionele parameter (default false) die aangeeft of de afkoelperiode worden meegenomen in de berekening. Dit is alleen mogelijk bij eventTypes &#39;ChangeOfSupplier&#39; en &#39;MoveIn&#39; (optional)
     * @param  bool $treat_as_consumer Optionele parameter (default true) die aangeeft of de datum bepaald moet worden voor een klant die als consument behandeld moet worden. Afhankelijk van de systeeminstellingen hebben klanten die niet als consument behandeld moeten worden geen recht op een afkoelperiode. Alleen van toepassing bij eventTypes &#39;ChangeOfSupplier&#39; en &#39;MoveIn&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysOrganizationEventGetFirstPossibleEventDateRequest($desired_event_date, $event_type, $usage_type, $include_cooling_down_period = null, $treat_as_consumer = null)
    {
        // verify the required parameter 'desired_event_date' is set
        if ($desired_event_date === null || (is_array($desired_event_date) && count($desired_event_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $desired_event_date when calling sysOrganizationEventGetFirstPossibleEventDate'
            );
        }
        // verify the required parameter 'event_type' is set
        if ($event_type === null || (is_array($event_type) && count($event_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_type when calling sysOrganizationEventGetFirstPossibleEventDate'
            );
        }
        // verify the required parameter 'usage_type' is set
        if ($usage_type === null || (is_array($usage_type) && count($usage_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $usage_type when calling sysOrganizationEventGetFirstPossibleEventDate'
            );
        }

        $resourcePath = '/sysapi/v1.0/events/minimumeventdate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($desired_event_date !== null) {
            $queryParams['desiredEventDate'] = ObjectSerializer::toQueryValue($desired_event_date);
        }
        // query params
        if ($event_type !== null) {
            $queryParams['eventType'] = ObjectSerializer::toQueryValue($event_type);
        }
        // query params
        if ($usage_type !== null) {
            $queryParams['usageType'] = ObjectSerializer::toQueryValue($usage_type);
        }
        // query params
        if ($include_cooling_down_period !== null) {
            $queryParams['includeCoolingDownPeriod'] = ObjectSerializer::toQueryValue($include_cooling_down_period);
        }
        // query params
        if ($treat_as_consumer !== null) {
            $queryParams['treatAsConsumer'] = ObjectSerializer::toQueryValue($treat_as_consumer);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysOrganizationEventGetMeterReadingCollectionEvents
     *
     * Opvragen van Meteropname opvraag events voor een klant
     *
     * @param  string $organization_id Guid van de klant (required)
     * @param  string $cluster_reference Optioneel filter om alleen de events van dit cluster op te vragen (optional)
     * @param  bool $only_active Boolean (default true) waarmee aangegeven kan worden dat alleen actieve verzoeken teruggegeven moeten worden (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiMeterReadingCollectionEvent[]
     */
    public function sysOrganizationEventGetMeterReadingCollectionEvents($organization_id, $cluster_reference = null, $only_active = null)
    {
        list($response) = $this->sysOrganizationEventGetMeterReadingCollectionEventsWithHttpInfo($organization_id, $cluster_reference, $only_active);
        return $response;
    }

    /**
     * Operation sysOrganizationEventGetMeterReadingCollectionEventsWithHttpInfo
     *
     * Opvragen van Meteropname opvraag events voor een klant
     *
     * @param  string $organization_id Guid van de klant (required)
     * @param  string $cluster_reference Optioneel filter om alleen de events van dit cluster op te vragen (optional)
     * @param  bool $only_active Boolean (default true) waarmee aangegeven kan worden dat alleen actieve verzoeken teruggegeven moeten worden (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiMeterReadingCollectionEvent[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sysOrganizationEventGetMeterReadingCollectionEventsWithHttpInfo($organization_id, $cluster_reference = null, $only_active = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiMeterReadingCollectionEvent[]';
        $request = $this->sysOrganizationEventGetMeterReadingCollectionEventsRequest($organization_id, $cluster_reference, $only_active);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiMeterReadingCollectionEvent[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysOrganizationEventGetMeterReadingCollectionEventsAsync
     *
     * Opvragen van Meteropname opvraag events voor een klant
     *
     * @param  string $organization_id Guid van de klant (required)
     * @param  string $cluster_reference Optioneel filter om alleen de events van dit cluster op te vragen (optional)
     * @param  bool $only_active Boolean (default true) waarmee aangegeven kan worden dat alleen actieve verzoeken teruggegeven moeten worden (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysOrganizationEventGetMeterReadingCollectionEventsAsync($organization_id, $cluster_reference = null, $only_active = null)
    {
        return $this->sysOrganizationEventGetMeterReadingCollectionEventsAsyncWithHttpInfo($organization_id, $cluster_reference, $only_active)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysOrganizationEventGetMeterReadingCollectionEventsAsyncWithHttpInfo
     *
     * Opvragen van Meteropname opvraag events voor een klant
     *
     * @param  string $organization_id Guid van de klant (required)
     * @param  string $cluster_reference Optioneel filter om alleen de events van dit cluster op te vragen (optional)
     * @param  bool $only_active Boolean (default true) waarmee aangegeven kan worden dat alleen actieve verzoeken teruggegeven moeten worden (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysOrganizationEventGetMeterReadingCollectionEventsAsyncWithHttpInfo($organization_id, $cluster_reference = null, $only_active = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiMeterReadingCollectionEvent[]';
        $request = $this->sysOrganizationEventGetMeterReadingCollectionEventsRequest($organization_id, $cluster_reference, $only_active);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysOrganizationEventGetMeterReadingCollectionEvents'
     *
     * @param  string $organization_id Guid van de klant (required)
     * @param  string $cluster_reference Optioneel filter om alleen de events van dit cluster op te vragen (optional)
     * @param  bool $only_active Boolean (default true) waarmee aangegeven kan worden dat alleen actieve verzoeken teruggegeven moeten worden (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysOrganizationEventGetMeterReadingCollectionEventsRequest($organization_id, $cluster_reference = null, $only_active = null)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysOrganizationEventGetMeterReadingCollectionEvents'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/meterreadingcollectionevents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cluster_reference !== null) {
            $queryParams['clusterReference'] = ObjectSerializer::toQueryValue($cluster_reference);
        }
        // query params
        if ($only_active !== null) {
            $queryParams['onlyActive'] = ObjectSerializer::toQueryValue($only_active);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysOrganizationEventGetOrganizationEventData
     *
     * Opvragen van actieve events voor een klant
     *
     * @param  string $organization_id Guid van de klant (required)
     * @param  string $cluster_reference Optioneel filter om alleen de events van dit cluster op te vragen (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationEventWithWorkflowData[]
     */
    public function sysOrganizationEventGetOrganizationEventData($organization_id, $cluster_reference = null)
    {
        list($response) = $this->sysOrganizationEventGetOrganizationEventDataWithHttpInfo($organization_id, $cluster_reference);
        return $response;
    }

    /**
     * Operation sysOrganizationEventGetOrganizationEventDataWithHttpInfo
     *
     * Opvragen van actieve events voor een klant
     *
     * @param  string $organization_id Guid van de klant (required)
     * @param  string $cluster_reference Optioneel filter om alleen de events van dit cluster op te vragen (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationEventWithWorkflowData[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sysOrganizationEventGetOrganizationEventDataWithHttpInfo($organization_id, $cluster_reference = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationEventWithWorkflowData[]';
        $request = $this->sysOrganizationEventGetOrganizationEventDataRequest($organization_id, $cluster_reference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationEventWithWorkflowData[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysOrganizationEventGetOrganizationEventDataAsync
     *
     * Opvragen van actieve events voor een klant
     *
     * @param  string $organization_id Guid van de klant (required)
     * @param  string $cluster_reference Optioneel filter om alleen de events van dit cluster op te vragen (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysOrganizationEventGetOrganizationEventDataAsync($organization_id, $cluster_reference = null)
    {
        return $this->sysOrganizationEventGetOrganizationEventDataAsyncWithHttpInfo($organization_id, $cluster_reference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysOrganizationEventGetOrganizationEventDataAsyncWithHttpInfo
     *
     * Opvragen van actieve events voor een klant
     *
     * @param  string $organization_id Guid van de klant (required)
     * @param  string $cluster_reference Optioneel filter om alleen de events van dit cluster op te vragen (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysOrganizationEventGetOrganizationEventDataAsyncWithHttpInfo($organization_id, $cluster_reference = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationEventWithWorkflowData[]';
        $request = $this->sysOrganizationEventGetOrganizationEventDataRequest($organization_id, $cluster_reference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysOrganizationEventGetOrganizationEventData'
     *
     * @param  string $organization_id Guid van de klant (required)
     * @param  string $cluster_reference Optioneel filter om alleen de events van dit cluster op te vragen (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysOrganizationEventGetOrganizationEventDataRequest($organization_id, $cluster_reference = null)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysOrganizationEventGetOrganizationEventData'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cluster_reference !== null) {
            $queryParams['clusterReference'] = ObjectSerializer::toQueryValue($cluster_reference);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysOrganizationEventGetSettlementEvents
     *
     * Opvragen van Energie Afrekening events voor een klant
     *
     * @param  string $organization_id Guid van de klant (required)
     * @param  string $cluster_reference Optioneel filter om alleen de events van dit cluster op te vragen (optional)
     * @param  bool $only_active Boolean (default true) waarmee aangegeven kan worden dat alleen actieve events teruggegeven moeten worden (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiSettlementEvent[]
     */
    public function sysOrganizationEventGetSettlementEvents($organization_id, $cluster_reference = null, $only_active = null)
    {
        list($response) = $this->sysOrganizationEventGetSettlementEventsWithHttpInfo($organization_id, $cluster_reference, $only_active);
        return $response;
    }

    /**
     * Operation sysOrganizationEventGetSettlementEventsWithHttpInfo
     *
     * Opvragen van Energie Afrekening events voor een klant
     *
     * @param  string $organization_id Guid van de klant (required)
     * @param  string $cluster_reference Optioneel filter om alleen de events van dit cluster op te vragen (optional)
     * @param  bool $only_active Boolean (default true) waarmee aangegeven kan worden dat alleen actieve events teruggegeven moeten worden (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiSettlementEvent[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sysOrganizationEventGetSettlementEventsWithHttpInfo($organization_id, $cluster_reference = null, $only_active = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiSettlementEvent[]';
        $request = $this->sysOrganizationEventGetSettlementEventsRequest($organization_id, $cluster_reference, $only_active);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiSettlementEvent[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysOrganizationEventGetSettlementEventsAsync
     *
     * Opvragen van Energie Afrekening events voor een klant
     *
     * @param  string $organization_id Guid van de klant (required)
     * @param  string $cluster_reference Optioneel filter om alleen de events van dit cluster op te vragen (optional)
     * @param  bool $only_active Boolean (default true) waarmee aangegeven kan worden dat alleen actieve events teruggegeven moeten worden (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysOrganizationEventGetSettlementEventsAsync($organization_id, $cluster_reference = null, $only_active = null)
    {
        return $this->sysOrganizationEventGetSettlementEventsAsyncWithHttpInfo($organization_id, $cluster_reference, $only_active)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysOrganizationEventGetSettlementEventsAsyncWithHttpInfo
     *
     * Opvragen van Energie Afrekening events voor een klant
     *
     * @param  string $organization_id Guid van de klant (required)
     * @param  string $cluster_reference Optioneel filter om alleen de events van dit cluster op te vragen (optional)
     * @param  bool $only_active Boolean (default true) waarmee aangegeven kan worden dat alleen actieve events teruggegeven moeten worden (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysOrganizationEventGetSettlementEventsAsyncWithHttpInfo($organization_id, $cluster_reference = null, $only_active = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiSettlementEvent[]';
        $request = $this->sysOrganizationEventGetSettlementEventsRequest($organization_id, $cluster_reference, $only_active);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysOrganizationEventGetSettlementEvents'
     *
     * @param  string $organization_id Guid van de klant (required)
     * @param  string $cluster_reference Optioneel filter om alleen de events van dit cluster op te vragen (optional)
     * @param  bool $only_active Boolean (default true) waarmee aangegeven kan worden dat alleen actieve events teruggegeven moeten worden (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysOrganizationEventGetSettlementEventsRequest($organization_id, $cluster_reference = null, $only_active = null)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysOrganizationEventGetSettlementEvents'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/settlementevents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cluster_reference !== null) {
            $queryParams['clusterReference'] = ObjectSerializer::toQueryValue($cluster_reference);
        }
        // query params
        if ($only_active !== null) {
            $queryParams['onlyActive'] = ObjectSerializer::toQueryValue($only_active);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysOrganizationEventGetSwitchEvents
     *
     * Opvragen van Switch (ChangeOfSupplier en MoveIn) events voor een klant
     *
     * @param  string $organization_id Guid van de klant (required)
     * @param  string $cluster_reference Optioneel filter om alleen de events van dit cluster op te vragen (optional)
     * @param  bool $only_active Boolean (default true) waarmee aangegeven kan worden dat alleen actieve events teruggegeven moeten worden (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiSwitchEvent[]
     */
    public function sysOrganizationEventGetSwitchEvents($organization_id, $cluster_reference = null, $only_active = null)
    {
        list($response) = $this->sysOrganizationEventGetSwitchEventsWithHttpInfo($organization_id, $cluster_reference, $only_active);
        return $response;
    }

    /**
     * Operation sysOrganizationEventGetSwitchEventsWithHttpInfo
     *
     * Opvragen van Switch (ChangeOfSupplier en MoveIn) events voor een klant
     *
     * @param  string $organization_id Guid van de klant (required)
     * @param  string $cluster_reference Optioneel filter om alleen de events van dit cluster op te vragen (optional)
     * @param  bool $only_active Boolean (default true) waarmee aangegeven kan worden dat alleen actieve events teruggegeven moeten worden (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiSwitchEvent[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sysOrganizationEventGetSwitchEventsWithHttpInfo($organization_id, $cluster_reference = null, $only_active = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiSwitchEvent[]';
        $request = $this->sysOrganizationEventGetSwitchEventsRequest($organization_id, $cluster_reference, $only_active);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiSwitchEvent[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysOrganizationEventGetSwitchEventsAsync
     *
     * Opvragen van Switch (ChangeOfSupplier en MoveIn) events voor een klant
     *
     * @param  string $organization_id Guid van de klant (required)
     * @param  string $cluster_reference Optioneel filter om alleen de events van dit cluster op te vragen (optional)
     * @param  bool $only_active Boolean (default true) waarmee aangegeven kan worden dat alleen actieve events teruggegeven moeten worden (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysOrganizationEventGetSwitchEventsAsync($organization_id, $cluster_reference = null, $only_active = null)
    {
        return $this->sysOrganizationEventGetSwitchEventsAsyncWithHttpInfo($organization_id, $cluster_reference, $only_active)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysOrganizationEventGetSwitchEventsAsyncWithHttpInfo
     *
     * Opvragen van Switch (ChangeOfSupplier en MoveIn) events voor een klant
     *
     * @param  string $organization_id Guid van de klant (required)
     * @param  string $cluster_reference Optioneel filter om alleen de events van dit cluster op te vragen (optional)
     * @param  bool $only_active Boolean (default true) waarmee aangegeven kan worden dat alleen actieve events teruggegeven moeten worden (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysOrganizationEventGetSwitchEventsAsyncWithHttpInfo($organization_id, $cluster_reference = null, $only_active = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiSwitchEvent[]';
        $request = $this->sysOrganizationEventGetSwitchEventsRequest($organization_id, $cluster_reference, $only_active);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysOrganizationEventGetSwitchEvents'
     *
     * @param  string $organization_id Guid van de klant (required)
     * @param  string $cluster_reference Optioneel filter om alleen de events van dit cluster op te vragen (optional)
     * @param  bool $only_active Boolean (default true) waarmee aangegeven kan worden dat alleen actieve events teruggegeven moeten worden (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysOrganizationEventGetSwitchEventsRequest($organization_id, $cluster_reference = null, $only_active = null)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysOrganizationEventGetSwitchEvents'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/switchevents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cluster_reference !== null) {
            $queryParams['clusterReference'] = ObjectSerializer::toQueryValue($cluster_reference);
        }
        // query params
        if ($only_active !== null) {
            $queryParams['onlyActive'] = ObjectSerializer::toQueryValue($only_active);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
