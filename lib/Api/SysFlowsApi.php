<?php
/**
 * SysFlowsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SysFlowsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SysFlowsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sysFlowsAcceptProposedAdvancePayment
     *
     * @param  string $advance_payment_id advance_payment_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysFlowsAcceptProposedAdvancePayment($advance_payment_id)
    {
        list($response) = $this->sysFlowsAcceptProposedAdvancePaymentWithHttpInfo($advance_payment_id);
        return $response;
    }

    /**
     * Operation sysFlowsAcceptProposedAdvancePaymentWithHttpInfo
     *
     * @param  string $advance_payment_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysFlowsAcceptProposedAdvancePaymentWithHttpInfo($advance_payment_id)
    {
        $returnType = 'object';
        $request = $this->sysFlowsAcceptProposedAdvancePaymentRequest($advance_payment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysFlowsAcceptProposedAdvancePaymentAsync
     *
     * 
     *
     * @param  string $advance_payment_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsAcceptProposedAdvancePaymentAsync($advance_payment_id)
    {
        return $this->sysFlowsAcceptProposedAdvancePaymentAsyncWithHttpInfo($advance_payment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysFlowsAcceptProposedAdvancePaymentAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $advance_payment_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsAcceptProposedAdvancePaymentAsyncWithHttpInfo($advance_payment_id)
    {
        $returnType = 'object';
        $request = $this->sysFlowsAcceptProposedAdvancePaymentRequest($advance_payment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysFlowsAcceptProposedAdvancePayment'
     *
     * @param  string $advance_payment_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysFlowsAcceptProposedAdvancePaymentRequest($advance_payment_id)
    {
        // verify the required parameter 'advance_payment_id' is set
        if ($advance_payment_id === null || (is_array($advance_payment_id) && count($advance_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advance_payment_id when calling sysFlowsAcceptProposedAdvancePayment'
            );
        }

        $resourcePath = '/sysapi/v1.0/flows/advancepaymentcalculation/accept';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($advance_payment_id !== null) {
            $queryParams['advancePaymentId'] = ObjectSerializer::toQueryValue($advance_payment_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysFlowsAdvancePaymentInvoiceFlowModificationFinished
     *
     * AdvancePayment factuur stap 'Wacht op aanpassingen' gereed melden voor {InvoiceId}
     *
     * @param  string $invoice_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysFlowsAdvancePaymentInvoiceFlowModificationFinished($invoice_id)
    {
        list($response) = $this->sysFlowsAdvancePaymentInvoiceFlowModificationFinishedWithHttpInfo($invoice_id);
        return $response;
    }

    /**
     * Operation sysFlowsAdvancePaymentInvoiceFlowModificationFinishedWithHttpInfo
     *
     * AdvancePayment factuur stap 'Wacht op aanpassingen' gereed melden voor {InvoiceId}
     *
     * @param  string $invoice_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysFlowsAdvancePaymentInvoiceFlowModificationFinishedWithHttpInfo($invoice_id)
    {
        $returnType = 'object';
        $request = $this->sysFlowsAdvancePaymentInvoiceFlowModificationFinishedRequest($invoice_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysFlowsAdvancePaymentInvoiceFlowModificationFinishedAsync
     *
     * AdvancePayment factuur stap 'Wacht op aanpassingen' gereed melden voor {InvoiceId}
     *
     * @param  string $invoice_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsAdvancePaymentInvoiceFlowModificationFinishedAsync($invoice_id)
    {
        return $this->sysFlowsAdvancePaymentInvoiceFlowModificationFinishedAsyncWithHttpInfo($invoice_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysFlowsAdvancePaymentInvoiceFlowModificationFinishedAsyncWithHttpInfo
     *
     * AdvancePayment factuur stap 'Wacht op aanpassingen' gereed melden voor {InvoiceId}
     *
     * @param  string $invoice_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsAdvancePaymentInvoiceFlowModificationFinishedAsyncWithHttpInfo($invoice_id)
    {
        $returnType = 'object';
        $request = $this->sysFlowsAdvancePaymentInvoiceFlowModificationFinishedRequest($invoice_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysFlowsAdvancePaymentInvoiceFlowModificationFinished'
     *
     * @param  string $invoice_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysFlowsAdvancePaymentInvoiceFlowModificationFinishedRequest($invoice_id)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling sysFlowsAdvancePaymentInvoiceFlowModificationFinished'
            );
        }

        $resourcePath = '/sysapi/v1.0/flows/advancepaymentinvoiceflow/modificationfinished';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($invoice_id !== null) {
            $queryParams['invoiceId'] = ObjectSerializer::toQueryValue($invoice_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysFlowsCancelApplicationFlow
     *
     * Aanmeldflow beëindigen
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiCancelFlowPostData $cancel_flow_post_data Optionele POST-data waarmee detailgedrag aangestuurd kan worden. Als de POST-data leeg is worden de default waarden van de verschillende parameters gebruikt (required)
     * @param  string $cluster_reference Optionele parameter (default null). Als er meerdere actieve flows zijn is dit veld verplicht. Als de clusterreferentie niet bestaat wordt een foutmelding teruggegeven (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysFlowsCancelApplicationFlow($organization_id, $cancel_flow_post_data, $cluster_reference = null)
    {
        list($response) = $this->sysFlowsCancelApplicationFlowWithHttpInfo($organization_id, $cancel_flow_post_data, $cluster_reference);
        return $response;
    }

    /**
     * Operation sysFlowsCancelApplicationFlowWithHttpInfo
     *
     * Aanmeldflow beëindigen
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiCancelFlowPostData $cancel_flow_post_data Optionele POST-data waarmee detailgedrag aangestuurd kan worden. Als de POST-data leeg is worden de default waarden van de verschillende parameters gebruikt (required)
     * @param  string $cluster_reference Optionele parameter (default null). Als er meerdere actieve flows zijn is dit veld verplicht. Als de clusterreferentie niet bestaat wordt een foutmelding teruggegeven (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysFlowsCancelApplicationFlowWithHttpInfo($organization_id, $cancel_flow_post_data, $cluster_reference = null)
    {
        $returnType = 'object';
        $request = $this->sysFlowsCancelApplicationFlowRequest($organization_id, $cancel_flow_post_data, $cluster_reference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysFlowsCancelApplicationFlowAsync
     *
     * Aanmeldflow beëindigen
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiCancelFlowPostData $cancel_flow_post_data Optionele POST-data waarmee detailgedrag aangestuurd kan worden. Als de POST-data leeg is worden de default waarden van de verschillende parameters gebruikt (required)
     * @param  string $cluster_reference Optionele parameter (default null). Als er meerdere actieve flows zijn is dit veld verplicht. Als de clusterreferentie niet bestaat wordt een foutmelding teruggegeven (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsCancelApplicationFlowAsync($organization_id, $cancel_flow_post_data, $cluster_reference = null)
    {
        return $this->sysFlowsCancelApplicationFlowAsyncWithHttpInfo($organization_id, $cancel_flow_post_data, $cluster_reference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysFlowsCancelApplicationFlowAsyncWithHttpInfo
     *
     * Aanmeldflow beëindigen
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiCancelFlowPostData $cancel_flow_post_data Optionele POST-data waarmee detailgedrag aangestuurd kan worden. Als de POST-data leeg is worden de default waarden van de verschillende parameters gebruikt (required)
     * @param  string $cluster_reference Optionele parameter (default null). Als er meerdere actieve flows zijn is dit veld verplicht. Als de clusterreferentie niet bestaat wordt een foutmelding teruggegeven (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsCancelApplicationFlowAsyncWithHttpInfo($organization_id, $cancel_flow_post_data, $cluster_reference = null)
    {
        $returnType = 'object';
        $request = $this->sysFlowsCancelApplicationFlowRequest($organization_id, $cancel_flow_post_data, $cluster_reference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysFlowsCancelApplicationFlow'
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiCancelFlowPostData $cancel_flow_post_data Optionele POST-data waarmee detailgedrag aangestuurd kan worden. Als de POST-data leeg is worden de default waarden van de verschillende parameters gebruikt (required)
     * @param  string $cluster_reference Optionele parameter (default null). Als er meerdere actieve flows zijn is dit veld verplicht. Als de clusterreferentie niet bestaat wordt een foutmelding teruggegeven (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysFlowsCancelApplicationFlowRequest($organization_id, $cancel_flow_post_data, $cluster_reference = null)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysFlowsCancelApplicationFlow'
            );
        }
        // verify the required parameter 'cancel_flow_post_data' is set
        if ($cancel_flow_post_data === null || (is_array($cancel_flow_post_data) && count($cancel_flow_post_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cancel_flow_post_data when calling sysFlowsCancelApplicationFlow'
            );
        }

        $resourcePath = '/sysapi/v1.0/flows/application/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($organization_id !== null) {
            $queryParams['organizationId'] = ObjectSerializer::toQueryValue($organization_id);
        }
        // query params
        if ($cluster_reference !== null) {
            $queryParams['clusterReference'] = ObjectSerializer::toQueryValue($cluster_reference);
        }


        // body params
        $_tempBody = null;
        if (isset($cancel_flow_post_data)) {
            $_tempBody = $cancel_flow_post_data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysFlowsCancelCoolingDownPeriodApplicationFlow
     *
     * @param  string $organization_id organization_id (required)
     * @param  string $cluster_reference cluster_reference (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysFlowsCancelCoolingDownPeriodApplicationFlow($organization_id, $cluster_reference = null)
    {
        list($response) = $this->sysFlowsCancelCoolingDownPeriodApplicationFlowWithHttpInfo($organization_id, $cluster_reference);
        return $response;
    }

    /**
     * Operation sysFlowsCancelCoolingDownPeriodApplicationFlowWithHttpInfo
     *
     * @param  string $organization_id (required)
     * @param  string $cluster_reference (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysFlowsCancelCoolingDownPeriodApplicationFlowWithHttpInfo($organization_id, $cluster_reference = null)
    {
        $returnType = 'object';
        $request = $this->sysFlowsCancelCoolingDownPeriodApplicationFlowRequest($organization_id, $cluster_reference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysFlowsCancelCoolingDownPeriodApplicationFlowAsync
     *
     * 
     *
     * @param  string $organization_id (required)
     * @param  string $cluster_reference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsCancelCoolingDownPeriodApplicationFlowAsync($organization_id, $cluster_reference = null)
    {
        return $this->sysFlowsCancelCoolingDownPeriodApplicationFlowAsyncWithHttpInfo($organization_id, $cluster_reference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysFlowsCancelCoolingDownPeriodApplicationFlowAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization_id (required)
     * @param  string $cluster_reference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsCancelCoolingDownPeriodApplicationFlowAsyncWithHttpInfo($organization_id, $cluster_reference = null)
    {
        $returnType = 'object';
        $request = $this->sysFlowsCancelCoolingDownPeriodApplicationFlowRequest($organization_id, $cluster_reference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysFlowsCancelCoolingDownPeriodApplicationFlow'
     *
     * @param  string $organization_id (required)
     * @param  string $cluster_reference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysFlowsCancelCoolingDownPeriodApplicationFlowRequest($organization_id, $cluster_reference = null)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysFlowsCancelCoolingDownPeriodApplicationFlow'
            );
        }

        $resourcePath = '/sysapi/v1.0/flows/application/cancelcoolingdownperiod';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($organization_id !== null) {
            $queryParams['organizationId'] = ObjectSerializer::toQueryValue($organization_id);
        }
        // query params
        if ($cluster_reference !== null) {
            $queryParams['clusterReference'] = ObjectSerializer::toQueryValue($cluster_reference);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysFlowsCancelMoveFlow
     *
     * Verhuisflow afbreken
     *
     * @param  string $organization_id  (required)
     * @param  string $cluster_reference  (required)
     * @param  bool $reset_data  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysFlowsCancelMoveFlow($organization_id, $cluster_reference, $reset_data = null)
    {
        list($response) = $this->sysFlowsCancelMoveFlowWithHttpInfo($organization_id, $cluster_reference, $reset_data);
        return $response;
    }

    /**
     * Operation sysFlowsCancelMoveFlowWithHttpInfo
     *
     * Verhuisflow afbreken
     *
     * @param  string $organization_id  (required)
     * @param  string $cluster_reference  (required)
     * @param  bool $reset_data  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysFlowsCancelMoveFlowWithHttpInfo($organization_id, $cluster_reference, $reset_data = null)
    {
        $returnType = 'object';
        $request = $this->sysFlowsCancelMoveFlowRequest($organization_id, $cluster_reference, $reset_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysFlowsCancelMoveFlowAsync
     *
     * Verhuisflow afbreken
     *
     * @param  string $organization_id  (required)
     * @param  string $cluster_reference  (required)
     * @param  bool $reset_data  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsCancelMoveFlowAsync($organization_id, $cluster_reference, $reset_data = null)
    {
        return $this->sysFlowsCancelMoveFlowAsyncWithHttpInfo($organization_id, $cluster_reference, $reset_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysFlowsCancelMoveFlowAsyncWithHttpInfo
     *
     * Verhuisflow afbreken
     *
     * @param  string $organization_id  (required)
     * @param  string $cluster_reference  (required)
     * @param  bool $reset_data  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsCancelMoveFlowAsyncWithHttpInfo($organization_id, $cluster_reference, $reset_data = null)
    {
        $returnType = 'object';
        $request = $this->sysFlowsCancelMoveFlowRequest($organization_id, $cluster_reference, $reset_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysFlowsCancelMoveFlow'
     *
     * @param  string $organization_id  (required)
     * @param  string $cluster_reference  (required)
     * @param  bool $reset_data  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysFlowsCancelMoveFlowRequest($organization_id, $cluster_reference, $reset_data = null)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysFlowsCancelMoveFlow'
            );
        }
        // verify the required parameter 'cluster_reference' is set
        if ($cluster_reference === null || (is_array($cluster_reference) && count($cluster_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cluster_reference when calling sysFlowsCancelMoveFlow'
            );
        }

        $resourcePath = '/sysapi/v1.0/flows/move/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($organization_id !== null) {
            $queryParams['organizationId'] = ObjectSerializer::toQueryValue($organization_id);
        }
        // query params
        if ($cluster_reference !== null) {
            $queryParams['clusterReference'] = ObjectSerializer::toQueryValue($cluster_reference);
        }
        // query params
        if ($reset_data !== null) {
            $queryParams['resetData'] = ObjectSerializer::toQueryValue($reset_data);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysFlowsCancelPurchaseFlow
     *
     * Productaanschafflow afbreken
     *
     * @param  string $organization_id  (required)
     * @param  string $product_unit_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysFlowsCancelPurchaseFlow($organization_id, $product_unit_id)
    {
        list($response) = $this->sysFlowsCancelPurchaseFlowWithHttpInfo($organization_id, $product_unit_id);
        return $response;
    }

    /**
     * Operation sysFlowsCancelPurchaseFlowWithHttpInfo
     *
     * Productaanschafflow afbreken
     *
     * @param  string $organization_id  (required)
     * @param  string $product_unit_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysFlowsCancelPurchaseFlowWithHttpInfo($organization_id, $product_unit_id)
    {
        $returnType = 'object';
        $request = $this->sysFlowsCancelPurchaseFlowRequest($organization_id, $product_unit_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysFlowsCancelPurchaseFlowAsync
     *
     * Productaanschafflow afbreken
     *
     * @param  string $organization_id  (required)
     * @param  string $product_unit_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsCancelPurchaseFlowAsync($organization_id, $product_unit_id)
    {
        return $this->sysFlowsCancelPurchaseFlowAsyncWithHttpInfo($organization_id, $product_unit_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysFlowsCancelPurchaseFlowAsyncWithHttpInfo
     *
     * Productaanschafflow afbreken
     *
     * @param  string $organization_id  (required)
     * @param  string $product_unit_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsCancelPurchaseFlowAsyncWithHttpInfo($organization_id, $product_unit_id)
    {
        $returnType = 'object';
        $request = $this->sysFlowsCancelPurchaseFlowRequest($organization_id, $product_unit_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysFlowsCancelPurchaseFlow'
     *
     * @param  string $organization_id  (required)
     * @param  string $product_unit_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysFlowsCancelPurchaseFlowRequest($organization_id, $product_unit_id)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysFlowsCancelPurchaseFlow'
            );
        }
        // verify the required parameter 'product_unit_id' is set
        if ($product_unit_id === null || (is_array($product_unit_id) && count($product_unit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_unit_id when calling sysFlowsCancelPurchaseFlow'
            );
        }

        $resourcePath = '/sysapi/v1.0/flows/productpurchase/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($organization_id !== null) {
            $queryParams['organizationId'] = ObjectSerializer::toQueryValue($organization_id);
        }
        // query params
        if ($product_unit_id !== null) {
            $queryParams['productUnitId'] = ObjectSerializer::toQueryValue($product_unit_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysFlowsCancelPurchaseFlowDeposit
     *
     * Productaanschafflow voor Borg afbreken
     *
     * @param  string $organization_id  (required)
     * @param  string $cluster_reference cluster naam van de contracten waarvoor de borg flow actief is (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysFlowsCancelPurchaseFlowDeposit($organization_id, $cluster_reference)
    {
        list($response) = $this->sysFlowsCancelPurchaseFlowDepositWithHttpInfo($organization_id, $cluster_reference);
        return $response;
    }

    /**
     * Operation sysFlowsCancelPurchaseFlowDepositWithHttpInfo
     *
     * Productaanschafflow voor Borg afbreken
     *
     * @param  string $organization_id  (required)
     * @param  string $cluster_reference cluster naam van de contracten waarvoor de borg flow actief is (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysFlowsCancelPurchaseFlowDepositWithHttpInfo($organization_id, $cluster_reference)
    {
        $returnType = 'object';
        $request = $this->sysFlowsCancelPurchaseFlowDepositRequest($organization_id, $cluster_reference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysFlowsCancelPurchaseFlowDepositAsync
     *
     * Productaanschafflow voor Borg afbreken
     *
     * @param  string $organization_id  (required)
     * @param  string $cluster_reference cluster naam van de contracten waarvoor de borg flow actief is (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsCancelPurchaseFlowDepositAsync($organization_id, $cluster_reference)
    {
        return $this->sysFlowsCancelPurchaseFlowDepositAsyncWithHttpInfo($organization_id, $cluster_reference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysFlowsCancelPurchaseFlowDepositAsyncWithHttpInfo
     *
     * Productaanschafflow voor Borg afbreken
     *
     * @param  string $organization_id  (required)
     * @param  string $cluster_reference cluster naam van de contracten waarvoor de borg flow actief is (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsCancelPurchaseFlowDepositAsyncWithHttpInfo($organization_id, $cluster_reference)
    {
        $returnType = 'object';
        $request = $this->sysFlowsCancelPurchaseFlowDepositRequest($organization_id, $cluster_reference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysFlowsCancelPurchaseFlowDeposit'
     *
     * @param  string $organization_id  (required)
     * @param  string $cluster_reference cluster naam van de contracten waarvoor de borg flow actief is (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysFlowsCancelPurchaseFlowDepositRequest($organization_id, $cluster_reference)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysFlowsCancelPurchaseFlowDeposit'
            );
        }
        // verify the required parameter 'cluster_reference' is set
        if ($cluster_reference === null || (is_array($cluster_reference) && count($cluster_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cluster_reference when calling sysFlowsCancelPurchaseFlowDeposit'
            );
        }

        $resourcePath = '/sysapi/v1.0/flows/productpurchase/canceldeposit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($organization_id !== null) {
            $queryParams['organizationId'] = ObjectSerializer::toQueryValue($organization_id);
        }
        // query params
        if ($cluster_reference !== null) {
            $queryParams['clusterReference'] = ObjectSerializer::toQueryValue($cluster_reference);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysFlowsCancelSwitchOutFlow
     *
     * Uithuizingsflow afbreken
     *
     * @param  string $connection_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysFlowsCancelSwitchOutFlow($connection_id)
    {
        list($response) = $this->sysFlowsCancelSwitchOutFlowWithHttpInfo($connection_id);
        return $response;
    }

    /**
     * Operation sysFlowsCancelSwitchOutFlowWithHttpInfo
     *
     * Uithuizingsflow afbreken
     *
     * @param  string $connection_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysFlowsCancelSwitchOutFlowWithHttpInfo($connection_id)
    {
        $returnType = 'object';
        $request = $this->sysFlowsCancelSwitchOutFlowRequest($connection_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysFlowsCancelSwitchOutFlowAsync
     *
     * Uithuizingsflow afbreken
     *
     * @param  string $connection_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsCancelSwitchOutFlowAsync($connection_id)
    {
        return $this->sysFlowsCancelSwitchOutFlowAsyncWithHttpInfo($connection_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysFlowsCancelSwitchOutFlowAsyncWithHttpInfo
     *
     * Uithuizingsflow afbreken
     *
     * @param  string $connection_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsCancelSwitchOutFlowAsyncWithHttpInfo($connection_id)
    {
        $returnType = 'object';
        $request = $this->sysFlowsCancelSwitchOutFlowRequest($connection_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysFlowsCancelSwitchOutFlow'
     *
     * @param  string $connection_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysFlowsCancelSwitchOutFlowRequest($connection_id)
    {
        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling sysFlowsCancelSwitchOutFlow'
            );
        }

        $resourcePath = '/sysapi/v1.0/flows/switchout/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($connection_id !== null) {
            $queryParams['connectionId'] = ObjectSerializer::toQueryValue($connection_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysFlowsEditMoveFlow
     *
     * Aanpassen van verhuisflow datums
     *
     * @param  string $organization_id  (required)
     * @param  string $cluster_reference  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEditMoveFlow $edit_move_flow  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysFlowsEditMoveFlow($organization_id, $cluster_reference, $edit_move_flow)
    {
        list($response) = $this->sysFlowsEditMoveFlowWithHttpInfo($organization_id, $cluster_reference, $edit_move_flow);
        return $response;
    }

    /**
     * Operation sysFlowsEditMoveFlowWithHttpInfo
     *
     * Aanpassen van verhuisflow datums
     *
     * @param  string $organization_id  (required)
     * @param  string $cluster_reference  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEditMoveFlow $edit_move_flow  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysFlowsEditMoveFlowWithHttpInfo($organization_id, $cluster_reference, $edit_move_flow)
    {
        $returnType = 'object';
        $request = $this->sysFlowsEditMoveFlowRequest($organization_id, $cluster_reference, $edit_move_flow);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysFlowsEditMoveFlowAsync
     *
     * Aanpassen van verhuisflow datums
     *
     * @param  string $organization_id  (required)
     * @param  string $cluster_reference  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEditMoveFlow $edit_move_flow  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsEditMoveFlowAsync($organization_id, $cluster_reference, $edit_move_flow)
    {
        return $this->sysFlowsEditMoveFlowAsyncWithHttpInfo($organization_id, $cluster_reference, $edit_move_flow)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysFlowsEditMoveFlowAsyncWithHttpInfo
     *
     * Aanpassen van verhuisflow datums
     *
     * @param  string $organization_id  (required)
     * @param  string $cluster_reference  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEditMoveFlow $edit_move_flow  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsEditMoveFlowAsyncWithHttpInfo($organization_id, $cluster_reference, $edit_move_flow)
    {
        $returnType = 'object';
        $request = $this->sysFlowsEditMoveFlowRequest($organization_id, $cluster_reference, $edit_move_flow);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysFlowsEditMoveFlow'
     *
     * @param  string $organization_id  (required)
     * @param  string $cluster_reference  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEditMoveFlow $edit_move_flow  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysFlowsEditMoveFlowRequest($organization_id, $cluster_reference, $edit_move_flow)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysFlowsEditMoveFlow'
            );
        }
        // verify the required parameter 'cluster_reference' is set
        if ($cluster_reference === null || (is_array($cluster_reference) && count($cluster_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cluster_reference when calling sysFlowsEditMoveFlow'
            );
        }
        // verify the required parameter 'edit_move_flow' is set
        if ($edit_move_flow === null || (is_array($edit_move_flow) && count($edit_move_flow) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $edit_move_flow when calling sysFlowsEditMoveFlow'
            );
        }

        $resourcePath = '/sysapi/v1.0/flows/move/edit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($organization_id !== null) {
            $queryParams['organizationId'] = ObjectSerializer::toQueryValue($organization_id);
        }
        // query params
        if ($cluster_reference !== null) {
            $queryParams['clusterReference'] = ObjectSerializer::toQueryValue($cluster_reference);
        }


        // body params
        $_tempBody = null;
        if (isset($edit_move_flow)) {
            $_tempBody = $edit_move_flow;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysFlowsGetAdvancePaymentInvoicesByStep
     *
     * Haalt de facturen die in de gevraagde voorschot factuurflow stap staan op.  Geldige waarde(n) voor {stepType} zijn 'WaitForModification'
     *
     * @param  string $step_type  (required)
     * @param  string $company_label_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice[]
     */
    public function sysFlowsGetAdvancePaymentInvoicesByStep($step_type, $company_label_id = null)
    {
        list($response) = $this->sysFlowsGetAdvancePaymentInvoicesByStepWithHttpInfo($step_type, $company_label_id);
        return $response;
    }

    /**
     * Operation sysFlowsGetAdvancePaymentInvoicesByStepWithHttpInfo
     *
     * Haalt de facturen die in de gevraagde voorschot factuurflow stap staan op.  Geldige waarde(n) voor {stepType} zijn 'WaitForModification'
     *
     * @param  string $step_type  (required)
     * @param  string $company_label_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sysFlowsGetAdvancePaymentInvoicesByStepWithHttpInfo($step_type, $company_label_id = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice[]';
        $request = $this->sysFlowsGetAdvancePaymentInvoicesByStepRequest($step_type, $company_label_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysFlowsGetAdvancePaymentInvoicesByStepAsync
     *
     * Haalt de facturen die in de gevraagde voorschot factuurflow stap staan op.  Geldige waarde(n) voor {stepType} zijn 'WaitForModification'
     *
     * @param  string $step_type  (required)
     * @param  string $company_label_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsGetAdvancePaymentInvoicesByStepAsync($step_type, $company_label_id = null)
    {
        return $this->sysFlowsGetAdvancePaymentInvoicesByStepAsyncWithHttpInfo($step_type, $company_label_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysFlowsGetAdvancePaymentInvoicesByStepAsyncWithHttpInfo
     *
     * Haalt de facturen die in de gevraagde voorschot factuurflow stap staan op.  Geldige waarde(n) voor {stepType} zijn 'WaitForModification'
     *
     * @param  string $step_type  (required)
     * @param  string $company_label_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsGetAdvancePaymentInvoicesByStepAsyncWithHttpInfo($step_type, $company_label_id = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice[]';
        $request = $this->sysFlowsGetAdvancePaymentInvoicesByStepRequest($step_type, $company_label_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysFlowsGetAdvancePaymentInvoicesByStep'
     *
     * @param  string $step_type  (required)
     * @param  string $company_label_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysFlowsGetAdvancePaymentInvoicesByStepRequest($step_type, $company_label_id = null)
    {
        // verify the required parameter 'step_type' is set
        if ($step_type === null || (is_array($step_type) && count($step_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $step_type when calling sysFlowsGetAdvancePaymentInvoicesByStep'
            );
        }

        $resourcePath = '/sysapi/v1.0/flows/advancepaymentinvoiceflow/invoices/getByStep/{stepType}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($company_label_id !== null) {
            $queryParams['companyLabelId'] = ObjectSerializer::toQueryValue($company_label_id);
        }

        // path params
        if ($step_type !== null) {
            $resourcePath = str_replace(
                '{' . 'stepType' . '}',
                ObjectSerializer::toPathValue($step_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysFlowsGetSettlementInvoicesByStep
     *
     * Haalt de facturen die in de gevraagde afreken factuurflow stap staan op.  Geldige waarde(n) voor {stepType} zijn 'WaitForModification'
     *
     * @param  string $step_type  (required)
     * @param  string $company_label_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice[]
     */
    public function sysFlowsGetSettlementInvoicesByStep($step_type, $company_label_id = null)
    {
        list($response) = $this->sysFlowsGetSettlementInvoicesByStepWithHttpInfo($step_type, $company_label_id);
        return $response;
    }

    /**
     * Operation sysFlowsGetSettlementInvoicesByStepWithHttpInfo
     *
     * Haalt de facturen die in de gevraagde afreken factuurflow stap staan op.  Geldige waarde(n) voor {stepType} zijn 'WaitForModification'
     *
     * @param  string $step_type  (required)
     * @param  string $company_label_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sysFlowsGetSettlementInvoicesByStepWithHttpInfo($step_type, $company_label_id = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice[]';
        $request = $this->sysFlowsGetSettlementInvoicesByStepRequest($step_type, $company_label_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysFlowsGetSettlementInvoicesByStepAsync
     *
     * Haalt de facturen die in de gevraagde afreken factuurflow stap staan op.  Geldige waarde(n) voor {stepType} zijn 'WaitForModification'
     *
     * @param  string $step_type  (required)
     * @param  string $company_label_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsGetSettlementInvoicesByStepAsync($step_type, $company_label_id = null)
    {
        return $this->sysFlowsGetSettlementInvoicesByStepAsyncWithHttpInfo($step_type, $company_label_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysFlowsGetSettlementInvoicesByStepAsyncWithHttpInfo
     *
     * Haalt de facturen die in de gevraagde afreken factuurflow stap staan op.  Geldige waarde(n) voor {stepType} zijn 'WaitForModification'
     *
     * @param  string $step_type  (required)
     * @param  string $company_label_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsGetSettlementInvoicesByStepAsyncWithHttpInfo($step_type, $company_label_id = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice[]';
        $request = $this->sysFlowsGetSettlementInvoicesByStepRequest($step_type, $company_label_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysFlowsGetSettlementInvoicesByStep'
     *
     * @param  string $step_type  (required)
     * @param  string $company_label_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysFlowsGetSettlementInvoicesByStepRequest($step_type, $company_label_id = null)
    {
        // verify the required parameter 'step_type' is set
        if ($step_type === null || (is_array($step_type) && count($step_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $step_type when calling sysFlowsGetSettlementInvoicesByStep'
            );
        }

        $resourcePath = '/sysapi/v1.0/flows/settlementinvoiceflow/invoices/getByStep/{stepType}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($company_label_id !== null) {
            $queryParams['companyLabelId'] = ObjectSerializer::toQueryValue($company_label_id);
        }

        // path params
        if ($step_type !== null) {
            $resourcePath = str_replace(
                '{' . 'stepType' . '}',
                ObjectSerializer::toPathValue($step_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysFlowsPushThroughApplicationFlow
     *
     * @param  string $organization_id organization_id (required)
     * @param  \DateTime $switch_date switch_date (required)
     * @param  string $cluster_reference cluster_reference (optional)
     * @param  string $switch_type switch_type (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysFlowsPushThroughApplicationFlow($organization_id, $switch_date, $cluster_reference = null, $switch_type = null)
    {
        list($response) = $this->sysFlowsPushThroughApplicationFlowWithHttpInfo($organization_id, $switch_date, $cluster_reference, $switch_type);
        return $response;
    }

    /**
     * Operation sysFlowsPushThroughApplicationFlowWithHttpInfo
     *
     * @param  string $organization_id (required)
     * @param  \DateTime $switch_date (required)
     * @param  string $cluster_reference (optional)
     * @param  string $switch_type (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysFlowsPushThroughApplicationFlowWithHttpInfo($organization_id, $switch_date, $cluster_reference = null, $switch_type = null)
    {
        $returnType = 'object';
        $request = $this->sysFlowsPushThroughApplicationFlowRequest($organization_id, $switch_date, $cluster_reference, $switch_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysFlowsPushThroughApplicationFlowAsync
     *
     * 
     *
     * @param  string $organization_id (required)
     * @param  \DateTime $switch_date (required)
     * @param  string $cluster_reference (optional)
     * @param  string $switch_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsPushThroughApplicationFlowAsync($organization_id, $switch_date, $cluster_reference = null, $switch_type = null)
    {
        return $this->sysFlowsPushThroughApplicationFlowAsyncWithHttpInfo($organization_id, $switch_date, $cluster_reference, $switch_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysFlowsPushThroughApplicationFlowAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization_id (required)
     * @param  \DateTime $switch_date (required)
     * @param  string $cluster_reference (optional)
     * @param  string $switch_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsPushThroughApplicationFlowAsyncWithHttpInfo($organization_id, $switch_date, $cluster_reference = null, $switch_type = null)
    {
        $returnType = 'object';
        $request = $this->sysFlowsPushThroughApplicationFlowRequest($organization_id, $switch_date, $cluster_reference, $switch_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysFlowsPushThroughApplicationFlow'
     *
     * @param  string $organization_id (required)
     * @param  \DateTime $switch_date (required)
     * @param  string $cluster_reference (optional)
     * @param  string $switch_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysFlowsPushThroughApplicationFlowRequest($organization_id, $switch_date, $cluster_reference = null, $switch_type = null)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysFlowsPushThroughApplicationFlow'
            );
        }
        // verify the required parameter 'switch_date' is set
        if ($switch_date === null || (is_array($switch_date) && count($switch_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_date when calling sysFlowsPushThroughApplicationFlow'
            );
        }

        $resourcePath = '/sysapi/v1.0/flows/application/pushthrough';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($organization_id !== null) {
            $queryParams['organizationId'] = ObjectSerializer::toQueryValue($organization_id);
        }
        // query params
        if ($switch_date !== null) {
            $queryParams['switchDate'] = ObjectSerializer::toQueryValue($switch_date);
        }
        // query params
        if ($cluster_reference !== null) {
            $queryParams['clusterReference'] = ObjectSerializer::toQueryValue($cluster_reference);
        }
        // query params
        if ($switch_type !== null) {
            $queryParams['switchType'] = ObjectSerializer::toQueryValue($switch_type);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysFlowsSendSwitchOut
     *
     * Uithuizingsflow starten.
     *
     * @param  string $connection_id  (required)
     * @param  string $switch_out_type  (required)
     * @param  \DateTime $switch_out_date  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysFlowsSendSwitchOut($connection_id, $switch_out_type, $switch_out_date)
    {
        list($response) = $this->sysFlowsSendSwitchOutWithHttpInfo($connection_id, $switch_out_type, $switch_out_date);
        return $response;
    }

    /**
     * Operation sysFlowsSendSwitchOutWithHttpInfo
     *
     * Uithuizingsflow starten.
     *
     * @param  string $connection_id  (required)
     * @param  string $switch_out_type  (required)
     * @param  \DateTime $switch_out_date  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysFlowsSendSwitchOutWithHttpInfo($connection_id, $switch_out_type, $switch_out_date)
    {
        $returnType = 'object';
        $request = $this->sysFlowsSendSwitchOutRequest($connection_id, $switch_out_type, $switch_out_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysFlowsSendSwitchOutAsync
     *
     * Uithuizingsflow starten.
     *
     * @param  string $connection_id  (required)
     * @param  string $switch_out_type  (required)
     * @param  \DateTime $switch_out_date  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsSendSwitchOutAsync($connection_id, $switch_out_type, $switch_out_date)
    {
        return $this->sysFlowsSendSwitchOutAsyncWithHttpInfo($connection_id, $switch_out_type, $switch_out_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysFlowsSendSwitchOutAsyncWithHttpInfo
     *
     * Uithuizingsflow starten.
     *
     * @param  string $connection_id  (required)
     * @param  string $switch_out_type  (required)
     * @param  \DateTime $switch_out_date  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsSendSwitchOutAsyncWithHttpInfo($connection_id, $switch_out_type, $switch_out_date)
    {
        $returnType = 'object';
        $request = $this->sysFlowsSendSwitchOutRequest($connection_id, $switch_out_type, $switch_out_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysFlowsSendSwitchOut'
     *
     * @param  string $connection_id  (required)
     * @param  string $switch_out_type  (required)
     * @param  \DateTime $switch_out_date  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysFlowsSendSwitchOutRequest($connection_id, $switch_out_type, $switch_out_date)
    {
        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling sysFlowsSendSwitchOut'
            );
        }
        // verify the required parameter 'switch_out_type' is set
        if ($switch_out_type === null || (is_array($switch_out_type) && count($switch_out_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_out_type when calling sysFlowsSendSwitchOut'
            );
        }
        // verify the required parameter 'switch_out_date' is set
        if ($switch_out_date === null || (is_array($switch_out_date) && count($switch_out_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_out_date when calling sysFlowsSendSwitchOut'
            );
        }

        $resourcePath = '/sysapi/v1.0/flows/switchout/sendswitchout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($connection_id !== null) {
            $queryParams['connectionId'] = ObjectSerializer::toQueryValue($connection_id);
        }
        // query params
        if ($switch_out_type !== null) {
            $queryParams['switchOutType'] = ObjectSerializer::toQueryValue($switch_out_type);
        }
        // query params
        if ($switch_out_date !== null) {
            $queryParams['switchOutDate'] = ObjectSerializer::toQueryValue($switch_out_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysFlowsSettlementInvoiceFlowModificationFinished
     *
     * Settlement factuur stap 'Wacht op aanpassingen' gereed melden voor {InvoiceId}
     *
     * @param  string $invoice_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysFlowsSettlementInvoiceFlowModificationFinished($invoice_id)
    {
        list($response) = $this->sysFlowsSettlementInvoiceFlowModificationFinishedWithHttpInfo($invoice_id);
        return $response;
    }

    /**
     * Operation sysFlowsSettlementInvoiceFlowModificationFinishedWithHttpInfo
     *
     * Settlement factuur stap 'Wacht op aanpassingen' gereed melden voor {InvoiceId}
     *
     * @param  string $invoice_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysFlowsSettlementInvoiceFlowModificationFinishedWithHttpInfo($invoice_id)
    {
        $returnType = 'object';
        $request = $this->sysFlowsSettlementInvoiceFlowModificationFinishedRequest($invoice_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysFlowsSettlementInvoiceFlowModificationFinishedAsync
     *
     * Settlement factuur stap 'Wacht op aanpassingen' gereed melden voor {InvoiceId}
     *
     * @param  string $invoice_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsSettlementInvoiceFlowModificationFinishedAsync($invoice_id)
    {
        return $this->sysFlowsSettlementInvoiceFlowModificationFinishedAsyncWithHttpInfo($invoice_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysFlowsSettlementInvoiceFlowModificationFinishedAsyncWithHttpInfo
     *
     * Settlement factuur stap 'Wacht op aanpassingen' gereed melden voor {InvoiceId}
     *
     * @param  string $invoice_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsSettlementInvoiceFlowModificationFinishedAsyncWithHttpInfo($invoice_id)
    {
        $returnType = 'object';
        $request = $this->sysFlowsSettlementInvoiceFlowModificationFinishedRequest($invoice_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysFlowsSettlementInvoiceFlowModificationFinished'
     *
     * @param  string $invoice_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysFlowsSettlementInvoiceFlowModificationFinishedRequest($invoice_id)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling sysFlowsSettlementInvoiceFlowModificationFinished'
            );
        }

        $resourcePath = '/sysapi/v1.0/flows/settlementinvoiceflow/modificationfinished';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($invoice_id !== null) {
            $queryParams['invoiceId'] = ObjectSerializer::toQueryValue($invoice_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysFlowsStartAdvancePaymentCalculationFlow
     *
     * @param  string $organization_id organization_id (required)
     * @param  string $cluster_reference cluster_reference (optional)
     * @param  string $calculation_reason calculation_reason (optional)
     * @param  bool $inform inform (optional)
     * @param  \DateTime $calculation_date calculation_date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysFlowsStartAdvancePaymentCalculationFlow($organization_id, $cluster_reference = null, $calculation_reason = null, $inform = null, $calculation_date = null)
    {
        list($response) = $this->sysFlowsStartAdvancePaymentCalculationFlowWithHttpInfo($organization_id, $cluster_reference, $calculation_reason, $inform, $calculation_date);
        return $response;
    }

    /**
     * Operation sysFlowsStartAdvancePaymentCalculationFlowWithHttpInfo
     *
     * @param  string $organization_id (required)
     * @param  string $cluster_reference (optional)
     * @param  string $calculation_reason (optional)
     * @param  bool $inform (optional)
     * @param  \DateTime $calculation_date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysFlowsStartAdvancePaymentCalculationFlowWithHttpInfo($organization_id, $cluster_reference = null, $calculation_reason = null, $inform = null, $calculation_date = null)
    {
        $returnType = 'object';
        $request = $this->sysFlowsStartAdvancePaymentCalculationFlowRequest($organization_id, $cluster_reference, $calculation_reason, $inform, $calculation_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysFlowsStartAdvancePaymentCalculationFlowAsync
     *
     * 
     *
     * @param  string $organization_id (required)
     * @param  string $cluster_reference (optional)
     * @param  string $calculation_reason (optional)
     * @param  bool $inform (optional)
     * @param  \DateTime $calculation_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsStartAdvancePaymentCalculationFlowAsync($organization_id, $cluster_reference = null, $calculation_reason = null, $inform = null, $calculation_date = null)
    {
        return $this->sysFlowsStartAdvancePaymentCalculationFlowAsyncWithHttpInfo($organization_id, $cluster_reference, $calculation_reason, $inform, $calculation_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysFlowsStartAdvancePaymentCalculationFlowAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization_id (required)
     * @param  string $cluster_reference (optional)
     * @param  string $calculation_reason (optional)
     * @param  bool $inform (optional)
     * @param  \DateTime $calculation_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsStartAdvancePaymentCalculationFlowAsyncWithHttpInfo($organization_id, $cluster_reference = null, $calculation_reason = null, $inform = null, $calculation_date = null)
    {
        $returnType = 'object';
        $request = $this->sysFlowsStartAdvancePaymentCalculationFlowRequest($organization_id, $cluster_reference, $calculation_reason, $inform, $calculation_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysFlowsStartAdvancePaymentCalculationFlow'
     *
     * @param  string $organization_id (required)
     * @param  string $cluster_reference (optional)
     * @param  string $calculation_reason (optional)
     * @param  bool $inform (optional)
     * @param  \DateTime $calculation_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysFlowsStartAdvancePaymentCalculationFlowRequest($organization_id, $cluster_reference = null, $calculation_reason = null, $inform = null, $calculation_date = null)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysFlowsStartAdvancePaymentCalculationFlow'
            );
        }

        $resourcePath = '/sysapi/v1.0/flows/advancepaymentcalculation/start';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($organization_id !== null) {
            $queryParams['organizationId'] = ObjectSerializer::toQueryValue($organization_id);
        }
        // query params
        if ($cluster_reference !== null) {
            $queryParams['clusterReference'] = ObjectSerializer::toQueryValue($cluster_reference);
        }
        // query params
        if ($calculation_reason !== null) {
            $queryParams['calculationReason'] = ObjectSerializer::toQueryValue($calculation_reason);
        }
        // query params
        if ($inform !== null) {
            $queryParams['inform'] = ObjectSerializer::toQueryValue($inform);
        }
        // query params
        if ($calculation_date !== null) {
            $queryParams['calculationDate'] = ObjectSerializer::toQueryValue($calculation_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysFlowsStartApplicationFlow
     *
     * Aanmeldflow starten
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $cluster_reference Optionele parameter (default null) waardoor de aanmeldflow alleen wordt gestart voor aansluitingen in het cluster met de aangegeven clusterreferentie. Als de clusterreferentie niet bestaat wordt er een foutmelding teruggegeven. (optional)
     * @param  bool $reset_status Met behulp van deze parameter (default false) kunnen aansluitingen met de status \&quot;Aanmelding afgebroken\&quot; (&#x60;ApplicationCancelled&#x60;) automatisch gereset worden zodat de aanmeldflow (ook) voor deze aansluitingen wordt gestart. Ons advies is om deze query parameter __niet__ te gebruiken omdat Ecedo niet kan valideren of de contracten en factuuritems de juiste status hebben. (optional)
     * @param  bool $cer_pre_notified Met behulp van deze parameter (default false) kan de stap \&quot;Melden toekomstig contract\&quot; worden overgeslagen. Als Ecedo een welkomstbrief moet genereren is vereist dat er een geldige vooraanmelding in het CER aanwezig is. (optional)
     * @param  bool $skip_cooling_down_period Met behulp van deze parameter (default false) kan aangegeven worden dat de aanmeldflow de afkoelperiode moet overslaan (optional)
     * @param  bool $send_welcome_letter Met behulp van deze parameter (default null) kan worden overruled of er wel (true) of geen (false) welkomstbrief wordt verstuurd. Null betekent dat de applicatie instellingen worden gebruikt (optional)
     * @param  \DateTime $cooling_down_period_start_date Met behulp van deze parameter (default null) kan de afkoelperiode startdatum worden gezet. Null betekent dat de start van de afkoelperiode wordt bepaald door het moment waarop de aanmeldingsflow in de stap \&quot;Afkoelingsperiode\&quot; terecht komt (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysFlowsStartApplicationFlow($organization_id, $cluster_reference = null, $reset_status = null, $cer_pre_notified = null, $skip_cooling_down_period = null, $send_welcome_letter = null, $cooling_down_period_start_date = null)
    {
        list($response) = $this->sysFlowsStartApplicationFlowWithHttpInfo($organization_id, $cluster_reference, $reset_status, $cer_pre_notified, $skip_cooling_down_period, $send_welcome_letter, $cooling_down_period_start_date);
        return $response;
    }

    /**
     * Operation sysFlowsStartApplicationFlowWithHttpInfo
     *
     * Aanmeldflow starten
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $cluster_reference Optionele parameter (default null) waardoor de aanmeldflow alleen wordt gestart voor aansluitingen in het cluster met de aangegeven clusterreferentie. Als de clusterreferentie niet bestaat wordt er een foutmelding teruggegeven. (optional)
     * @param  bool $reset_status Met behulp van deze parameter (default false) kunnen aansluitingen met de status \&quot;Aanmelding afgebroken\&quot; (&#x60;ApplicationCancelled&#x60;) automatisch gereset worden zodat de aanmeldflow (ook) voor deze aansluitingen wordt gestart. Ons advies is om deze query parameter __niet__ te gebruiken omdat Ecedo niet kan valideren of de contracten en factuuritems de juiste status hebben. (optional)
     * @param  bool $cer_pre_notified Met behulp van deze parameter (default false) kan de stap \&quot;Melden toekomstig contract\&quot; worden overgeslagen. Als Ecedo een welkomstbrief moet genereren is vereist dat er een geldige vooraanmelding in het CER aanwezig is. (optional)
     * @param  bool $skip_cooling_down_period Met behulp van deze parameter (default false) kan aangegeven worden dat de aanmeldflow de afkoelperiode moet overslaan (optional)
     * @param  bool $send_welcome_letter Met behulp van deze parameter (default null) kan worden overruled of er wel (true) of geen (false) welkomstbrief wordt verstuurd. Null betekent dat de applicatie instellingen worden gebruikt (optional)
     * @param  \DateTime $cooling_down_period_start_date Met behulp van deze parameter (default null) kan de afkoelperiode startdatum worden gezet. Null betekent dat de start van de afkoelperiode wordt bepaald door het moment waarop de aanmeldingsflow in de stap \&quot;Afkoelingsperiode\&quot; terecht komt (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysFlowsStartApplicationFlowWithHttpInfo($organization_id, $cluster_reference = null, $reset_status = null, $cer_pre_notified = null, $skip_cooling_down_period = null, $send_welcome_letter = null, $cooling_down_period_start_date = null)
    {
        $returnType = 'object';
        $request = $this->sysFlowsStartApplicationFlowRequest($organization_id, $cluster_reference, $reset_status, $cer_pre_notified, $skip_cooling_down_period, $send_welcome_letter, $cooling_down_period_start_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysFlowsStartApplicationFlowAsync
     *
     * Aanmeldflow starten
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $cluster_reference Optionele parameter (default null) waardoor de aanmeldflow alleen wordt gestart voor aansluitingen in het cluster met de aangegeven clusterreferentie. Als de clusterreferentie niet bestaat wordt er een foutmelding teruggegeven. (optional)
     * @param  bool $reset_status Met behulp van deze parameter (default false) kunnen aansluitingen met de status \&quot;Aanmelding afgebroken\&quot; (&#x60;ApplicationCancelled&#x60;) automatisch gereset worden zodat de aanmeldflow (ook) voor deze aansluitingen wordt gestart. Ons advies is om deze query parameter __niet__ te gebruiken omdat Ecedo niet kan valideren of de contracten en factuuritems de juiste status hebben. (optional)
     * @param  bool $cer_pre_notified Met behulp van deze parameter (default false) kan de stap \&quot;Melden toekomstig contract\&quot; worden overgeslagen. Als Ecedo een welkomstbrief moet genereren is vereist dat er een geldige vooraanmelding in het CER aanwezig is. (optional)
     * @param  bool $skip_cooling_down_period Met behulp van deze parameter (default false) kan aangegeven worden dat de aanmeldflow de afkoelperiode moet overslaan (optional)
     * @param  bool $send_welcome_letter Met behulp van deze parameter (default null) kan worden overruled of er wel (true) of geen (false) welkomstbrief wordt verstuurd. Null betekent dat de applicatie instellingen worden gebruikt (optional)
     * @param  \DateTime $cooling_down_period_start_date Met behulp van deze parameter (default null) kan de afkoelperiode startdatum worden gezet. Null betekent dat de start van de afkoelperiode wordt bepaald door het moment waarop de aanmeldingsflow in de stap \&quot;Afkoelingsperiode\&quot; terecht komt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsStartApplicationFlowAsync($organization_id, $cluster_reference = null, $reset_status = null, $cer_pre_notified = null, $skip_cooling_down_period = null, $send_welcome_letter = null, $cooling_down_period_start_date = null)
    {
        return $this->sysFlowsStartApplicationFlowAsyncWithHttpInfo($organization_id, $cluster_reference, $reset_status, $cer_pre_notified, $skip_cooling_down_period, $send_welcome_letter, $cooling_down_period_start_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysFlowsStartApplicationFlowAsyncWithHttpInfo
     *
     * Aanmeldflow starten
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $cluster_reference Optionele parameter (default null) waardoor de aanmeldflow alleen wordt gestart voor aansluitingen in het cluster met de aangegeven clusterreferentie. Als de clusterreferentie niet bestaat wordt er een foutmelding teruggegeven. (optional)
     * @param  bool $reset_status Met behulp van deze parameter (default false) kunnen aansluitingen met de status \&quot;Aanmelding afgebroken\&quot; (&#x60;ApplicationCancelled&#x60;) automatisch gereset worden zodat de aanmeldflow (ook) voor deze aansluitingen wordt gestart. Ons advies is om deze query parameter __niet__ te gebruiken omdat Ecedo niet kan valideren of de contracten en factuuritems de juiste status hebben. (optional)
     * @param  bool $cer_pre_notified Met behulp van deze parameter (default false) kan de stap \&quot;Melden toekomstig contract\&quot; worden overgeslagen. Als Ecedo een welkomstbrief moet genereren is vereist dat er een geldige vooraanmelding in het CER aanwezig is. (optional)
     * @param  bool $skip_cooling_down_period Met behulp van deze parameter (default false) kan aangegeven worden dat de aanmeldflow de afkoelperiode moet overslaan (optional)
     * @param  bool $send_welcome_letter Met behulp van deze parameter (default null) kan worden overruled of er wel (true) of geen (false) welkomstbrief wordt verstuurd. Null betekent dat de applicatie instellingen worden gebruikt (optional)
     * @param  \DateTime $cooling_down_period_start_date Met behulp van deze parameter (default null) kan de afkoelperiode startdatum worden gezet. Null betekent dat de start van de afkoelperiode wordt bepaald door het moment waarop de aanmeldingsflow in de stap \&quot;Afkoelingsperiode\&quot; terecht komt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsStartApplicationFlowAsyncWithHttpInfo($organization_id, $cluster_reference = null, $reset_status = null, $cer_pre_notified = null, $skip_cooling_down_period = null, $send_welcome_letter = null, $cooling_down_period_start_date = null)
    {
        $returnType = 'object';
        $request = $this->sysFlowsStartApplicationFlowRequest($organization_id, $cluster_reference, $reset_status, $cer_pre_notified, $skip_cooling_down_period, $send_welcome_letter, $cooling_down_period_start_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysFlowsStartApplicationFlow'
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $cluster_reference Optionele parameter (default null) waardoor de aanmeldflow alleen wordt gestart voor aansluitingen in het cluster met de aangegeven clusterreferentie. Als de clusterreferentie niet bestaat wordt er een foutmelding teruggegeven. (optional)
     * @param  bool $reset_status Met behulp van deze parameter (default false) kunnen aansluitingen met de status \&quot;Aanmelding afgebroken\&quot; (&#x60;ApplicationCancelled&#x60;) automatisch gereset worden zodat de aanmeldflow (ook) voor deze aansluitingen wordt gestart. Ons advies is om deze query parameter __niet__ te gebruiken omdat Ecedo niet kan valideren of de contracten en factuuritems de juiste status hebben. (optional)
     * @param  bool $cer_pre_notified Met behulp van deze parameter (default false) kan de stap \&quot;Melden toekomstig contract\&quot; worden overgeslagen. Als Ecedo een welkomstbrief moet genereren is vereist dat er een geldige vooraanmelding in het CER aanwezig is. (optional)
     * @param  bool $skip_cooling_down_period Met behulp van deze parameter (default false) kan aangegeven worden dat de aanmeldflow de afkoelperiode moet overslaan (optional)
     * @param  bool $send_welcome_letter Met behulp van deze parameter (default null) kan worden overruled of er wel (true) of geen (false) welkomstbrief wordt verstuurd. Null betekent dat de applicatie instellingen worden gebruikt (optional)
     * @param  \DateTime $cooling_down_period_start_date Met behulp van deze parameter (default null) kan de afkoelperiode startdatum worden gezet. Null betekent dat de start van de afkoelperiode wordt bepaald door het moment waarop de aanmeldingsflow in de stap \&quot;Afkoelingsperiode\&quot; terecht komt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysFlowsStartApplicationFlowRequest($organization_id, $cluster_reference = null, $reset_status = null, $cer_pre_notified = null, $skip_cooling_down_period = null, $send_welcome_letter = null, $cooling_down_period_start_date = null)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysFlowsStartApplicationFlow'
            );
        }

        $resourcePath = '/sysapi/v1.0/flows/application/start';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($organization_id !== null) {
            $queryParams['organizationId'] = ObjectSerializer::toQueryValue($organization_id);
        }
        // query params
        if ($cluster_reference !== null) {
            $queryParams['clusterReference'] = ObjectSerializer::toQueryValue($cluster_reference);
        }
        // query params
        if ($reset_status !== null) {
            $queryParams['resetStatus'] = ObjectSerializer::toQueryValue($reset_status);
        }
        // query params
        if ($cer_pre_notified !== null) {
            $queryParams['cerPreNotified'] = ObjectSerializer::toQueryValue($cer_pre_notified);
        }
        // query params
        if ($skip_cooling_down_period !== null) {
            $queryParams['skipCoolingDownPeriod'] = ObjectSerializer::toQueryValue($skip_cooling_down_period);
        }
        // query params
        if ($send_welcome_letter !== null) {
            $queryParams['sendWelcomeLetter'] = ObjectSerializer::toQueryValue($send_welcome_letter);
        }
        // query params
        if ($cooling_down_period_start_date !== null) {
            $queryParams['coolingDownPeriodStartDate'] = ObjectSerializer::toQueryValue($cooling_down_period_start_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysFlowsStartEnergyPVSwitchFlow
     *
     * Start PV switchflow
     *
     * @param  string $connection_id  (required)
     * @param  \DateTime $switch_date  (required)
     * @param  string $pv_ean  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysFlowsStartEnergyPVSwitchFlow($connection_id, $switch_date, $pv_ean)
    {
        list($response) = $this->sysFlowsStartEnergyPVSwitchFlowWithHttpInfo($connection_id, $switch_date, $pv_ean);
        return $response;
    }

    /**
     * Operation sysFlowsStartEnergyPVSwitchFlowWithHttpInfo
     *
     * Start PV switchflow
     *
     * @param  string $connection_id  (required)
     * @param  \DateTime $switch_date  (required)
     * @param  string $pv_ean  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysFlowsStartEnergyPVSwitchFlowWithHttpInfo($connection_id, $switch_date, $pv_ean)
    {
        $returnType = 'object';
        $request = $this->sysFlowsStartEnergyPVSwitchFlowRequest($connection_id, $switch_date, $pv_ean);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysFlowsStartEnergyPVSwitchFlowAsync
     *
     * Start PV switchflow
     *
     * @param  string $connection_id  (required)
     * @param  \DateTime $switch_date  (required)
     * @param  string $pv_ean  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsStartEnergyPVSwitchFlowAsync($connection_id, $switch_date, $pv_ean)
    {
        return $this->sysFlowsStartEnergyPVSwitchFlowAsyncWithHttpInfo($connection_id, $switch_date, $pv_ean)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysFlowsStartEnergyPVSwitchFlowAsyncWithHttpInfo
     *
     * Start PV switchflow
     *
     * @param  string $connection_id  (required)
     * @param  \DateTime $switch_date  (required)
     * @param  string $pv_ean  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsStartEnergyPVSwitchFlowAsyncWithHttpInfo($connection_id, $switch_date, $pv_ean)
    {
        $returnType = 'object';
        $request = $this->sysFlowsStartEnergyPVSwitchFlowRequest($connection_id, $switch_date, $pv_ean);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysFlowsStartEnergyPVSwitchFlow'
     *
     * @param  string $connection_id  (required)
     * @param  \DateTime $switch_date  (required)
     * @param  string $pv_ean  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysFlowsStartEnergyPVSwitchFlowRequest($connection_id, $switch_date, $pv_ean)
    {
        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling sysFlowsStartEnergyPVSwitchFlow'
            );
        }
        // verify the required parameter 'switch_date' is set
        if ($switch_date === null || (is_array($switch_date) && count($switch_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_date when calling sysFlowsStartEnergyPVSwitchFlow'
            );
        }
        // verify the required parameter 'pv_ean' is set
        if ($pv_ean === null || (is_array($pv_ean) && count($pv_ean) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pv_ean when calling sysFlowsStartEnergyPVSwitchFlow'
            );
        }

        $resourcePath = '/sysapi/v1.0/flows/pvswitch/start';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($connection_id !== null) {
            $queryParams['connectionId'] = ObjectSerializer::toQueryValue($connection_id);
        }
        // query params
        if ($switch_date !== null) {
            $queryParams['switchDate'] = ObjectSerializer::toQueryValue($switch_date);
        }
        // query params
        if ($pv_ean !== null) {
            $queryParams['pvEAN'] = ObjectSerializer::toQueryValue($pv_ean);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysFlowsStartProductPurchaseFlow
     *
     * Product purchase event starten voor organizationId en clusterReference  toegestane waarde voor eventType: DepositSettlement
     *
     * @param  string $organization_id  (required)
     * @param  string $cluster_reference  (required)
     * @param  string $event_type  (required)
     * @param  \DateTime $event_date  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysFlowsStartProductPurchaseFlow($organization_id, $cluster_reference, $event_type, $event_date)
    {
        list($response) = $this->sysFlowsStartProductPurchaseFlowWithHttpInfo($organization_id, $cluster_reference, $event_type, $event_date);
        return $response;
    }

    /**
     * Operation sysFlowsStartProductPurchaseFlowWithHttpInfo
     *
     * Product purchase event starten voor organizationId en clusterReference  toegestane waarde voor eventType: DepositSettlement
     *
     * @param  string $organization_id  (required)
     * @param  string $cluster_reference  (required)
     * @param  string $event_type  (required)
     * @param  \DateTime $event_date  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysFlowsStartProductPurchaseFlowWithHttpInfo($organization_id, $cluster_reference, $event_type, $event_date)
    {
        $returnType = 'object';
        $request = $this->sysFlowsStartProductPurchaseFlowRequest($organization_id, $cluster_reference, $event_type, $event_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysFlowsStartProductPurchaseFlowAsync
     *
     * Product purchase event starten voor organizationId en clusterReference  toegestane waarde voor eventType: DepositSettlement
     *
     * @param  string $organization_id  (required)
     * @param  string $cluster_reference  (required)
     * @param  string $event_type  (required)
     * @param  \DateTime $event_date  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsStartProductPurchaseFlowAsync($organization_id, $cluster_reference, $event_type, $event_date)
    {
        return $this->sysFlowsStartProductPurchaseFlowAsyncWithHttpInfo($organization_id, $cluster_reference, $event_type, $event_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysFlowsStartProductPurchaseFlowAsyncWithHttpInfo
     *
     * Product purchase event starten voor organizationId en clusterReference  toegestane waarde voor eventType: DepositSettlement
     *
     * @param  string $organization_id  (required)
     * @param  string $cluster_reference  (required)
     * @param  string $event_type  (required)
     * @param  \DateTime $event_date  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsStartProductPurchaseFlowAsyncWithHttpInfo($organization_id, $cluster_reference, $event_type, $event_date)
    {
        $returnType = 'object';
        $request = $this->sysFlowsStartProductPurchaseFlowRequest($organization_id, $cluster_reference, $event_type, $event_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysFlowsStartProductPurchaseFlow'
     *
     * @param  string $organization_id  (required)
     * @param  string $cluster_reference  (required)
     * @param  string $event_type  (required)
     * @param  \DateTime $event_date  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysFlowsStartProductPurchaseFlowRequest($organization_id, $cluster_reference, $event_type, $event_date)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysFlowsStartProductPurchaseFlow'
            );
        }
        // verify the required parameter 'cluster_reference' is set
        if ($cluster_reference === null || (is_array($cluster_reference) && count($cluster_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cluster_reference when calling sysFlowsStartProductPurchaseFlow'
            );
        }
        // verify the required parameter 'event_type' is set
        if ($event_type === null || (is_array($event_type) && count($event_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_type when calling sysFlowsStartProductPurchaseFlow'
            );
        }
        // verify the required parameter 'event_date' is set
        if ($event_date === null || (is_array($event_date) && count($event_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_date when calling sysFlowsStartProductPurchaseFlow'
            );
        }

        $resourcePath = '/sysapi/v1.0/flows/productpurchase/start';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($organization_id !== null) {
            $queryParams['organizationId'] = ObjectSerializer::toQueryValue($organization_id);
        }
        // query params
        if ($cluster_reference !== null) {
            $queryParams['clusterReference'] = ObjectSerializer::toQueryValue($cluster_reference);
        }
        // query params
        if ($event_type !== null) {
            $queryParams['eventType'] = ObjectSerializer::toQueryValue($event_type);
        }
        // query params
        if ($event_date !== null) {
            $queryParams['eventDate'] = ObjectSerializer::toQueryValue($event_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysFlowsStartSettlementFlowForProduct
     *
     * Starten van de afrekening flow voor een product
     *
     * @param  string $organization_id  (required)
     * @param  string $cluster_reference  (required)
     * @param  string $event_type  (required)
     * @param  \DateTime $event_date  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysFlowsStartSettlementFlowForProduct($organization_id, $cluster_reference, $event_type, $event_date)
    {
        list($response) = $this->sysFlowsStartSettlementFlowForProductWithHttpInfo($organization_id, $cluster_reference, $event_type, $event_date);
        return $response;
    }

    /**
     * Operation sysFlowsStartSettlementFlowForProductWithHttpInfo
     *
     * Starten van de afrekening flow voor een product
     *
     * @param  string $organization_id  (required)
     * @param  string $cluster_reference  (required)
     * @param  string $event_type  (required)
     * @param  \DateTime $event_date  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysFlowsStartSettlementFlowForProductWithHttpInfo($organization_id, $cluster_reference, $event_type, $event_date)
    {
        $returnType = 'object';
        $request = $this->sysFlowsStartSettlementFlowForProductRequest($organization_id, $cluster_reference, $event_type, $event_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysFlowsStartSettlementFlowForProductAsync
     *
     * Starten van de afrekening flow voor een product
     *
     * @param  string $organization_id  (required)
     * @param  string $cluster_reference  (required)
     * @param  string $event_type  (required)
     * @param  \DateTime $event_date  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsStartSettlementFlowForProductAsync($organization_id, $cluster_reference, $event_type, $event_date)
    {
        return $this->sysFlowsStartSettlementFlowForProductAsyncWithHttpInfo($organization_id, $cluster_reference, $event_type, $event_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysFlowsStartSettlementFlowForProductAsyncWithHttpInfo
     *
     * Starten van de afrekening flow voor een product
     *
     * @param  string $organization_id  (required)
     * @param  string $cluster_reference  (required)
     * @param  string $event_type  (required)
     * @param  \DateTime $event_date  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysFlowsStartSettlementFlowForProductAsyncWithHttpInfo($organization_id, $cluster_reference, $event_type, $event_date)
    {
        $returnType = 'object';
        $request = $this->sysFlowsStartSettlementFlowForProductRequest($organization_id, $cluster_reference, $event_type, $event_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysFlowsStartSettlementFlowForProduct'
     *
     * @param  string $organization_id  (required)
     * @param  string $cluster_reference  (required)
     * @param  string $event_type  (required)
     * @param  \DateTime $event_date  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysFlowsStartSettlementFlowForProductRequest($organization_id, $cluster_reference, $event_type, $event_date)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysFlowsStartSettlementFlowForProduct'
            );
        }
        // verify the required parameter 'cluster_reference' is set
        if ($cluster_reference === null || (is_array($cluster_reference) && count($cluster_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cluster_reference when calling sysFlowsStartSettlementFlowForProduct'
            );
        }
        // verify the required parameter 'event_type' is set
        if ($event_type === null || (is_array($event_type) && count($event_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_type when calling sysFlowsStartSettlementFlowForProduct'
            );
        }
        // verify the required parameter 'event_date' is set
        if ($event_date === null || (is_array($event_date) && count($event_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_date when calling sysFlowsStartSettlementFlowForProduct'
            );
        }

        $resourcePath = '/sysapi/v1.0/flows/product/startsettlement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($organization_id !== null) {
            $queryParams['organizationId'] = ObjectSerializer::toQueryValue($organization_id);
        }
        // query params
        if ($cluster_reference !== null) {
            $queryParams['clusterReference'] = ObjectSerializer::toQueryValue($cluster_reference);
        }
        // query params
        if ($event_type !== null) {
            $queryParams['eventType'] = ObjectSerializer::toQueryValue($event_type);
        }
        // query params
        if ($event_date !== null) {
            $queryParams['eventDate'] = ObjectSerializer::toQueryValue($event_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
