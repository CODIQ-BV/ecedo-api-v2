<?php
/**
 * SysOrganizationsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SysOrganizationsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SysOrganizationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sysOrganizationsDelete
     *
     * Verwijdert een organisatie.
     *
     * @param  string $organization_id Het id van de organisatie die verwijderd dient te worden (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sysOrganizationsDelete($organization_id)
    {
        $this->sysOrganizationsDeleteWithHttpInfo($organization_id);
    }

    /**
     * Operation sysOrganizationsDeleteWithHttpInfo
     *
     * Verwijdert een organisatie.
     *
     * @param  string $organization_id Het id van de organisatie die verwijderd dient te worden (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysOrganizationsDeleteWithHttpInfo($organization_id)
    {
        $returnType = '';
        $request = $this->sysOrganizationsDeleteRequest($organization_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysOrganizationsDeleteAsync
     *
     * Verwijdert een organisatie.
     *
     * @param  string $organization_id Het id van de organisatie die verwijderd dient te worden (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysOrganizationsDeleteAsync($organization_id)
    {
        return $this->sysOrganizationsDeleteAsyncWithHttpInfo($organization_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysOrganizationsDeleteAsyncWithHttpInfo
     *
     * Verwijdert een organisatie.
     *
     * @param  string $organization_id Het id van de organisatie die verwijderd dient te worden (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysOrganizationsDeleteAsyncWithHttpInfo($organization_id)
    {
        $returnType = '';
        $request = $this->sysOrganizationsDeleteRequest($organization_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysOrganizationsDelete'
     *
     * @param  string $organization_id Het id van de organisatie die verwijderd dient te worden (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysOrganizationsDeleteRequest($organization_id)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysOrganizationsDelete'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysOrganizationsGetByClientReference
     *
     * Verkrijg klantgegevens op basis van een klantreferentie
     *
     * @param  string $client_reference Een exact overeenkomende klantreferentie (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganization
     */
    public function sysOrganizationsGetByClientReference($client_reference)
    {
        list($response) = $this->sysOrganizationsGetByClientReferenceWithHttpInfo($client_reference);
        return $response;
    }

    /**
     * Operation sysOrganizationsGetByClientReferenceWithHttpInfo
     *
     * Verkrijg klantgegevens op basis van een klantreferentie
     *
     * @param  string $client_reference Een exact overeenkomende klantreferentie (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganization, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysOrganizationsGetByClientReferenceWithHttpInfo($client_reference)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganization';
        $request = $this->sysOrganizationsGetByClientReferenceRequest($client_reference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganization',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysOrganizationsGetByClientReferenceAsync
     *
     * Verkrijg klantgegevens op basis van een klantreferentie
     *
     * @param  string $client_reference Een exact overeenkomende klantreferentie (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysOrganizationsGetByClientReferenceAsync($client_reference)
    {
        return $this->sysOrganizationsGetByClientReferenceAsyncWithHttpInfo($client_reference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysOrganizationsGetByClientReferenceAsyncWithHttpInfo
     *
     * Verkrijg klantgegevens op basis van een klantreferentie
     *
     * @param  string $client_reference Een exact overeenkomende klantreferentie (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysOrganizationsGetByClientReferenceAsyncWithHttpInfo($client_reference)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganization';
        $request = $this->sysOrganizationsGetByClientReferenceRequest($client_reference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysOrganizationsGetByClientReference'
     *
     * @param  string $client_reference Een exact overeenkomende klantreferentie (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysOrganizationsGetByClientReferenceRequest($client_reference)
    {
        // verify the required parameter 'client_reference' is set
        if ($client_reference === null || (is_array($client_reference) && count($client_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_reference when calling sysOrganizationsGetByClientReference'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/byClientReference/{clientReference}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($client_reference !== null) {
            $resourcePath = str_replace(
                '{' . 'clientReference' . '}',
                ObjectSerializer::toPathValue($client_reference),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysOrganizationsGetByIdOrReference
     *
     * Haal specifieke klant op (op basis van OrganizationId)
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganization
     */
    public function sysOrganizationsGetByIdOrReference($organization_id)
    {
        list($response) = $this->sysOrganizationsGetByIdOrReferenceWithHttpInfo($organization_id);
        return $response;
    }

    /**
     * Operation sysOrganizationsGetByIdOrReferenceWithHttpInfo
     *
     * Haal specifieke klant op (op basis van OrganizationId)
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganization, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysOrganizationsGetByIdOrReferenceWithHttpInfo($organization_id)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganization';
        $request = $this->sysOrganizationsGetByIdOrReferenceRequest($organization_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganization',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysOrganizationsGetByIdOrReferenceAsync
     *
     * Haal specifieke klant op (op basis van OrganizationId)
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysOrganizationsGetByIdOrReferenceAsync($organization_id)
    {
        return $this->sysOrganizationsGetByIdOrReferenceAsyncWithHttpInfo($organization_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysOrganizationsGetByIdOrReferenceAsyncWithHttpInfo
     *
     * Haal specifieke klant op (op basis van OrganizationId)
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysOrganizationsGetByIdOrReferenceAsyncWithHttpInfo($organization_id)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganization';
        $request = $this->sysOrganizationsGetByIdOrReferenceRequest($organization_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysOrganizationsGetByIdOrReference'
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysOrganizationsGetByIdOrReferenceRequest($organization_id)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysOrganizationsGetByIdOrReference'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysOrganizationsGetByReferenceNew
     *
     * Verkrijg klantgegevens op basis van een klantnummer
     *
     * @param  string $reference Een exact overeenkomend klantnummer (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganization
     */
    public function sysOrganizationsGetByReferenceNew($reference)
    {
        list($response) = $this->sysOrganizationsGetByReferenceNewWithHttpInfo($reference);
        return $response;
    }

    /**
     * Operation sysOrganizationsGetByReferenceNewWithHttpInfo
     *
     * Verkrijg klantgegevens op basis van een klantnummer
     *
     * @param  string $reference Een exact overeenkomend klantnummer (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganization, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysOrganizationsGetByReferenceNewWithHttpInfo($reference)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganization';
        $request = $this->sysOrganizationsGetByReferenceNewRequest($reference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganization',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysOrganizationsGetByReferenceNewAsync
     *
     * Verkrijg klantgegevens op basis van een klantnummer
     *
     * @param  string $reference Een exact overeenkomend klantnummer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysOrganizationsGetByReferenceNewAsync($reference)
    {
        return $this->sysOrganizationsGetByReferenceNewAsyncWithHttpInfo($reference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysOrganizationsGetByReferenceNewAsyncWithHttpInfo
     *
     * Verkrijg klantgegevens op basis van een klantnummer
     *
     * @param  string $reference Een exact overeenkomend klantnummer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysOrganizationsGetByReferenceNewAsyncWithHttpInfo($reference)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganization';
        $request = $this->sysOrganizationsGetByReferenceNewRequest($reference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysOrganizationsGetByReferenceNew'
     *
     * @param  string $reference Een exact overeenkomend klantnummer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysOrganizationsGetByReferenceNewRequest($reference)
    {
        // verify the required parameter 'reference' is set
        if ($reference === null || (is_array($reference) && count($reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference when calling sysOrganizationsGetByReferenceNew'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/byReference/{reference}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($reference !== null) {
            $resourcePath = str_replace(
                '{' . 'reference' . '}',
                ObjectSerializer::toPathValue($reference),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysOrganizationsPost
     *
     * Klant aanmaken
     *
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationPostData $organization  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationPostResult
     */
    public function sysOrganizationsPost($organization)
    {
        list($response) = $this->sysOrganizationsPostWithHttpInfo($organization);
        return $response;
    }

    /**
     * Operation sysOrganizationsPostWithHttpInfo
     *
     * Klant aanmaken
     *
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationPostData $organization  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationPostResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysOrganizationsPostWithHttpInfo($organization)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationPostResult';
        $request = $this->sysOrganizationsPostRequest($organization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationPostResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysOrganizationsPostAsync
     *
     * Klant aanmaken
     *
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationPostData $organization  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysOrganizationsPostAsync($organization)
    {
        return $this->sysOrganizationsPostAsyncWithHttpInfo($organization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysOrganizationsPostAsyncWithHttpInfo
     *
     * Klant aanmaken
     *
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationPostData $organization  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysOrganizationsPostAsyncWithHttpInfo($organization)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationPostResult';
        $request = $this->sysOrganizationsPostRequest($organization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysOrganizationsPost'
     *
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationPostData $organization  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysOrganizationsPostRequest($organization)
    {
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling sysOrganizationsPost'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($organization)) {
            $_tempBody = $organization;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysOrganizationsPut
     *
     * Klant wijzigen
     *
     * @param  string $organization_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationPostData $organization  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysOrganizationsPut($organization_id, $organization)
    {
        list($response) = $this->sysOrganizationsPutWithHttpInfo($organization_id, $organization);
        return $response;
    }

    /**
     * Operation sysOrganizationsPutWithHttpInfo
     *
     * Klant wijzigen
     *
     * @param  string $organization_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationPostData $organization  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysOrganizationsPutWithHttpInfo($organization_id, $organization)
    {
        $returnType = 'object';
        $request = $this->sysOrganizationsPutRequest($organization_id, $organization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysOrganizationsPutAsync
     *
     * Klant wijzigen
     *
     * @param  string $organization_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationPostData $organization  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysOrganizationsPutAsync($organization_id, $organization)
    {
        return $this->sysOrganizationsPutAsyncWithHttpInfo($organization_id, $organization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysOrganizationsPutAsyncWithHttpInfo
     *
     * Klant wijzigen
     *
     * @param  string $organization_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationPostData $organization  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysOrganizationsPutAsyncWithHttpInfo($organization_id, $organization)
    {
        $returnType = 'object';
        $request = $this->sysOrganizationsPutRequest($organization_id, $organization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysOrganizationsPut'
     *
     * @param  string $organization_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationPostData $organization  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysOrganizationsPutRequest($organization_id, $organization)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysOrganizationsPut'
            );
        }
        // verify the required parameter 'organization' is set
        if ($organization === null || (is_array($organization) && count($organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization when calling sysOrganizationsPut'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($organization)) {
            $_tempBody = $organization;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysOrganizationsSearch
     *
     * Klanten zoeken
     *
     * @param  string $organization_reference Klantnummer (like-search) (optional)
     * @param  int $organization_address_number Huisnummer van klantadres en/of aansluitingadres (exacte match) (optional)
     * @param  string $organization_address_addition Huisnummertoevoeging van klantadres en/of aansluitingadres (exacte match) (optional)
     * @param  string $organization_address_zip_code Postcode van klantadres en/of aansluitingadres (like-search). Nederlandse postcodes mogen of zonder spatie ingestuurd worden. Beide opties zijn geldig. (optional)
     * @param  string $organization_email_address Primair e-mailadres van de klant (like-search) (optional)
     * @param  string $organization_phone_number Het zoeken op telefoonnummer wordt gedaan door te kijken of het vaste of mobiele nummer eindigt met de ingevoerde cijfers. Daardoor is het mogelijk om alleen op de laatse 9 getallen te zoeken en daarmee niet afhankelijk te zijn van eventuele landcode-notaties. De input moet alleen getallen bevatten, dus geen spaties of andere karakters (optional)
     * @param  string $organization_group_id Klanten kunnen ingedeeld worden in klantgroepen. Met behulp van deze optionele parameter kan gezocht worden naar klanten in een specifieke klantgroep (optional)
     * @param  string $organization_type Optionele parameter waarmee gefilterd kan worden op zakelijke of particuliere klanten (optional)
     * @param  string $organization_sub_type Een van de volgende waarden: Reseller (wederverkoper), Producer (Producent), Msp (Mobility Service Provider), Cpo (Charge Point Operator) (optional)
     * @param  string $kvk_number KvK-nummer (like-search) (optional)
     * @param  string $parent_organization_id Het organizationId van een moeder-organisatie (exacte match) (optional)
     * @param  bool $is_parent_organization Optionele boolean waarmee aangegeven kan worden dat specifiek wel of niet op moederorganisaties gezocht moet worden. Default: geen waarde, waardoor zowel moeders als dochters worden gevonden (optional)
     * @param  bool $include_connections Boolean (default false) waarmee aangegeven kan worden dat ook in adressen van aansluitingen gezocht moet worden (optional)
     * @param  string $reseller_id Optioneel organizationId van een wederverkoper (zie de &#x60;SysReseller&#x60; categorie voor meer informatie). Als &#x60;resellerId&#x60; wordt meegegeven worden alleen klanten in het resultaat opgenomen met een actief of toekomstig contract voor deze wederverkoper. (optional)
     * @param  string $connection_ean Optionele parameter waarmee gezocht kan worden naar EANs. Dit is een like-search die alleen wordt uitgevoerd wanneer de parameter includeConnections de waarde true heeft (optional)
     * @param  string $organization_name Optionele parameter waarmee gezocht kan worden naar een specifieke klantnaam. Dit is een like-search (optional)
     * @param  string $company_label_id De labelId van de klant (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationSearchResult
     */
    public function sysOrganizationsSearch($organization_reference = null, $organization_address_number = null, $organization_address_addition = null, $organization_address_zip_code = null, $organization_email_address = null, $organization_phone_number = null, $organization_group_id = null, $organization_type = null, $organization_sub_type = null, $kvk_number = null, $parent_organization_id = null, $is_parent_organization = null, $include_connections = null, $reseller_id = null, $connection_ean = null, $organization_name = null, $company_label_id = null)
    {
        list($response) = $this->sysOrganizationsSearchWithHttpInfo($organization_reference, $organization_address_number, $organization_address_addition, $organization_address_zip_code, $organization_email_address, $organization_phone_number, $organization_group_id, $organization_type, $organization_sub_type, $kvk_number, $parent_organization_id, $is_parent_organization, $include_connections, $reseller_id, $connection_ean, $organization_name, $company_label_id);
        return $response;
    }

    /**
     * Operation sysOrganizationsSearchWithHttpInfo
     *
     * Klanten zoeken
     *
     * @param  string $organization_reference Klantnummer (like-search) (optional)
     * @param  int $organization_address_number Huisnummer van klantadres en/of aansluitingadres (exacte match) (optional)
     * @param  string $organization_address_addition Huisnummertoevoeging van klantadres en/of aansluitingadres (exacte match) (optional)
     * @param  string $organization_address_zip_code Postcode van klantadres en/of aansluitingadres (like-search). Nederlandse postcodes mogen of zonder spatie ingestuurd worden. Beide opties zijn geldig. (optional)
     * @param  string $organization_email_address Primair e-mailadres van de klant (like-search) (optional)
     * @param  string $organization_phone_number Het zoeken op telefoonnummer wordt gedaan door te kijken of het vaste of mobiele nummer eindigt met de ingevoerde cijfers. Daardoor is het mogelijk om alleen op de laatse 9 getallen te zoeken en daarmee niet afhankelijk te zijn van eventuele landcode-notaties. De input moet alleen getallen bevatten, dus geen spaties of andere karakters (optional)
     * @param  string $organization_group_id Klanten kunnen ingedeeld worden in klantgroepen. Met behulp van deze optionele parameter kan gezocht worden naar klanten in een specifieke klantgroep (optional)
     * @param  string $organization_type Optionele parameter waarmee gefilterd kan worden op zakelijke of particuliere klanten (optional)
     * @param  string $organization_sub_type Een van de volgende waarden: Reseller (wederverkoper), Producer (Producent), Msp (Mobility Service Provider), Cpo (Charge Point Operator) (optional)
     * @param  string $kvk_number KvK-nummer (like-search) (optional)
     * @param  string $parent_organization_id Het organizationId van een moeder-organisatie (exacte match) (optional)
     * @param  bool $is_parent_organization Optionele boolean waarmee aangegeven kan worden dat specifiek wel of niet op moederorganisaties gezocht moet worden. Default: geen waarde, waardoor zowel moeders als dochters worden gevonden (optional)
     * @param  bool $include_connections Boolean (default false) waarmee aangegeven kan worden dat ook in adressen van aansluitingen gezocht moet worden (optional)
     * @param  string $reseller_id Optioneel organizationId van een wederverkoper (zie de &#x60;SysReseller&#x60; categorie voor meer informatie). Als &#x60;resellerId&#x60; wordt meegegeven worden alleen klanten in het resultaat opgenomen met een actief of toekomstig contract voor deze wederverkoper. (optional)
     * @param  string $connection_ean Optionele parameter waarmee gezocht kan worden naar EANs. Dit is een like-search die alleen wordt uitgevoerd wanneer de parameter includeConnections de waarde true heeft (optional)
     * @param  string $organization_name Optionele parameter waarmee gezocht kan worden naar een specifieke klantnaam. Dit is een like-search (optional)
     * @param  string $company_label_id De labelId van de klant (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationSearchResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysOrganizationsSearchWithHttpInfo($organization_reference = null, $organization_address_number = null, $organization_address_addition = null, $organization_address_zip_code = null, $organization_email_address = null, $organization_phone_number = null, $organization_group_id = null, $organization_type = null, $organization_sub_type = null, $kvk_number = null, $parent_organization_id = null, $is_parent_organization = null, $include_connections = null, $reseller_id = null, $connection_ean = null, $organization_name = null, $company_label_id = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationSearchResult';
        $request = $this->sysOrganizationsSearchRequest($organization_reference, $organization_address_number, $organization_address_addition, $organization_address_zip_code, $organization_email_address, $organization_phone_number, $organization_group_id, $organization_type, $organization_sub_type, $kvk_number, $parent_organization_id, $is_parent_organization, $include_connections, $reseller_id, $connection_ean, $organization_name, $company_label_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationSearchResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysOrganizationsSearchAsync
     *
     * Klanten zoeken
     *
     * @param  string $organization_reference Klantnummer (like-search) (optional)
     * @param  int $organization_address_number Huisnummer van klantadres en/of aansluitingadres (exacte match) (optional)
     * @param  string $organization_address_addition Huisnummertoevoeging van klantadres en/of aansluitingadres (exacte match) (optional)
     * @param  string $organization_address_zip_code Postcode van klantadres en/of aansluitingadres (like-search). Nederlandse postcodes mogen of zonder spatie ingestuurd worden. Beide opties zijn geldig. (optional)
     * @param  string $organization_email_address Primair e-mailadres van de klant (like-search) (optional)
     * @param  string $organization_phone_number Het zoeken op telefoonnummer wordt gedaan door te kijken of het vaste of mobiele nummer eindigt met de ingevoerde cijfers. Daardoor is het mogelijk om alleen op de laatse 9 getallen te zoeken en daarmee niet afhankelijk te zijn van eventuele landcode-notaties. De input moet alleen getallen bevatten, dus geen spaties of andere karakters (optional)
     * @param  string $organization_group_id Klanten kunnen ingedeeld worden in klantgroepen. Met behulp van deze optionele parameter kan gezocht worden naar klanten in een specifieke klantgroep (optional)
     * @param  string $organization_type Optionele parameter waarmee gefilterd kan worden op zakelijke of particuliere klanten (optional)
     * @param  string $organization_sub_type Een van de volgende waarden: Reseller (wederverkoper), Producer (Producent), Msp (Mobility Service Provider), Cpo (Charge Point Operator) (optional)
     * @param  string $kvk_number KvK-nummer (like-search) (optional)
     * @param  string $parent_organization_id Het organizationId van een moeder-organisatie (exacte match) (optional)
     * @param  bool $is_parent_organization Optionele boolean waarmee aangegeven kan worden dat specifiek wel of niet op moederorganisaties gezocht moet worden. Default: geen waarde, waardoor zowel moeders als dochters worden gevonden (optional)
     * @param  bool $include_connections Boolean (default false) waarmee aangegeven kan worden dat ook in adressen van aansluitingen gezocht moet worden (optional)
     * @param  string $reseller_id Optioneel organizationId van een wederverkoper (zie de &#x60;SysReseller&#x60; categorie voor meer informatie). Als &#x60;resellerId&#x60; wordt meegegeven worden alleen klanten in het resultaat opgenomen met een actief of toekomstig contract voor deze wederverkoper. (optional)
     * @param  string $connection_ean Optionele parameter waarmee gezocht kan worden naar EANs. Dit is een like-search die alleen wordt uitgevoerd wanneer de parameter includeConnections de waarde true heeft (optional)
     * @param  string $organization_name Optionele parameter waarmee gezocht kan worden naar een specifieke klantnaam. Dit is een like-search (optional)
     * @param  string $company_label_id De labelId van de klant (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysOrganizationsSearchAsync($organization_reference = null, $organization_address_number = null, $organization_address_addition = null, $organization_address_zip_code = null, $organization_email_address = null, $organization_phone_number = null, $organization_group_id = null, $organization_type = null, $organization_sub_type = null, $kvk_number = null, $parent_organization_id = null, $is_parent_organization = null, $include_connections = null, $reseller_id = null, $connection_ean = null, $organization_name = null, $company_label_id = null)
    {
        return $this->sysOrganizationsSearchAsyncWithHttpInfo($organization_reference, $organization_address_number, $organization_address_addition, $organization_address_zip_code, $organization_email_address, $organization_phone_number, $organization_group_id, $organization_type, $organization_sub_type, $kvk_number, $parent_organization_id, $is_parent_organization, $include_connections, $reseller_id, $connection_ean, $organization_name, $company_label_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysOrganizationsSearchAsyncWithHttpInfo
     *
     * Klanten zoeken
     *
     * @param  string $organization_reference Klantnummer (like-search) (optional)
     * @param  int $organization_address_number Huisnummer van klantadres en/of aansluitingadres (exacte match) (optional)
     * @param  string $organization_address_addition Huisnummertoevoeging van klantadres en/of aansluitingadres (exacte match) (optional)
     * @param  string $organization_address_zip_code Postcode van klantadres en/of aansluitingadres (like-search). Nederlandse postcodes mogen of zonder spatie ingestuurd worden. Beide opties zijn geldig. (optional)
     * @param  string $organization_email_address Primair e-mailadres van de klant (like-search) (optional)
     * @param  string $organization_phone_number Het zoeken op telefoonnummer wordt gedaan door te kijken of het vaste of mobiele nummer eindigt met de ingevoerde cijfers. Daardoor is het mogelijk om alleen op de laatse 9 getallen te zoeken en daarmee niet afhankelijk te zijn van eventuele landcode-notaties. De input moet alleen getallen bevatten, dus geen spaties of andere karakters (optional)
     * @param  string $organization_group_id Klanten kunnen ingedeeld worden in klantgroepen. Met behulp van deze optionele parameter kan gezocht worden naar klanten in een specifieke klantgroep (optional)
     * @param  string $organization_type Optionele parameter waarmee gefilterd kan worden op zakelijke of particuliere klanten (optional)
     * @param  string $organization_sub_type Een van de volgende waarden: Reseller (wederverkoper), Producer (Producent), Msp (Mobility Service Provider), Cpo (Charge Point Operator) (optional)
     * @param  string $kvk_number KvK-nummer (like-search) (optional)
     * @param  string $parent_organization_id Het organizationId van een moeder-organisatie (exacte match) (optional)
     * @param  bool $is_parent_organization Optionele boolean waarmee aangegeven kan worden dat specifiek wel of niet op moederorganisaties gezocht moet worden. Default: geen waarde, waardoor zowel moeders als dochters worden gevonden (optional)
     * @param  bool $include_connections Boolean (default false) waarmee aangegeven kan worden dat ook in adressen van aansluitingen gezocht moet worden (optional)
     * @param  string $reseller_id Optioneel organizationId van een wederverkoper (zie de &#x60;SysReseller&#x60; categorie voor meer informatie). Als &#x60;resellerId&#x60; wordt meegegeven worden alleen klanten in het resultaat opgenomen met een actief of toekomstig contract voor deze wederverkoper. (optional)
     * @param  string $connection_ean Optionele parameter waarmee gezocht kan worden naar EANs. Dit is een like-search die alleen wordt uitgevoerd wanneer de parameter includeConnections de waarde true heeft (optional)
     * @param  string $organization_name Optionele parameter waarmee gezocht kan worden naar een specifieke klantnaam. Dit is een like-search (optional)
     * @param  string $company_label_id De labelId van de klant (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysOrganizationsSearchAsyncWithHttpInfo($organization_reference = null, $organization_address_number = null, $organization_address_addition = null, $organization_address_zip_code = null, $organization_email_address = null, $organization_phone_number = null, $organization_group_id = null, $organization_type = null, $organization_sub_type = null, $kvk_number = null, $parent_organization_id = null, $is_parent_organization = null, $include_connections = null, $reseller_id = null, $connection_ean = null, $organization_name = null, $company_label_id = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationSearchResult';
        $request = $this->sysOrganizationsSearchRequest($organization_reference, $organization_address_number, $organization_address_addition, $organization_address_zip_code, $organization_email_address, $organization_phone_number, $organization_group_id, $organization_type, $organization_sub_type, $kvk_number, $parent_organization_id, $is_parent_organization, $include_connections, $reseller_id, $connection_ean, $organization_name, $company_label_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysOrganizationsSearch'
     *
     * @param  string $organization_reference Klantnummer (like-search) (optional)
     * @param  int $organization_address_number Huisnummer van klantadres en/of aansluitingadres (exacte match) (optional)
     * @param  string $organization_address_addition Huisnummertoevoeging van klantadres en/of aansluitingadres (exacte match) (optional)
     * @param  string $organization_address_zip_code Postcode van klantadres en/of aansluitingadres (like-search). Nederlandse postcodes mogen of zonder spatie ingestuurd worden. Beide opties zijn geldig. (optional)
     * @param  string $organization_email_address Primair e-mailadres van de klant (like-search) (optional)
     * @param  string $organization_phone_number Het zoeken op telefoonnummer wordt gedaan door te kijken of het vaste of mobiele nummer eindigt met de ingevoerde cijfers. Daardoor is het mogelijk om alleen op de laatse 9 getallen te zoeken en daarmee niet afhankelijk te zijn van eventuele landcode-notaties. De input moet alleen getallen bevatten, dus geen spaties of andere karakters (optional)
     * @param  string $organization_group_id Klanten kunnen ingedeeld worden in klantgroepen. Met behulp van deze optionele parameter kan gezocht worden naar klanten in een specifieke klantgroep (optional)
     * @param  string $organization_type Optionele parameter waarmee gefilterd kan worden op zakelijke of particuliere klanten (optional)
     * @param  string $organization_sub_type Een van de volgende waarden: Reseller (wederverkoper), Producer (Producent), Msp (Mobility Service Provider), Cpo (Charge Point Operator) (optional)
     * @param  string $kvk_number KvK-nummer (like-search) (optional)
     * @param  string $parent_organization_id Het organizationId van een moeder-organisatie (exacte match) (optional)
     * @param  bool $is_parent_organization Optionele boolean waarmee aangegeven kan worden dat specifiek wel of niet op moederorganisaties gezocht moet worden. Default: geen waarde, waardoor zowel moeders als dochters worden gevonden (optional)
     * @param  bool $include_connections Boolean (default false) waarmee aangegeven kan worden dat ook in adressen van aansluitingen gezocht moet worden (optional)
     * @param  string $reseller_id Optioneel organizationId van een wederverkoper (zie de &#x60;SysReseller&#x60; categorie voor meer informatie). Als &#x60;resellerId&#x60; wordt meegegeven worden alleen klanten in het resultaat opgenomen met een actief of toekomstig contract voor deze wederverkoper. (optional)
     * @param  string $connection_ean Optionele parameter waarmee gezocht kan worden naar EANs. Dit is een like-search die alleen wordt uitgevoerd wanneer de parameter includeConnections de waarde true heeft (optional)
     * @param  string $organization_name Optionele parameter waarmee gezocht kan worden naar een specifieke klantnaam. Dit is een like-search (optional)
     * @param  string $company_label_id De labelId van de klant (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysOrganizationsSearchRequest($organization_reference = null, $organization_address_number = null, $organization_address_addition = null, $organization_address_zip_code = null, $organization_email_address = null, $organization_phone_number = null, $organization_group_id = null, $organization_type = null, $organization_sub_type = null, $kvk_number = null, $parent_organization_id = null, $is_parent_organization = null, $include_connections = null, $reseller_id = null, $connection_ean = null, $organization_name = null, $company_label_id = null)
    {

        $resourcePath = '/sysapi/v1.0/organizations/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($organization_reference !== null) {
            $queryParams['organizationReference'] = ObjectSerializer::toQueryValue($organization_reference);
        }
        // query params
        if ($organization_address_number !== null) {
            $queryParams['organizationAddressNumber'] = ObjectSerializer::toQueryValue($organization_address_number);
        }
        // query params
        if ($organization_address_addition !== null) {
            $queryParams['organizationAddressAddition'] = ObjectSerializer::toQueryValue($organization_address_addition);
        }
        // query params
        if ($organization_address_zip_code !== null) {
            $queryParams['organizationAddressZipCode'] = ObjectSerializer::toQueryValue($organization_address_zip_code);
        }
        // query params
        if ($organization_email_address !== null) {
            $queryParams['organizationEmailAddress'] = ObjectSerializer::toQueryValue($organization_email_address);
        }
        // query params
        if ($organization_phone_number !== null) {
            $queryParams['organizationPhoneNumber'] = ObjectSerializer::toQueryValue($organization_phone_number);
        }
        // query params
        if ($organization_group_id !== null) {
            $queryParams['organizationGroupId'] = ObjectSerializer::toQueryValue($organization_group_id);
        }
        // query params
        if ($organization_type !== null) {
            $queryParams['organizationType'] = ObjectSerializer::toQueryValue($organization_type);
        }
        // query params
        if ($organization_sub_type !== null) {
            $queryParams['organizationSubType'] = ObjectSerializer::toQueryValue($organization_sub_type);
        }
        // query params
        if ($kvk_number !== null) {
            $queryParams['kvkNumber'] = ObjectSerializer::toQueryValue($kvk_number);
        }
        // query params
        if ($parent_organization_id !== null) {
            $queryParams['parentOrganizationId'] = ObjectSerializer::toQueryValue($parent_organization_id);
        }
        // query params
        if ($is_parent_organization !== null) {
            $queryParams['isParentOrganization'] = ObjectSerializer::toQueryValue($is_parent_organization);
        }
        // query params
        if ($include_connections !== null) {
            $queryParams['includeConnections'] = ObjectSerializer::toQueryValue($include_connections);
        }
        // query params
        if ($reseller_id !== null) {
            $queryParams['resellerId'] = ObjectSerializer::toQueryValue($reseller_id);
        }
        // query params
        if ($connection_ean !== null) {
            $queryParams['connectionEAN'] = ObjectSerializer::toQueryValue($connection_ean);
        }
        // query params
        if ($organization_name !== null) {
            $queryParams['organizationName'] = ObjectSerializer::toQueryValue($organization_name);
        }
        // query params
        if ($company_label_id !== null) {
            $queryParams['companyLabelId'] = ObjectSerializer::toQueryValue($company_label_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
