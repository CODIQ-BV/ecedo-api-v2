<?php
/**
 * SysMeteringPointsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SysMeteringPointsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SysMeteringPointsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sysMeteringPointsCERPreNotifyContract
     *
     * Contract in CER aanmelden
     *
     * @param  string $ean EAN van de aansluiting (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiPreNotifyContractProcessSettings $process_settings Process instellingen, het object moet bestaan maar mag leeg zijn. Alle velden zijn optioneel. Zie het object-model voor meer details over de verschillende variabelen (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceServicesEDSNCERCERNoticeData
     */
    public function sysMeteringPointsCERPreNotifyContract($ean, $process_settings)
    {
        list($response) = $this->sysMeteringPointsCERPreNotifyContractWithHttpInfo($ean, $process_settings);
        return $response;
    }

    /**
     * Operation sysMeteringPointsCERPreNotifyContractWithHttpInfo
     *
     * Contract in CER aanmelden
     *
     * @param  string $ean EAN van de aansluiting (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiPreNotifyContractProcessSettings $process_settings Process instellingen, het object moet bestaan maar mag leeg zijn. Alle velden zijn optioneel. Zie het object-model voor meer details over de verschillende variabelen (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceServicesEDSNCERCERNoticeData, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysMeteringPointsCERPreNotifyContractWithHttpInfo($ean, $process_settings)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceServicesEDSNCERCERNoticeData';
        $request = $this->sysMeteringPointsCERPreNotifyContractRequest($ean, $process_settings);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceServicesEDSNCERCERNoticeData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysMeteringPointsCERPreNotifyContractAsync
     *
     * Contract in CER aanmelden
     *
     * @param  string $ean EAN van de aansluiting (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiPreNotifyContractProcessSettings $process_settings Process instellingen, het object moet bestaan maar mag leeg zijn. Alle velden zijn optioneel. Zie het object-model voor meer details over de verschillende variabelen (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysMeteringPointsCERPreNotifyContractAsync($ean, $process_settings)
    {
        return $this->sysMeteringPointsCERPreNotifyContractAsyncWithHttpInfo($ean, $process_settings)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysMeteringPointsCERPreNotifyContractAsyncWithHttpInfo
     *
     * Contract in CER aanmelden
     *
     * @param  string $ean EAN van de aansluiting (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiPreNotifyContractProcessSettings $process_settings Process instellingen, het object moet bestaan maar mag leeg zijn. Alle velden zijn optioneel. Zie het object-model voor meer details over de verschillende variabelen (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysMeteringPointsCERPreNotifyContractAsyncWithHttpInfo($ean, $process_settings)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceServicesEDSNCERCERNoticeData';
        $request = $this->sysMeteringPointsCERPreNotifyContractRequest($ean, $process_settings);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysMeteringPointsCERPreNotifyContract'
     *
     * @param  string $ean EAN van de aansluiting (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiPreNotifyContractProcessSettings $process_settings Process instellingen, het object moet bestaan maar mag leeg zijn. Alle velden zijn optioneel. Zie het object-model voor meer details over de verschillende variabelen (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysMeteringPointsCERPreNotifyContractRequest($ean, $process_settings)
    {
        // verify the required parameter 'ean' is set
        if ($ean === null || (is_array($ean) && count($ean) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ean when calling sysMeteringPointsCERPreNotifyContract'
            );
        }
        // verify the required parameter 'process_settings' is set
        if ($process_settings === null || (is_array($process_settings) && count($process_settings) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_settings when calling sysMeteringPointsCERPreNotifyContract'
            );
        }

        $resourcePath = '/sysapi/v1.0/meteringpoints/{ean}/cerprenotifycontract';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($ean !== null) {
            $resourcePath = str_replace(
                '{' . 'ean' . '}',
                ObjectSerializer::toPathValue($ean),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($process_settings)) {
            $_tempBody = $process_settings;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysMeteringPointsCreateClientKey
     *
     * Toevoegen van klantsleutels  aan het C-AR
     *
     * @param  string $ean EAN code van de aansluiting (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiClientKeyCreateData $post_data De data van de klantsleutel(s), zie het object-model voor meer informatie (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysMeteringPointsCreateClientKey($ean, $post_data)
    {
        list($response) = $this->sysMeteringPointsCreateClientKeyWithHttpInfo($ean, $post_data);
        return $response;
    }

    /**
     * Operation sysMeteringPointsCreateClientKeyWithHttpInfo
     *
     * Toevoegen van klantsleutels  aan het C-AR
     *
     * @param  string $ean EAN code van de aansluiting (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiClientKeyCreateData $post_data De data van de klantsleutel(s), zie het object-model voor meer informatie (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysMeteringPointsCreateClientKeyWithHttpInfo($ean, $post_data)
    {
        $returnType = 'object';
        $request = $this->sysMeteringPointsCreateClientKeyRequest($ean, $post_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysMeteringPointsCreateClientKeyAsync
     *
     * Toevoegen van klantsleutels  aan het C-AR
     *
     * @param  string $ean EAN code van de aansluiting (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiClientKeyCreateData $post_data De data van de klantsleutel(s), zie het object-model voor meer informatie (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysMeteringPointsCreateClientKeyAsync($ean, $post_data)
    {
        return $this->sysMeteringPointsCreateClientKeyAsyncWithHttpInfo($ean, $post_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysMeteringPointsCreateClientKeyAsyncWithHttpInfo
     *
     * Toevoegen van klantsleutels  aan het C-AR
     *
     * @param  string $ean EAN code van de aansluiting (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiClientKeyCreateData $post_data De data van de klantsleutel(s), zie het object-model voor meer informatie (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysMeteringPointsCreateClientKeyAsyncWithHttpInfo($ean, $post_data)
    {
        $returnType = 'object';
        $request = $this->sysMeteringPointsCreateClientKeyRequest($ean, $post_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysMeteringPointsCreateClientKey'
     *
     * @param  string $ean EAN code van de aansluiting (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiClientKeyCreateData $post_data De data van de klantsleutel(s), zie het object-model voor meer informatie (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysMeteringPointsCreateClientKeyRequest($ean, $post_data)
    {
        // verify the required parameter 'ean' is set
        if ($ean === null || (is_array($ean) && count($ean) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ean when calling sysMeteringPointsCreateClientKey'
            );
        }
        // verify the required parameter 'post_data' is set
        if ($post_data === null || (is_array($post_data) && count($post_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_data when calling sysMeteringPointsCreateClientKey'
            );
        }

        $resourcePath = '/sysapi/v1.0/meteringpoints/{ean}/clientkeys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($ean !== null) {
            $resourcePath = str_replace(
                '{' . 'ean' . '}',
                ObjectSerializer::toPathValue($ean),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($post_data)) {
            $_tempBody = $post_data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysMeteringPointsGet
     *
     * Opvragen van aansluitingdetails uit het C-AR
     *
     * @param  string $ean De EAN code van de aansluiting (required)
     * @param  bool $include_cer Default: true. Met behulp van deze parameter kan aangegeven worden of het contracteinddatum uit het CER opgevraagd moet worden. Aan de hand daarvan zal de &#x60;FirstAllowedSwitchDate&#x60; in de response gevuld worden (optional)
     * @param  bool $cer_pre_notified Default: false. Met behulp van deze parameter kan aangegeven worden of de aansluiting vooraangemeld is. Dit is alleen toegestaan bij kleinverbruikaansluitingen. (optional)
     * @param  string $supplier_ean Indien er in een omgeving meerdere leverancier-EANs geconfigureerd zijn kan met behulp van deze parameter aangegeven worden welke leverancier-EAN gebruikt moet worden om de gegevens uit het C-AR op te vragen. Standaard wordt de hoofd-EAN gebruikt. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiExtendedMeteringPoint
     */
    public function sysMeteringPointsGet($ean, $include_cer = null, $cer_pre_notified = null, $supplier_ean = null)
    {
        list($response) = $this->sysMeteringPointsGetWithHttpInfo($ean, $include_cer, $cer_pre_notified, $supplier_ean);
        return $response;
    }

    /**
     * Operation sysMeteringPointsGetWithHttpInfo
     *
     * Opvragen van aansluitingdetails uit het C-AR
     *
     * @param  string $ean De EAN code van de aansluiting (required)
     * @param  bool $include_cer Default: true. Met behulp van deze parameter kan aangegeven worden of het contracteinddatum uit het CER opgevraagd moet worden. Aan de hand daarvan zal de &#x60;FirstAllowedSwitchDate&#x60; in de response gevuld worden (optional)
     * @param  bool $cer_pre_notified Default: false. Met behulp van deze parameter kan aangegeven worden of de aansluiting vooraangemeld is. Dit is alleen toegestaan bij kleinverbruikaansluitingen. (optional)
     * @param  string $supplier_ean Indien er in een omgeving meerdere leverancier-EANs geconfigureerd zijn kan met behulp van deze parameter aangegeven worden welke leverancier-EAN gebruikt moet worden om de gegevens uit het C-AR op te vragen. Standaard wordt de hoofd-EAN gebruikt. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiExtendedMeteringPoint, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysMeteringPointsGetWithHttpInfo($ean, $include_cer = null, $cer_pre_notified = null, $supplier_ean = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiExtendedMeteringPoint';
        $request = $this->sysMeteringPointsGetRequest($ean, $include_cer, $cer_pre_notified, $supplier_ean);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiExtendedMeteringPoint',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysMeteringPointsGetAsync
     *
     * Opvragen van aansluitingdetails uit het C-AR
     *
     * @param  string $ean De EAN code van de aansluiting (required)
     * @param  bool $include_cer Default: true. Met behulp van deze parameter kan aangegeven worden of het contracteinddatum uit het CER opgevraagd moet worden. Aan de hand daarvan zal de &#x60;FirstAllowedSwitchDate&#x60; in de response gevuld worden (optional)
     * @param  bool $cer_pre_notified Default: false. Met behulp van deze parameter kan aangegeven worden of de aansluiting vooraangemeld is. Dit is alleen toegestaan bij kleinverbruikaansluitingen. (optional)
     * @param  string $supplier_ean Indien er in een omgeving meerdere leverancier-EANs geconfigureerd zijn kan met behulp van deze parameter aangegeven worden welke leverancier-EAN gebruikt moet worden om de gegevens uit het C-AR op te vragen. Standaard wordt de hoofd-EAN gebruikt. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysMeteringPointsGetAsync($ean, $include_cer = null, $cer_pre_notified = null, $supplier_ean = null)
    {
        return $this->sysMeteringPointsGetAsyncWithHttpInfo($ean, $include_cer, $cer_pre_notified, $supplier_ean)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysMeteringPointsGetAsyncWithHttpInfo
     *
     * Opvragen van aansluitingdetails uit het C-AR
     *
     * @param  string $ean De EAN code van de aansluiting (required)
     * @param  bool $include_cer Default: true. Met behulp van deze parameter kan aangegeven worden of het contracteinddatum uit het CER opgevraagd moet worden. Aan de hand daarvan zal de &#x60;FirstAllowedSwitchDate&#x60; in de response gevuld worden (optional)
     * @param  bool $cer_pre_notified Default: false. Met behulp van deze parameter kan aangegeven worden of de aansluiting vooraangemeld is. Dit is alleen toegestaan bij kleinverbruikaansluitingen. (optional)
     * @param  string $supplier_ean Indien er in een omgeving meerdere leverancier-EANs geconfigureerd zijn kan met behulp van deze parameter aangegeven worden welke leverancier-EAN gebruikt moet worden om de gegevens uit het C-AR op te vragen. Standaard wordt de hoofd-EAN gebruikt. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysMeteringPointsGetAsyncWithHttpInfo($ean, $include_cer = null, $cer_pre_notified = null, $supplier_ean = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiExtendedMeteringPoint';
        $request = $this->sysMeteringPointsGetRequest($ean, $include_cer, $cer_pre_notified, $supplier_ean);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysMeteringPointsGet'
     *
     * @param  string $ean De EAN code van de aansluiting (required)
     * @param  bool $include_cer Default: true. Met behulp van deze parameter kan aangegeven worden of het contracteinddatum uit het CER opgevraagd moet worden. Aan de hand daarvan zal de &#x60;FirstAllowedSwitchDate&#x60; in de response gevuld worden (optional)
     * @param  bool $cer_pre_notified Default: false. Met behulp van deze parameter kan aangegeven worden of de aansluiting vooraangemeld is. Dit is alleen toegestaan bij kleinverbruikaansluitingen. (optional)
     * @param  string $supplier_ean Indien er in een omgeving meerdere leverancier-EANs geconfigureerd zijn kan met behulp van deze parameter aangegeven worden welke leverancier-EAN gebruikt moet worden om de gegevens uit het C-AR op te vragen. Standaard wordt de hoofd-EAN gebruikt. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysMeteringPointsGetRequest($ean, $include_cer = null, $cer_pre_notified = null, $supplier_ean = null)
    {
        // verify the required parameter 'ean' is set
        if ($ean === null || (is_array($ean) && count($ean) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ean when calling sysMeteringPointsGet'
            );
        }

        $resourcePath = '/sysapi/v1.0/meteringpoints/{ean}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_cer !== null) {
            $queryParams['includeCER'] = ObjectSerializer::toQueryValue($include_cer);
        }
        // query params
        if ($cer_pre_notified !== null) {
            $queryParams['cerPreNotified'] = ObjectSerializer::toQueryValue($cer_pre_notified);
        }
        // query params
        if ($supplier_ean !== null) {
            $queryParams['supplierEAN'] = ObjectSerializer::toQueryValue($supplier_ean);
        }

        // path params
        if ($ean !== null) {
            $resourcePath = str_replace(
                '{' . 'ean' . '}',
                ObjectSerializer::toPathValue($ean),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysMeteringPointsGetProposalMeteringPoint
     *
     * Opvragen van aansluitingdetails uit het C-AR tijdens het offerte-traject
     *
     * @param  string $ean EAN code van de aansluiting (required)
     * @param  string $mandate_id Key van de leverancier waarmee het klantmandaat gevonden kan worden (required)
     * @param  string $iban_key Laatste 3 cijfers van rekeningnummer klant (optional)
     * @param  string $birth_day_key Verjaardag vad klant in notatie MMDD (optional)
     * @param  bool $include_cer Opvragen CER contract data ja/nee (optional)
     * @param  string $supplier_ean Indien er in een omgeving meerdere leverancier-EANs geconfigureerd zijn kan met behulp van deze parameter aangegeven worden welke leverancier-EAN gebruikt moet worden om de gegevens uit het C-AR op te vragen. Standaard wordt de hoofd-EAN gebruikt. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sysMeteringPointsGetProposalMeteringPoint($ean, $mandate_id, $iban_key = null, $birth_day_key = null, $include_cer = null, $supplier_ean = null)
    {
        $this->sysMeteringPointsGetProposalMeteringPointWithHttpInfo($ean, $mandate_id, $iban_key, $birth_day_key, $include_cer, $supplier_ean);
    }

    /**
     * Operation sysMeteringPointsGetProposalMeteringPointWithHttpInfo
     *
     * Opvragen van aansluitingdetails uit het C-AR tijdens het offerte-traject
     *
     * @param  string $ean EAN code van de aansluiting (required)
     * @param  string $mandate_id Key van de leverancier waarmee het klantmandaat gevonden kan worden (required)
     * @param  string $iban_key Laatste 3 cijfers van rekeningnummer klant (optional)
     * @param  string $birth_day_key Verjaardag vad klant in notatie MMDD (optional)
     * @param  bool $include_cer Opvragen CER contract data ja/nee (optional)
     * @param  string $supplier_ean Indien er in een omgeving meerdere leverancier-EANs geconfigureerd zijn kan met behulp van deze parameter aangegeven worden welke leverancier-EAN gebruikt moet worden om de gegevens uit het C-AR op te vragen. Standaard wordt de hoofd-EAN gebruikt. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysMeteringPointsGetProposalMeteringPointWithHttpInfo($ean, $mandate_id, $iban_key = null, $birth_day_key = null, $include_cer = null, $supplier_ean = null)
    {
        $returnType = '';
        $request = $this->sysMeteringPointsGetProposalMeteringPointRequest($ean, $mandate_id, $iban_key, $birth_day_key, $include_cer, $supplier_ean);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysMeteringPointsGetProposalMeteringPointAsync
     *
     * Opvragen van aansluitingdetails uit het C-AR tijdens het offerte-traject
     *
     * @param  string $ean EAN code van de aansluiting (required)
     * @param  string $mandate_id Key van de leverancier waarmee het klantmandaat gevonden kan worden (required)
     * @param  string $iban_key Laatste 3 cijfers van rekeningnummer klant (optional)
     * @param  string $birth_day_key Verjaardag vad klant in notatie MMDD (optional)
     * @param  bool $include_cer Opvragen CER contract data ja/nee (optional)
     * @param  string $supplier_ean Indien er in een omgeving meerdere leverancier-EANs geconfigureerd zijn kan met behulp van deze parameter aangegeven worden welke leverancier-EAN gebruikt moet worden om de gegevens uit het C-AR op te vragen. Standaard wordt de hoofd-EAN gebruikt. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysMeteringPointsGetProposalMeteringPointAsync($ean, $mandate_id, $iban_key = null, $birth_day_key = null, $include_cer = null, $supplier_ean = null)
    {
        return $this->sysMeteringPointsGetProposalMeteringPointAsyncWithHttpInfo($ean, $mandate_id, $iban_key, $birth_day_key, $include_cer, $supplier_ean)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysMeteringPointsGetProposalMeteringPointAsyncWithHttpInfo
     *
     * Opvragen van aansluitingdetails uit het C-AR tijdens het offerte-traject
     *
     * @param  string $ean EAN code van de aansluiting (required)
     * @param  string $mandate_id Key van de leverancier waarmee het klantmandaat gevonden kan worden (required)
     * @param  string $iban_key Laatste 3 cijfers van rekeningnummer klant (optional)
     * @param  string $birth_day_key Verjaardag vad klant in notatie MMDD (optional)
     * @param  bool $include_cer Opvragen CER contract data ja/nee (optional)
     * @param  string $supplier_ean Indien er in een omgeving meerdere leverancier-EANs geconfigureerd zijn kan met behulp van deze parameter aangegeven worden welke leverancier-EAN gebruikt moet worden om de gegevens uit het C-AR op te vragen. Standaard wordt de hoofd-EAN gebruikt. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysMeteringPointsGetProposalMeteringPointAsyncWithHttpInfo($ean, $mandate_id, $iban_key = null, $birth_day_key = null, $include_cer = null, $supplier_ean = null)
    {
        $returnType = '';
        $request = $this->sysMeteringPointsGetProposalMeteringPointRequest($ean, $mandate_id, $iban_key, $birth_day_key, $include_cer, $supplier_ean);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysMeteringPointsGetProposalMeteringPoint'
     *
     * @param  string $ean EAN code van de aansluiting (required)
     * @param  string $mandate_id Key van de leverancier waarmee het klantmandaat gevonden kan worden (required)
     * @param  string $iban_key Laatste 3 cijfers van rekeningnummer klant (optional)
     * @param  string $birth_day_key Verjaardag vad klant in notatie MMDD (optional)
     * @param  bool $include_cer Opvragen CER contract data ja/nee (optional)
     * @param  string $supplier_ean Indien er in een omgeving meerdere leverancier-EANs geconfigureerd zijn kan met behulp van deze parameter aangegeven worden welke leverancier-EAN gebruikt moet worden om de gegevens uit het C-AR op te vragen. Standaard wordt de hoofd-EAN gebruikt. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysMeteringPointsGetProposalMeteringPointRequest($ean, $mandate_id, $iban_key = null, $birth_day_key = null, $include_cer = null, $supplier_ean = null)
    {
        // verify the required parameter 'ean' is set
        if ($ean === null || (is_array($ean) && count($ean) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ean when calling sysMeteringPointsGetProposalMeteringPoint'
            );
        }
        // verify the required parameter 'mandate_id' is set
        if ($mandate_id === null || (is_array($mandate_id) && count($mandate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mandate_id when calling sysMeteringPointsGetProposalMeteringPoint'
            );
        }

        $resourcePath = '/sysapi/v1.0/proposalmeteringpoints/{ean}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($mandate_id !== null) {
            $queryParams['mandateId'] = ObjectSerializer::toQueryValue($mandate_id);
        }
        // query params
        if ($iban_key !== null) {
            $queryParams['ibanKey'] = ObjectSerializer::toQueryValue($iban_key);
        }
        // query params
        if ($birth_day_key !== null) {
            $queryParams['birthDayKey'] = ObjectSerializer::toQueryValue($birth_day_key);
        }
        // query params
        if ($include_cer !== null) {
            $queryParams['includeCER'] = ObjectSerializer::toQueryValue($include_cer);
        }
        // query params
        if ($supplier_ean !== null) {
            $queryParams['supplierEAN'] = ObjectSerializer::toQueryValue($supplier_ean);
        }

        // path params
        if ($ean !== null) {
            $resourcePath = str_replace(
                '{' . 'ean' . '}',
                ObjectSerializer::toPathValue($ean),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysMeteringPointsSearch
     *
     * Zoeken van aansluitingen in het C-AR
     *
     * @param  string $market_segment Marktsegment (optional)
     * @param  string $ean EAN code (optional)
     * @param  string $address_zip_code Postcode (optional)
     * @param  int $address_number Huisnummer (optional)
     * @param  string $address_addition Optionele huisnummertoevoeging (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiMeteringPoint[]
     */
    public function sysMeteringPointsSearch($market_segment = null, $ean = null, $address_zip_code = null, $address_number = null, $address_addition = null)
    {
        list($response) = $this->sysMeteringPointsSearchWithHttpInfo($market_segment, $ean, $address_zip_code, $address_number, $address_addition);
        return $response;
    }

    /**
     * Operation sysMeteringPointsSearchWithHttpInfo
     *
     * Zoeken van aansluitingen in het C-AR
     *
     * @param  string $market_segment Marktsegment (optional)
     * @param  string $ean EAN code (optional)
     * @param  string $address_zip_code Postcode (optional)
     * @param  int $address_number Huisnummer (optional)
     * @param  string $address_addition Optionele huisnummertoevoeging (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiMeteringPoint[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sysMeteringPointsSearchWithHttpInfo($market_segment = null, $ean = null, $address_zip_code = null, $address_number = null, $address_addition = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiMeteringPoint[]';
        $request = $this->sysMeteringPointsSearchRequest($market_segment, $ean, $address_zip_code, $address_number, $address_addition);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiMeteringPoint[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysMeteringPointsSearchAsync
     *
     * Zoeken van aansluitingen in het C-AR
     *
     * @param  string $market_segment Marktsegment (optional)
     * @param  string $ean EAN code (optional)
     * @param  string $address_zip_code Postcode (optional)
     * @param  int $address_number Huisnummer (optional)
     * @param  string $address_addition Optionele huisnummertoevoeging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysMeteringPointsSearchAsync($market_segment = null, $ean = null, $address_zip_code = null, $address_number = null, $address_addition = null)
    {
        return $this->sysMeteringPointsSearchAsyncWithHttpInfo($market_segment, $ean, $address_zip_code, $address_number, $address_addition)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysMeteringPointsSearchAsyncWithHttpInfo
     *
     * Zoeken van aansluitingen in het C-AR
     *
     * @param  string $market_segment Marktsegment (optional)
     * @param  string $ean EAN code (optional)
     * @param  string $address_zip_code Postcode (optional)
     * @param  int $address_number Huisnummer (optional)
     * @param  string $address_addition Optionele huisnummertoevoeging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysMeteringPointsSearchAsyncWithHttpInfo($market_segment = null, $ean = null, $address_zip_code = null, $address_number = null, $address_addition = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiMeteringPoint[]';
        $request = $this->sysMeteringPointsSearchRequest($market_segment, $ean, $address_zip_code, $address_number, $address_addition);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysMeteringPointsSearch'
     *
     * @param  string $market_segment Marktsegment (optional)
     * @param  string $ean EAN code (optional)
     * @param  string $address_zip_code Postcode (optional)
     * @param  int $address_number Huisnummer (optional)
     * @param  string $address_addition Optionele huisnummertoevoeging (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysMeteringPointsSearchRequest($market_segment = null, $ean = null, $address_zip_code = null, $address_number = null, $address_addition = null)
    {

        $resourcePath = '/sysapi/v1.0/meteringpoints/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($market_segment !== null) {
            $queryParams['marketSegment'] = ObjectSerializer::toQueryValue($market_segment);
        }
        // query params
        if ($ean !== null) {
            $queryParams['ean'] = ObjectSerializer::toQueryValue($ean);
        }
        // query params
        if ($address_zip_code !== null) {
            $queryParams['addressZipCode'] = ObjectSerializer::toQueryValue($address_zip_code);
        }
        // query params
        if ($address_number !== null) {
            $queryParams['addressNumber'] = ObjectSerializer::toQueryValue($address_number);
        }
        // query params
        if ($address_addition !== null) {
            $queryParams['addressAddition'] = ObjectSerializer::toQueryValue($address_addition);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
