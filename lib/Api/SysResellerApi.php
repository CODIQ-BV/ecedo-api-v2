<?php
/**
 * SysResellerApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SysResellerApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SysResellerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sysResellerGetContractPrices
     *
     * Verkrijg de prijzen van alle prijscomponenten van offertes
     *
     * @param  string $organization_id  (required)
     * @param  string $contract_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiConnectionContractPrices[]
     */
    public function sysResellerGetContractPrices($organization_id, $contract_id)
    {
        list($response) = $this->sysResellerGetContractPricesWithHttpInfo($organization_id, $contract_id);
        return $response;
    }

    /**
     * Operation sysResellerGetContractPricesWithHttpInfo
     *
     * Verkrijg de prijzen van alle prijscomponenten van offertes
     *
     * @param  string $organization_id  (required)
     * @param  string $contract_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiConnectionContractPrices[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sysResellerGetContractPricesWithHttpInfo($organization_id, $contract_id)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiConnectionContractPrices[]';
        $request = $this->sysResellerGetContractPricesRequest($organization_id, $contract_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiConnectionContractPrices[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysResellerGetContractPricesAsync
     *
     * Verkrijg de prijzen van alle prijscomponenten van offertes
     *
     * @param  string $organization_id  (required)
     * @param  string $contract_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysResellerGetContractPricesAsync($organization_id, $contract_id)
    {
        return $this->sysResellerGetContractPricesAsyncWithHttpInfo($organization_id, $contract_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysResellerGetContractPricesAsyncWithHttpInfo
     *
     * Verkrijg de prijzen van alle prijscomponenten van offertes
     *
     * @param  string $organization_id  (required)
     * @param  string $contract_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysResellerGetContractPricesAsyncWithHttpInfo($organization_id, $contract_id)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiConnectionContractPrices[]';
        $request = $this->sysResellerGetContractPricesRequest($organization_id, $contract_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysResellerGetContractPrices'
     *
     * @param  string $organization_id  (required)
     * @param  string $contract_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysResellerGetContractPricesRequest($organization_id, $contract_id)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysResellerGetContractPrices'
            );
        }
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling sysResellerGetContractPrices'
            );
        }

        $resourcePath = '/sysapi/v1.0/reseller/organizations/{organizationId}/proposedcontracts/{contractId}/prices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contractId' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysResellerGetContracts
     *
     * Verkrijg de contracten van een wederverkoper
     *
     * @param  string $reseller_organization_id  (required)
     * @param  \DateTime $valid_on Alleen contracten opleveren die geldig zijn op deze datum (optioneel) (optional)
     * @param  bool $include_properties Afspraken wel of niet opleveren (optional)
     * @param  bool $include_prices Prijzen wel of niet opleveren (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiResellerContract[]
     */
    public function sysResellerGetContracts($reseller_organization_id, $valid_on = null, $include_properties = null, $include_prices = null)
    {
        list($response) = $this->sysResellerGetContractsWithHttpInfo($reseller_organization_id, $valid_on, $include_properties, $include_prices);
        return $response;
    }

    /**
     * Operation sysResellerGetContractsWithHttpInfo
     *
     * Verkrijg de contracten van een wederverkoper
     *
     * @param  string $reseller_organization_id  (required)
     * @param  \DateTime $valid_on Alleen contracten opleveren die geldig zijn op deze datum (optioneel) (optional)
     * @param  bool $include_properties Afspraken wel of niet opleveren (optional)
     * @param  bool $include_prices Prijzen wel of niet opleveren (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiResellerContract[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sysResellerGetContractsWithHttpInfo($reseller_organization_id, $valid_on = null, $include_properties = null, $include_prices = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiResellerContract[]';
        $request = $this->sysResellerGetContractsRequest($reseller_organization_id, $valid_on, $include_properties, $include_prices);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiResellerContract[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysResellerGetContractsAsync
     *
     * Verkrijg de contracten van een wederverkoper
     *
     * @param  string $reseller_organization_id  (required)
     * @param  \DateTime $valid_on Alleen contracten opleveren die geldig zijn op deze datum (optioneel) (optional)
     * @param  bool $include_properties Afspraken wel of niet opleveren (optional)
     * @param  bool $include_prices Prijzen wel of niet opleveren (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysResellerGetContractsAsync($reseller_organization_id, $valid_on = null, $include_properties = null, $include_prices = null)
    {
        return $this->sysResellerGetContractsAsyncWithHttpInfo($reseller_organization_id, $valid_on, $include_properties, $include_prices)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysResellerGetContractsAsyncWithHttpInfo
     *
     * Verkrijg de contracten van een wederverkoper
     *
     * @param  string $reseller_organization_id  (required)
     * @param  \DateTime $valid_on Alleen contracten opleveren die geldig zijn op deze datum (optioneel) (optional)
     * @param  bool $include_properties Afspraken wel of niet opleveren (optional)
     * @param  bool $include_prices Prijzen wel of niet opleveren (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysResellerGetContractsAsyncWithHttpInfo($reseller_organization_id, $valid_on = null, $include_properties = null, $include_prices = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiResellerContract[]';
        $request = $this->sysResellerGetContractsRequest($reseller_organization_id, $valid_on, $include_properties, $include_prices);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysResellerGetContracts'
     *
     * @param  string $reseller_organization_id  (required)
     * @param  \DateTime $valid_on Alleen contracten opleveren die geldig zijn op deze datum (optioneel) (optional)
     * @param  bool $include_properties Afspraken wel of niet opleveren (optional)
     * @param  bool $include_prices Prijzen wel of niet opleveren (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysResellerGetContractsRequest($reseller_organization_id, $valid_on = null, $include_properties = null, $include_prices = null)
    {
        // verify the required parameter 'reseller_organization_id' is set
        if ($reseller_organization_id === null || (is_array($reseller_organization_id) && count($reseller_organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reseller_organization_id when calling sysResellerGetContracts'
            );
        }

        $resourcePath = '/sysapi/v1.0/reseller/{resellerOrganizationId}/contracts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($valid_on !== null) {
            $queryParams['validOn'] = ObjectSerializer::toQueryValue($valid_on);
        }
        // query params
        if ($include_properties !== null) {
            $queryParams['includeProperties'] = ObjectSerializer::toQueryValue($include_properties);
        }
        // query params
        if ($include_prices !== null) {
            $queryParams['includePrices'] = ObjectSerializer::toQueryValue($include_prices);
        }

        // path params
        if ($reseller_organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'resellerOrganizationId' . '}',
                ObjectSerializer::toPathValue($reseller_organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysResellerGetOrganizations
     *
     * Verkrijg de klanten van een wederverkoper
     *
     * @param  string $reseller_organization_id  (required)
     * @param  bool $only_active  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationSearchResult
     */
    public function sysResellerGetOrganizations($reseller_organization_id, $only_active)
    {
        list($response) = $this->sysResellerGetOrganizationsWithHttpInfo($reseller_organization_id, $only_active);
        return $response;
    }

    /**
     * Operation sysResellerGetOrganizationsWithHttpInfo
     *
     * Verkrijg de klanten van een wederverkoper
     *
     * @param  string $reseller_organization_id  (required)
     * @param  bool $only_active  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationSearchResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysResellerGetOrganizationsWithHttpInfo($reseller_organization_id, $only_active)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationSearchResult';
        $request = $this->sysResellerGetOrganizationsRequest($reseller_organization_id, $only_active);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationSearchResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysResellerGetOrganizationsAsync
     *
     * Verkrijg de klanten van een wederverkoper
     *
     * @param  string $reseller_organization_id  (required)
     * @param  bool $only_active  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysResellerGetOrganizationsAsync($reseller_organization_id, $only_active)
    {
        return $this->sysResellerGetOrganizationsAsyncWithHttpInfo($reseller_organization_id, $only_active)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysResellerGetOrganizationsAsyncWithHttpInfo
     *
     * Verkrijg de klanten van een wederverkoper
     *
     * @param  string $reseller_organization_id  (required)
     * @param  bool $only_active  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysResellerGetOrganizationsAsyncWithHttpInfo($reseller_organization_id, $only_active)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiOrganizationSearchResult';
        $request = $this->sysResellerGetOrganizationsRequest($reseller_organization_id, $only_active);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysResellerGetOrganizations'
     *
     * @param  string $reseller_organization_id  (required)
     * @param  bool $only_active  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysResellerGetOrganizationsRequest($reseller_organization_id, $only_active)
    {
        // verify the required parameter 'reseller_organization_id' is set
        if ($reseller_organization_id === null || (is_array($reseller_organization_id) && count($reseller_organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reseller_organization_id when calling sysResellerGetOrganizations'
            );
        }
        // verify the required parameter 'only_active' is set
        if ($only_active === null || (is_array($only_active) && count($only_active) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $only_active when calling sysResellerGetOrganizations'
            );
        }

        $resourcePath = '/sysapi/v1.0/reseller/resellerorganizations/{resellerOrganizationId}/organizations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($only_active !== null) {
            $queryParams['onlyActive'] = ObjectSerializer::toQueryValue($only_active);
        }

        // path params
        if ($reseller_organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'resellerOrganizationId' . '}',
                ObjectSerializer::toPathValue($reseller_organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysResellerGetProposedContracts
     *
     * Verkrijg offerte contracten
     *
     * @param  string $reseller_organization_id Id van de Reseller organization (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiContract[]
     */
    public function sysResellerGetProposedContracts($reseller_organization_id)
    {
        list($response) = $this->sysResellerGetProposedContractsWithHttpInfo($reseller_organization_id);
        return $response;
    }

    /**
     * Operation sysResellerGetProposedContractsWithHttpInfo
     *
     * Verkrijg offerte contracten
     *
     * @param  string $reseller_organization_id Id van de Reseller organization (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiContract[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sysResellerGetProposedContractsWithHttpInfo($reseller_organization_id)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiContract[]';
        $request = $this->sysResellerGetProposedContractsRequest($reseller_organization_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiContract[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysResellerGetProposedContractsAsync
     *
     * Verkrijg offerte contracten
     *
     * @param  string $reseller_organization_id Id van de Reseller organization (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysResellerGetProposedContractsAsync($reseller_organization_id)
    {
        return $this->sysResellerGetProposedContractsAsyncWithHttpInfo($reseller_organization_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysResellerGetProposedContractsAsyncWithHttpInfo
     *
     * Verkrijg offerte contracten
     *
     * @param  string $reseller_organization_id Id van de Reseller organization (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysResellerGetProposedContractsAsyncWithHttpInfo($reseller_organization_id)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiContract[]';
        $request = $this->sysResellerGetProposedContractsRequest($reseller_organization_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysResellerGetProposedContracts'
     *
     * @param  string $reseller_organization_id Id van de Reseller organization (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysResellerGetProposedContractsRequest($reseller_organization_id)
    {
        // verify the required parameter 'reseller_organization_id' is set
        if ($reseller_organization_id === null || (is_array($reseller_organization_id) && count($reseller_organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reseller_organization_id when calling sysResellerGetProposedContracts'
            );
        }

        $resourcePath = '/sysapi/v1.0/reseller/resellerorganizations/{resellerOrganizationId}/proposedcontracts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($reseller_organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'resellerOrganizationId' . '}',
                ObjectSerializer::toPathValue($reseller_organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysResellerPostContract
     *
     * Post contract
     *
     * @param  string $organization_id  (required)
     * @param  string $connection_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiResellerContractPostData $contract  (required)
     * @param  bool $skip_wait_for_approval Als &#39;true&#39; dan wordt status contract nooit op &#39;WaitForApproval&#39; gezet; default &#39;false&#39; (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiContractPostResult
     */
    public function sysResellerPostContract($organization_id, $connection_id, $contract, $skip_wait_for_approval = null)
    {
        list($response) = $this->sysResellerPostContractWithHttpInfo($organization_id, $connection_id, $contract, $skip_wait_for_approval);
        return $response;
    }

    /**
     * Operation sysResellerPostContractWithHttpInfo
     *
     * Post contract
     *
     * @param  string $organization_id  (required)
     * @param  string $connection_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiResellerContractPostData $contract  (required)
     * @param  bool $skip_wait_for_approval Als &#39;true&#39; dan wordt status contract nooit op &#39;WaitForApproval&#39; gezet; default &#39;false&#39; (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiContractPostResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysResellerPostContractWithHttpInfo($organization_id, $connection_id, $contract, $skip_wait_for_approval = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiContractPostResult';
        $request = $this->sysResellerPostContractRequest($organization_id, $connection_id, $contract, $skip_wait_for_approval);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiContractPostResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysResellerPostContractAsync
     *
     * Post contract
     *
     * @param  string $organization_id  (required)
     * @param  string $connection_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiResellerContractPostData $contract  (required)
     * @param  bool $skip_wait_for_approval Als &#39;true&#39; dan wordt status contract nooit op &#39;WaitForApproval&#39; gezet; default &#39;false&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysResellerPostContractAsync($organization_id, $connection_id, $contract, $skip_wait_for_approval = null)
    {
        return $this->sysResellerPostContractAsyncWithHttpInfo($organization_id, $connection_id, $contract, $skip_wait_for_approval)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysResellerPostContractAsyncWithHttpInfo
     *
     * Post contract
     *
     * @param  string $organization_id  (required)
     * @param  string $connection_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiResellerContractPostData $contract  (required)
     * @param  bool $skip_wait_for_approval Als &#39;true&#39; dan wordt status contract nooit op &#39;WaitForApproval&#39; gezet; default &#39;false&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysResellerPostContractAsyncWithHttpInfo($organization_id, $connection_id, $contract, $skip_wait_for_approval = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiContractPostResult';
        $request = $this->sysResellerPostContractRequest($organization_id, $connection_id, $contract, $skip_wait_for_approval);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysResellerPostContract'
     *
     * @param  string $organization_id  (required)
     * @param  string $connection_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiResellerContractPostData $contract  (required)
     * @param  bool $skip_wait_for_approval Als &#39;true&#39; dan wordt status contract nooit op &#39;WaitForApproval&#39; gezet; default &#39;false&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysResellerPostContractRequest($organization_id, $connection_id, $contract, $skip_wait_for_approval = null)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysResellerPostContract'
            );
        }
        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling sysResellerPostContract'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling sysResellerPostContract'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/connections/{connectionId}/proposedcontracts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($skip_wait_for_approval !== null) {
            $queryParams['skipWaitForApproval'] = ObjectSerializer::toQueryValue($skip_wait_for_approval);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($contract)) {
            $_tempBody = $contract;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysResellerPostContractPrices
     *
     * Toevoegen van reseller prijzen per contract
     *
     * @param  string $contract_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiResellerContractPricePostData $price_post_data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysResellerPostContractPrices($contract_id, $price_post_data)
    {
        list($response) = $this->sysResellerPostContractPricesWithHttpInfo($contract_id, $price_post_data);
        return $response;
    }

    /**
     * Operation sysResellerPostContractPricesWithHttpInfo
     *
     * Toevoegen van reseller prijzen per contract
     *
     * @param  string $contract_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiResellerContractPricePostData $price_post_data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysResellerPostContractPricesWithHttpInfo($contract_id, $price_post_data)
    {
        $returnType = 'object';
        $request = $this->sysResellerPostContractPricesRequest($contract_id, $price_post_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysResellerPostContractPricesAsync
     *
     * Toevoegen van reseller prijzen per contract
     *
     * @param  string $contract_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiResellerContractPricePostData $price_post_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysResellerPostContractPricesAsync($contract_id, $price_post_data)
    {
        return $this->sysResellerPostContractPricesAsyncWithHttpInfo($contract_id, $price_post_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysResellerPostContractPricesAsyncWithHttpInfo
     *
     * Toevoegen van reseller prijzen per contract
     *
     * @param  string $contract_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiResellerContractPricePostData $price_post_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysResellerPostContractPricesAsyncWithHttpInfo($contract_id, $price_post_data)
    {
        $returnType = 'object';
        $request = $this->sysResellerPostContractPricesRequest($contract_id, $price_post_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysResellerPostContractPrices'
     *
     * @param  string $contract_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiResellerContractPricePostData $price_post_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysResellerPostContractPricesRequest($contract_id, $price_post_data)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling sysResellerPostContractPrices'
            );
        }
        // verify the required parameter 'price_post_data' is set
        if ($price_post_data === null || (is_array($price_post_data) && count($price_post_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_post_data when calling sysResellerPostContractPrices'
            );
        }

        $resourcePath = '/sysapi/v1.0/reseller/contracts/{contractId}/addresellerprices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contractId' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($price_post_data)) {
            $_tempBody = $price_post_data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysResellerPostContractProposalApproved
     *
     * Post contract proposal approved
     *
     * @param  string $contract_id  (required)
     * @param  \DateTime $approval_date yyyy-mm-dd (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysResellerPostContractProposalApproved($contract_id, $approval_date)
    {
        list($response) = $this->sysResellerPostContractProposalApprovedWithHttpInfo($contract_id, $approval_date);
        return $response;
    }

    /**
     * Operation sysResellerPostContractProposalApprovedWithHttpInfo
     *
     * Post contract proposal approved
     *
     * @param  string $contract_id  (required)
     * @param  \DateTime $approval_date yyyy-mm-dd (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysResellerPostContractProposalApprovedWithHttpInfo($contract_id, $approval_date)
    {
        $returnType = 'object';
        $request = $this->sysResellerPostContractProposalApprovedRequest($contract_id, $approval_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysResellerPostContractProposalApprovedAsync
     *
     * Post contract proposal approved
     *
     * @param  string $contract_id  (required)
     * @param  \DateTime $approval_date yyyy-mm-dd (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysResellerPostContractProposalApprovedAsync($contract_id, $approval_date)
    {
        return $this->sysResellerPostContractProposalApprovedAsyncWithHttpInfo($contract_id, $approval_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysResellerPostContractProposalApprovedAsyncWithHttpInfo
     *
     * Post contract proposal approved
     *
     * @param  string $contract_id  (required)
     * @param  \DateTime $approval_date yyyy-mm-dd (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysResellerPostContractProposalApprovedAsyncWithHttpInfo($contract_id, $approval_date)
    {
        $returnType = 'object';
        $request = $this->sysResellerPostContractProposalApprovedRequest($contract_id, $approval_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysResellerPostContractProposalApproved'
     *
     * @param  string $contract_id  (required)
     * @param  \DateTime $approval_date yyyy-mm-dd (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysResellerPostContractProposalApprovedRequest($contract_id, $approval_date)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling sysResellerPostContractProposalApproved'
            );
        }
        // verify the required parameter 'approval_date' is set
        if ($approval_date === null || (is_array($approval_date) && count($approval_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $approval_date when calling sysResellerPostContractProposalApproved'
            );
        }

        $resourcePath = '/sysapi/v1.0/reseller/contracts/{contractId}/approveproposal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($approval_date !== null) {
            $queryParams['approvalDate'] = ObjectSerializer::toQueryValue($approval_date);
        }

        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contractId' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysResellerSearch
     *
     * Verkrijg de wederverkopers
     *
     * @param  string $organization_email_address Primair e-mailadres van de reseller (exacte match) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiResellerOrganization[]
     */
    public function sysResellerSearch($organization_email_address = null)
    {
        list($response) = $this->sysResellerSearchWithHttpInfo($organization_email_address);
        return $response;
    }

    /**
     * Operation sysResellerSearchWithHttpInfo
     *
     * Verkrijg de wederverkopers
     *
     * @param  string $organization_email_address Primair e-mailadres van de reseller (exacte match) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiResellerOrganization[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sysResellerSearchWithHttpInfo($organization_email_address = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiResellerOrganization[]';
        $request = $this->sysResellerSearchRequest($organization_email_address);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiResellerOrganization[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysResellerSearchAsync
     *
     * Verkrijg de wederverkopers
     *
     * @param  string $organization_email_address Primair e-mailadres van de reseller (exacte match) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysResellerSearchAsync($organization_email_address = null)
    {
        return $this->sysResellerSearchAsyncWithHttpInfo($organization_email_address)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysResellerSearchAsyncWithHttpInfo
     *
     * Verkrijg de wederverkopers
     *
     * @param  string $organization_email_address Primair e-mailadres van de reseller (exacte match) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysResellerSearchAsyncWithHttpInfo($organization_email_address = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiResellerOrganization[]';
        $request = $this->sysResellerSearchRequest($organization_email_address);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysResellerSearch'
     *
     * @param  string $organization_email_address Primair e-mailadres van de reseller (exacte match) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysResellerSearchRequest($organization_email_address = null)
    {

        $resourcePath = '/sysapi/v1.0/reseller/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($organization_email_address !== null) {
            $queryParams['organizationEmailAddress'] = ObjectSerializer::toQueryValue($organization_email_address);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
