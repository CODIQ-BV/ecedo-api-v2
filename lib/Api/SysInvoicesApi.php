<?php
/**
 * SysInvoicesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SysInvoicesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SysInvoicesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sysInvoicesAddInvoiceRows
     *
     * Toevoegen factuurregels aan een factuur
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoiceRowsPostData $post_data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sysInvoicesAddInvoiceRows($organization_id, $invoice_id, $post_data)
    {
        $this->sysInvoicesAddInvoiceRowsWithHttpInfo($organization_id, $invoice_id, $post_data);
    }

    /**
     * Operation sysInvoicesAddInvoiceRowsWithHttpInfo
     *
     * Toevoegen factuurregels aan een factuur
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoiceRowsPostData $post_data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysInvoicesAddInvoiceRowsWithHttpInfo($organization_id, $invoice_id, $post_data)
    {
        $returnType = '';
        $request = $this->sysInvoicesAddInvoiceRowsRequest($organization_id, $invoice_id, $post_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysInvoicesAddInvoiceRowsAsync
     *
     * Toevoegen factuurregels aan een factuur
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoiceRowsPostData $post_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesAddInvoiceRowsAsync($organization_id, $invoice_id, $post_data)
    {
        return $this->sysInvoicesAddInvoiceRowsAsyncWithHttpInfo($organization_id, $invoice_id, $post_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysInvoicesAddInvoiceRowsAsyncWithHttpInfo
     *
     * Toevoegen factuurregels aan een factuur
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoiceRowsPostData $post_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesAddInvoiceRowsAsyncWithHttpInfo($organization_id, $invoice_id, $post_data)
    {
        $returnType = '';
        $request = $this->sysInvoicesAddInvoiceRowsRequest($organization_id, $invoice_id, $post_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysInvoicesAddInvoiceRows'
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoiceRowsPostData $post_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysInvoicesAddInvoiceRowsRequest($organization_id, $invoice_id, $post_data)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysInvoicesAddInvoiceRows'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling sysInvoicesAddInvoiceRows'
            );
        }
        // verify the required parameter 'post_data' is set
        if ($post_data === null || (is_array($post_data) && count($post_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_data when calling sysInvoicesAddInvoiceRows'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/invoices/{invoiceId}/invoicerows';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($post_data)) {
            $_tempBody = $post_data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysInvoicesByNumber
     *
     * Haal een specifieke factuur op (op basis van factuurnummer)
     *
     * @param  string $invoice_number Het factuurnummer (required)
     * @param  bool $include_documents Optionele parameter (default false) waardoor het response-object voorzien kan worden van &#x60;InvoiceDocuments&#x60; (optional)
     * @param  bool $include_child_invoice_ids Optionele parameter (default false) waardoor het response-object van verzamelfacturen voorzien kan worden van &#x60;ChildInvoiceIds&#x60; (optional)
     * @param  bool $include_corrected_invoice_ids Optionele parameter (default false) waardoor het response-object voorzien kan worden van &#x60;CorrectedInvoiceIds&#x60; (optional)
     * @param  string $company_label_id Optionele parameter (default null) waarmee de factuur horende bij een specifieke Label opgehaald kan worden (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice
     */
    public function sysInvoicesByNumber($invoice_number, $include_documents = null, $include_child_invoice_ids = null, $include_corrected_invoice_ids = null, $company_label_id = null)
    {
        list($response) = $this->sysInvoicesByNumberWithHttpInfo($invoice_number, $include_documents, $include_child_invoice_ids, $include_corrected_invoice_ids, $company_label_id);
        return $response;
    }

    /**
     * Operation sysInvoicesByNumberWithHttpInfo
     *
     * Haal een specifieke factuur op (op basis van factuurnummer)
     *
     * @param  string $invoice_number Het factuurnummer (required)
     * @param  bool $include_documents Optionele parameter (default false) waardoor het response-object voorzien kan worden van &#x60;InvoiceDocuments&#x60; (optional)
     * @param  bool $include_child_invoice_ids Optionele parameter (default false) waardoor het response-object van verzamelfacturen voorzien kan worden van &#x60;ChildInvoiceIds&#x60; (optional)
     * @param  bool $include_corrected_invoice_ids Optionele parameter (default false) waardoor het response-object voorzien kan worden van &#x60;CorrectedInvoiceIds&#x60; (optional)
     * @param  string $company_label_id Optionele parameter (default null) waarmee de factuur horende bij een specifieke Label opgehaald kan worden (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysInvoicesByNumberWithHttpInfo($invoice_number, $include_documents = null, $include_child_invoice_ids = null, $include_corrected_invoice_ids = null, $company_label_id = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice';
        $request = $this->sysInvoicesByNumberRequest($invoice_number, $include_documents, $include_child_invoice_ids, $include_corrected_invoice_ids, $company_label_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysInvoicesByNumberAsync
     *
     * Haal een specifieke factuur op (op basis van factuurnummer)
     *
     * @param  string $invoice_number Het factuurnummer (required)
     * @param  bool $include_documents Optionele parameter (default false) waardoor het response-object voorzien kan worden van &#x60;InvoiceDocuments&#x60; (optional)
     * @param  bool $include_child_invoice_ids Optionele parameter (default false) waardoor het response-object van verzamelfacturen voorzien kan worden van &#x60;ChildInvoiceIds&#x60; (optional)
     * @param  bool $include_corrected_invoice_ids Optionele parameter (default false) waardoor het response-object voorzien kan worden van &#x60;CorrectedInvoiceIds&#x60; (optional)
     * @param  string $company_label_id Optionele parameter (default null) waarmee de factuur horende bij een specifieke Label opgehaald kan worden (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesByNumberAsync($invoice_number, $include_documents = null, $include_child_invoice_ids = null, $include_corrected_invoice_ids = null, $company_label_id = null)
    {
        return $this->sysInvoicesByNumberAsyncWithHttpInfo($invoice_number, $include_documents, $include_child_invoice_ids, $include_corrected_invoice_ids, $company_label_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysInvoicesByNumberAsyncWithHttpInfo
     *
     * Haal een specifieke factuur op (op basis van factuurnummer)
     *
     * @param  string $invoice_number Het factuurnummer (required)
     * @param  bool $include_documents Optionele parameter (default false) waardoor het response-object voorzien kan worden van &#x60;InvoiceDocuments&#x60; (optional)
     * @param  bool $include_child_invoice_ids Optionele parameter (default false) waardoor het response-object van verzamelfacturen voorzien kan worden van &#x60;ChildInvoiceIds&#x60; (optional)
     * @param  bool $include_corrected_invoice_ids Optionele parameter (default false) waardoor het response-object voorzien kan worden van &#x60;CorrectedInvoiceIds&#x60; (optional)
     * @param  string $company_label_id Optionele parameter (default null) waarmee de factuur horende bij een specifieke Label opgehaald kan worden (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesByNumberAsyncWithHttpInfo($invoice_number, $include_documents = null, $include_child_invoice_ids = null, $include_corrected_invoice_ids = null, $company_label_id = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice';
        $request = $this->sysInvoicesByNumberRequest($invoice_number, $include_documents, $include_child_invoice_ids, $include_corrected_invoice_ids, $company_label_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysInvoicesByNumber'
     *
     * @param  string $invoice_number Het factuurnummer (required)
     * @param  bool $include_documents Optionele parameter (default false) waardoor het response-object voorzien kan worden van &#x60;InvoiceDocuments&#x60; (optional)
     * @param  bool $include_child_invoice_ids Optionele parameter (default false) waardoor het response-object van verzamelfacturen voorzien kan worden van &#x60;ChildInvoiceIds&#x60; (optional)
     * @param  bool $include_corrected_invoice_ids Optionele parameter (default false) waardoor het response-object voorzien kan worden van &#x60;CorrectedInvoiceIds&#x60; (optional)
     * @param  string $company_label_id Optionele parameter (default null) waarmee de factuur horende bij een specifieke Label opgehaald kan worden (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysInvoicesByNumberRequest($invoice_number, $include_documents = null, $include_child_invoice_ids = null, $include_corrected_invoice_ids = null, $company_label_id = null)
    {
        // verify the required parameter 'invoice_number' is set
        if ($invoice_number === null || (is_array($invoice_number) && count($invoice_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_number when calling sysInvoicesByNumber'
            );
        }

        $resourcePath = '/sysapi/v1.0/invoices/bynumber/{invoiceNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_documents !== null) {
            $queryParams['includeDocuments'] = ObjectSerializer::toQueryValue($include_documents);
        }
        // query params
        if ($include_child_invoice_ids !== null) {
            $queryParams['includeChildInvoiceIds'] = ObjectSerializer::toQueryValue($include_child_invoice_ids);
        }
        // query params
        if ($include_corrected_invoice_ids !== null) {
            $queryParams['includeCorrectedInvoiceIds'] = ObjectSerializer::toQueryValue($include_corrected_invoice_ids);
        }
        // query params
        if ($company_label_id !== null) {
            $queryParams['companyLabelId'] = ObjectSerializer::toQueryValue($company_label_id);
        }

        // path params
        if ($invoice_number !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceNumber' . '}',
                ObjectSerializer::toPathValue($invoice_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysInvoicesCalculateExpectedSettlementInvoice
     *
     * Berekend en haalt de verwachte jaarafrekening voor een specifiek cluster op
     *
     * @param  string $organization_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiExpectedSettlementInvoicePostData $expected_invoice_post_data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiExpectedSettlementInvoiceResult
     */
    public function sysInvoicesCalculateExpectedSettlementInvoice($organization_id, $expected_invoice_post_data)
    {
        list($response) = $this->sysInvoicesCalculateExpectedSettlementInvoiceWithHttpInfo($organization_id, $expected_invoice_post_data);
        return $response;
    }

    /**
     * Operation sysInvoicesCalculateExpectedSettlementInvoiceWithHttpInfo
     *
     * Berekend en haalt de verwachte jaarafrekening voor een specifiek cluster op
     *
     * @param  string $organization_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiExpectedSettlementInvoicePostData $expected_invoice_post_data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiExpectedSettlementInvoiceResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysInvoicesCalculateExpectedSettlementInvoiceWithHttpInfo($organization_id, $expected_invoice_post_data)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiExpectedSettlementInvoiceResult';
        $request = $this->sysInvoicesCalculateExpectedSettlementInvoiceRequest($organization_id, $expected_invoice_post_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiExpectedSettlementInvoiceResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysInvoicesCalculateExpectedSettlementInvoiceAsync
     *
     * Berekend en haalt de verwachte jaarafrekening voor een specifiek cluster op
     *
     * @param  string $organization_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiExpectedSettlementInvoicePostData $expected_invoice_post_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesCalculateExpectedSettlementInvoiceAsync($organization_id, $expected_invoice_post_data)
    {
        return $this->sysInvoicesCalculateExpectedSettlementInvoiceAsyncWithHttpInfo($organization_id, $expected_invoice_post_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysInvoicesCalculateExpectedSettlementInvoiceAsyncWithHttpInfo
     *
     * Berekend en haalt de verwachte jaarafrekening voor een specifiek cluster op
     *
     * @param  string $organization_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiExpectedSettlementInvoicePostData $expected_invoice_post_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesCalculateExpectedSettlementInvoiceAsyncWithHttpInfo($organization_id, $expected_invoice_post_data)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiExpectedSettlementInvoiceResult';
        $request = $this->sysInvoicesCalculateExpectedSettlementInvoiceRequest($organization_id, $expected_invoice_post_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysInvoicesCalculateExpectedSettlementInvoice'
     *
     * @param  string $organization_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiExpectedSettlementInvoicePostData $expected_invoice_post_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysInvoicesCalculateExpectedSettlementInvoiceRequest($organization_id, $expected_invoice_post_data)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysInvoicesCalculateExpectedSettlementInvoice'
            );
        }
        // verify the required parameter 'expected_invoice_post_data' is set
        if ($expected_invoice_post_data === null || (is_array($expected_invoice_post_data) && count($expected_invoice_post_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expected_invoice_post_data when calling sysInvoicesCalculateExpectedSettlementInvoice'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/invoices/calculateexpectedsettlement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($expected_invoice_post_data)) {
            $_tempBody = $expected_invoice_post_data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysInvoicesCredit
     *
     * Voorschot-, borg- of afrekenfactuur crediteren
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiCreditInvoicePostData $invoice_post_data De request-body, zie het object-model voor meer informatie (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysInvoicesCredit($invoice_id, $organization_id, $invoice_post_data)
    {
        list($response) = $this->sysInvoicesCreditWithHttpInfo($invoice_id, $organization_id, $invoice_post_data);
        return $response;
    }

    /**
     * Operation sysInvoicesCreditWithHttpInfo
     *
     * Voorschot-, borg- of afrekenfactuur crediteren
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiCreditInvoicePostData $invoice_post_data De request-body, zie het object-model voor meer informatie (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysInvoicesCreditWithHttpInfo($invoice_id, $organization_id, $invoice_post_data)
    {
        $returnType = 'object';
        $request = $this->sysInvoicesCreditRequest($invoice_id, $organization_id, $invoice_post_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysInvoicesCreditAsync
     *
     * Voorschot-, borg- of afrekenfactuur crediteren
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiCreditInvoicePostData $invoice_post_data De request-body, zie het object-model voor meer informatie (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesCreditAsync($invoice_id, $organization_id, $invoice_post_data)
    {
        return $this->sysInvoicesCreditAsyncWithHttpInfo($invoice_id, $organization_id, $invoice_post_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysInvoicesCreditAsyncWithHttpInfo
     *
     * Voorschot-, borg- of afrekenfactuur crediteren
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiCreditInvoicePostData $invoice_post_data De request-body, zie het object-model voor meer informatie (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesCreditAsyncWithHttpInfo($invoice_id, $organization_id, $invoice_post_data)
    {
        $returnType = 'object';
        $request = $this->sysInvoicesCreditRequest($invoice_id, $organization_id, $invoice_post_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysInvoicesCredit'
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiCreditInvoicePostData $invoice_post_data De request-body, zie het object-model voor meer informatie (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysInvoicesCreditRequest($invoice_id, $organization_id, $invoice_post_data)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling sysInvoicesCredit'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysInvoicesCredit'
            );
        }
        // verify the required parameter 'invoice_post_data' is set
        if ($invoice_post_data === null || (is_array($invoice_post_data) && count($invoice_post_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_post_data when calling sysInvoicesCredit'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/invoices/{invoiceId}/credit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($invoice_post_data)) {
            $_tempBody = $invoice_post_data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysInvoicesDownloadRemitReport
     *
     * Download Remit Report voor een factuur
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysInvoicesDownloadRemitReport($organization_id, $invoice_id)
    {
        list($response) = $this->sysInvoicesDownloadRemitReportWithHttpInfo($organization_id, $invoice_id);
        return $response;
    }

    /**
     * Operation sysInvoicesDownloadRemitReportWithHttpInfo
     *
     * Download Remit Report voor een factuur
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysInvoicesDownloadRemitReportWithHttpInfo($organization_id, $invoice_id)
    {
        $returnType = 'object';
        $request = $this->sysInvoicesDownloadRemitReportRequest($organization_id, $invoice_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysInvoicesDownloadRemitReportAsync
     *
     * Download Remit Report voor een factuur
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesDownloadRemitReportAsync($organization_id, $invoice_id)
    {
        return $this->sysInvoicesDownloadRemitReportAsyncWithHttpInfo($organization_id, $invoice_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysInvoicesDownloadRemitReportAsyncWithHttpInfo
     *
     * Download Remit Report voor een factuur
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesDownloadRemitReportAsyncWithHttpInfo($organization_id, $invoice_id)
    {
        $returnType = 'object';
        $request = $this->sysInvoicesDownloadRemitReportRequest($organization_id, $invoice_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysInvoicesDownloadRemitReport'
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysInvoicesDownloadRemitReportRequest($organization_id, $invoice_id)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysInvoicesDownloadRemitReport'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling sysInvoicesDownloadRemitReport'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/invoices/{invoiceId}/downloadremitreport';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysInvoicesDownloadSingleInvoice
     *
     * Download factuurdocument van een specifieke factuur
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $document_type Optioneel documenttype (default leeg) waarmee geforceerd kan worden welk document wordt teruggegeven (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysInvoicesDownloadSingleInvoice($invoice_id, $organization_id, $document_type = null)
    {
        list($response) = $this->sysInvoicesDownloadSingleInvoiceWithHttpInfo($invoice_id, $organization_id, $document_type);
        return $response;
    }

    /**
     * Operation sysInvoicesDownloadSingleInvoiceWithHttpInfo
     *
     * Download factuurdocument van een specifieke factuur
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $document_type Optioneel documenttype (default leeg) waarmee geforceerd kan worden welk document wordt teruggegeven (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysInvoicesDownloadSingleInvoiceWithHttpInfo($invoice_id, $organization_id, $document_type = null)
    {
        $returnType = 'object';
        $request = $this->sysInvoicesDownloadSingleInvoiceRequest($invoice_id, $organization_id, $document_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysInvoicesDownloadSingleInvoiceAsync
     *
     * Download factuurdocument van een specifieke factuur
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $document_type Optioneel documenttype (default leeg) waarmee geforceerd kan worden welk document wordt teruggegeven (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesDownloadSingleInvoiceAsync($invoice_id, $organization_id, $document_type = null)
    {
        return $this->sysInvoicesDownloadSingleInvoiceAsyncWithHttpInfo($invoice_id, $organization_id, $document_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysInvoicesDownloadSingleInvoiceAsyncWithHttpInfo
     *
     * Download factuurdocument van een specifieke factuur
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $document_type Optioneel documenttype (default leeg) waarmee geforceerd kan worden welk document wordt teruggegeven (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesDownloadSingleInvoiceAsyncWithHttpInfo($invoice_id, $organization_id, $document_type = null)
    {
        $returnType = 'object';
        $request = $this->sysInvoicesDownloadSingleInvoiceRequest($invoice_id, $organization_id, $document_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysInvoicesDownloadSingleInvoice'
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $document_type Optioneel documenttype (default leeg) waarmee geforceerd kan worden welk document wordt teruggegeven (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysInvoicesDownloadSingleInvoiceRequest($invoice_id, $organization_id, $document_type = null)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling sysInvoicesDownloadSingleInvoice'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysInvoicesDownloadSingleInvoice'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/invoices/{invoiceId}/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($document_type !== null) {
            $queryParams['documentType'] = ObjectSerializer::toQueryValue($document_type);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysInvoicesGet
     *
     * Haal facturen van een specifieke klant op (op basis van InvoiceId)
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  bool $only_complete Optionele parameter (default true) waarmee woorkomen kan worden dat facturen die nog in een workflow zitten worden geretourneerd (optional)
     * @param  bool $include_documents Optionele parameter (default false) waardoor het response-object voorzien kan worden &#x60;InvoiceDocuments&#x60; (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice[]
     */
    public function sysInvoicesGet($organization_id, $only_complete = null, $include_documents = null)
    {
        list($response) = $this->sysInvoicesGetWithHttpInfo($organization_id, $only_complete, $include_documents);
        return $response;
    }

    /**
     * Operation sysInvoicesGetWithHttpInfo
     *
     * Haal facturen van een specifieke klant op (op basis van InvoiceId)
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  bool $only_complete Optionele parameter (default true) waarmee woorkomen kan worden dat facturen die nog in een workflow zitten worden geretourneerd (optional)
     * @param  bool $include_documents Optionele parameter (default false) waardoor het response-object voorzien kan worden &#x60;InvoiceDocuments&#x60; (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sysInvoicesGetWithHttpInfo($organization_id, $only_complete = null, $include_documents = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice[]';
        $request = $this->sysInvoicesGetRequest($organization_id, $only_complete, $include_documents);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysInvoicesGetAsync
     *
     * Haal facturen van een specifieke klant op (op basis van InvoiceId)
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  bool $only_complete Optionele parameter (default true) waarmee woorkomen kan worden dat facturen die nog in een workflow zitten worden geretourneerd (optional)
     * @param  bool $include_documents Optionele parameter (default false) waardoor het response-object voorzien kan worden &#x60;InvoiceDocuments&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesGetAsync($organization_id, $only_complete = null, $include_documents = null)
    {
        return $this->sysInvoicesGetAsyncWithHttpInfo($organization_id, $only_complete, $include_documents)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysInvoicesGetAsyncWithHttpInfo
     *
     * Haal facturen van een specifieke klant op (op basis van InvoiceId)
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  bool $only_complete Optionele parameter (default true) waarmee woorkomen kan worden dat facturen die nog in een workflow zitten worden geretourneerd (optional)
     * @param  bool $include_documents Optionele parameter (default false) waardoor het response-object voorzien kan worden &#x60;InvoiceDocuments&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesGetAsyncWithHttpInfo($organization_id, $only_complete = null, $include_documents = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice[]';
        $request = $this->sysInvoicesGetRequest($organization_id, $only_complete, $include_documents);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysInvoicesGet'
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  bool $only_complete Optionele parameter (default true) waarmee woorkomen kan worden dat facturen die nog in een workflow zitten worden geretourneerd (optional)
     * @param  bool $include_documents Optionele parameter (default false) waardoor het response-object voorzien kan worden &#x60;InvoiceDocuments&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysInvoicesGetRequest($organization_id, $only_complete = null, $include_documents = null)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysInvoicesGet'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($only_complete !== null) {
            $queryParams['onlyComplete'] = ObjectSerializer::toQueryValue($only_complete);
        }
        // query params
        if ($include_documents !== null) {
            $queryParams['includeDocuments'] = ObjectSerializer::toQueryValue($include_documents);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysInvoicesGetInvoice
     *
     * Haal een specifieke factuur op
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  bool $include_documents Optionele parameter (default false) waardoor het response-object voorzien kan worden van &#x60;InvoiceDocuments&#x60; (optional)
     * @param  bool $include_child_invoice_ids Optionele parameter (default false) waardoor het response-object van verzamelfacturen voorzien kan worden van &#x60;ChildInvoiceIds&#x60; (optional)
     * @param  bool $include_corrected_invoice_ids Optionele parameter (default false) waardoor het response-object voorzien kan worden van &#x60;CorrectedInvoiceIds&#x60; (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice
     */
    public function sysInvoicesGetInvoice($invoice_id, $organization_id, $include_documents = null, $include_child_invoice_ids = null, $include_corrected_invoice_ids = null)
    {
        list($response) = $this->sysInvoicesGetInvoiceWithHttpInfo($invoice_id, $organization_id, $include_documents, $include_child_invoice_ids, $include_corrected_invoice_ids);
        return $response;
    }

    /**
     * Operation sysInvoicesGetInvoiceWithHttpInfo
     *
     * Haal een specifieke factuur op
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  bool $include_documents Optionele parameter (default false) waardoor het response-object voorzien kan worden van &#x60;InvoiceDocuments&#x60; (optional)
     * @param  bool $include_child_invoice_ids Optionele parameter (default false) waardoor het response-object van verzamelfacturen voorzien kan worden van &#x60;ChildInvoiceIds&#x60; (optional)
     * @param  bool $include_corrected_invoice_ids Optionele parameter (default false) waardoor het response-object voorzien kan worden van &#x60;CorrectedInvoiceIds&#x60; (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysInvoicesGetInvoiceWithHttpInfo($invoice_id, $organization_id, $include_documents = null, $include_child_invoice_ids = null, $include_corrected_invoice_ids = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice';
        $request = $this->sysInvoicesGetInvoiceRequest($invoice_id, $organization_id, $include_documents, $include_child_invoice_ids, $include_corrected_invoice_ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysInvoicesGetInvoiceAsync
     *
     * Haal een specifieke factuur op
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  bool $include_documents Optionele parameter (default false) waardoor het response-object voorzien kan worden van &#x60;InvoiceDocuments&#x60; (optional)
     * @param  bool $include_child_invoice_ids Optionele parameter (default false) waardoor het response-object van verzamelfacturen voorzien kan worden van &#x60;ChildInvoiceIds&#x60; (optional)
     * @param  bool $include_corrected_invoice_ids Optionele parameter (default false) waardoor het response-object voorzien kan worden van &#x60;CorrectedInvoiceIds&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesGetInvoiceAsync($invoice_id, $organization_id, $include_documents = null, $include_child_invoice_ids = null, $include_corrected_invoice_ids = null)
    {
        return $this->sysInvoicesGetInvoiceAsyncWithHttpInfo($invoice_id, $organization_id, $include_documents, $include_child_invoice_ids, $include_corrected_invoice_ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysInvoicesGetInvoiceAsyncWithHttpInfo
     *
     * Haal een specifieke factuur op
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  bool $include_documents Optionele parameter (default false) waardoor het response-object voorzien kan worden van &#x60;InvoiceDocuments&#x60; (optional)
     * @param  bool $include_child_invoice_ids Optionele parameter (default false) waardoor het response-object van verzamelfacturen voorzien kan worden van &#x60;ChildInvoiceIds&#x60; (optional)
     * @param  bool $include_corrected_invoice_ids Optionele parameter (default false) waardoor het response-object voorzien kan worden van &#x60;CorrectedInvoiceIds&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesGetInvoiceAsyncWithHttpInfo($invoice_id, $organization_id, $include_documents = null, $include_child_invoice_ids = null, $include_corrected_invoice_ids = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice';
        $request = $this->sysInvoicesGetInvoiceRequest($invoice_id, $organization_id, $include_documents, $include_child_invoice_ids, $include_corrected_invoice_ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysInvoicesGetInvoice'
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  bool $include_documents Optionele parameter (default false) waardoor het response-object voorzien kan worden van &#x60;InvoiceDocuments&#x60; (optional)
     * @param  bool $include_child_invoice_ids Optionele parameter (default false) waardoor het response-object van verzamelfacturen voorzien kan worden van &#x60;ChildInvoiceIds&#x60; (optional)
     * @param  bool $include_corrected_invoice_ids Optionele parameter (default false) waardoor het response-object voorzien kan worden van &#x60;CorrectedInvoiceIds&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysInvoicesGetInvoiceRequest($invoice_id, $organization_id, $include_documents = null, $include_child_invoice_ids = null, $include_corrected_invoice_ids = null)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling sysInvoicesGetInvoice'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysInvoicesGetInvoice'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/invoices/{invoiceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_documents !== null) {
            $queryParams['includeDocuments'] = ObjectSerializer::toQueryValue($include_documents);
        }
        // query params
        if ($include_child_invoice_ids !== null) {
            $queryParams['includeChildInvoiceIds'] = ObjectSerializer::toQueryValue($include_child_invoice_ids);
        }
        // query params
        if ($include_corrected_invoice_ids !== null) {
            $queryParams['includeCorrectedInvoiceIds'] = ObjectSerializer::toQueryValue($include_corrected_invoice_ids);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysInvoicesGetInvoiceReason
     *
     * Vraag de reden op waarom de factuur is aangemaakt
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoiceReasonResult
     */
    public function sysInvoicesGetInvoiceReason($invoice_id)
    {
        list($response) = $this->sysInvoicesGetInvoiceReasonWithHttpInfo($invoice_id);
        return $response;
    }

    /**
     * Operation sysInvoicesGetInvoiceReasonWithHttpInfo
     *
     * Vraag de reden op waarom de factuur is aangemaakt
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoiceReasonResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysInvoicesGetInvoiceReasonWithHttpInfo($invoice_id)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoiceReasonResult';
        $request = $this->sysInvoicesGetInvoiceReasonRequest($invoice_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoiceReasonResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysInvoicesGetInvoiceReasonAsync
     *
     * Vraag de reden op waarom de factuur is aangemaakt
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesGetInvoiceReasonAsync($invoice_id)
    {
        return $this->sysInvoicesGetInvoiceReasonAsyncWithHttpInfo($invoice_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysInvoicesGetInvoiceReasonAsyncWithHttpInfo
     *
     * Vraag de reden op waarom de factuur is aangemaakt
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesGetInvoiceReasonAsyncWithHttpInfo($invoice_id)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoiceReasonResult';
        $request = $this->sysInvoicesGetInvoiceReasonRequest($invoice_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysInvoicesGetInvoiceReason'
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysInvoicesGetInvoiceReasonRequest($invoice_id)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling sysInvoicesGetInvoiceReason'
            );
        }

        $resourcePath = '/sysapi/v1.0/invoices/{invoiceId}/invoicereason';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysInvoicesGetInvoicesByCompany
     *
     * Haal facturen van een een specifieke label op, met factuurnummers hoger dan het meegegeven factuurnummer<br></br>  Fetch invoices with invoice number greater than \"invoiceNumber\" for a company label: \"companyLabelId\"<br></br>      Maximum of 1000 records are returned. Additional calls are needed if more than 1000 records are returned
     *
     * @param  int $invoice_number invoice number (required)
     * @param  string $company_label_id Voor nu verplichte parameter waarmee de factuur horende bij een specifieke Label opgehaald kan worden (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice[]
     */
    public function sysInvoicesGetInvoicesByCompany($invoice_number, $company_label_id = null)
    {
        list($response) = $this->sysInvoicesGetInvoicesByCompanyWithHttpInfo($invoice_number, $company_label_id);
        return $response;
    }

    /**
     * Operation sysInvoicesGetInvoicesByCompanyWithHttpInfo
     *
     * Haal facturen van een een specifieke label op, met factuurnummers hoger dan het meegegeven factuurnummer<br></br>  Fetch invoices with invoice number greater than \"invoiceNumber\" for a company label: \"companyLabelId\"<br></br>      Maximum of 1000 records are returned. Additional calls are needed if more than 1000 records are returned
     *
     * @param  int $invoice_number invoice number (required)
     * @param  string $company_label_id Voor nu verplichte parameter waarmee de factuur horende bij een specifieke Label opgehaald kan worden (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sysInvoicesGetInvoicesByCompanyWithHttpInfo($invoice_number, $company_label_id = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice[]';
        $request = $this->sysInvoicesGetInvoicesByCompanyRequest($invoice_number, $company_label_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysInvoicesGetInvoicesByCompanyAsync
     *
     * Haal facturen van een een specifieke label op, met factuurnummers hoger dan het meegegeven factuurnummer<br></br>  Fetch invoices with invoice number greater than \"invoiceNumber\" for a company label: \"companyLabelId\"<br></br>      Maximum of 1000 records are returned. Additional calls are needed if more than 1000 records are returned
     *
     * @param  int $invoice_number invoice number (required)
     * @param  string $company_label_id Voor nu verplichte parameter waarmee de factuur horende bij een specifieke Label opgehaald kan worden (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesGetInvoicesByCompanyAsync($invoice_number, $company_label_id = null)
    {
        return $this->sysInvoicesGetInvoicesByCompanyAsyncWithHttpInfo($invoice_number, $company_label_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysInvoicesGetInvoicesByCompanyAsyncWithHttpInfo
     *
     * Haal facturen van een een specifieke label op, met factuurnummers hoger dan het meegegeven factuurnummer<br></br>  Fetch invoices with invoice number greater than \"invoiceNumber\" for a company label: \"companyLabelId\"<br></br>      Maximum of 1000 records are returned. Additional calls are needed if more than 1000 records are returned
     *
     * @param  int $invoice_number invoice number (required)
     * @param  string $company_label_id Voor nu verplichte parameter waarmee de factuur horende bij een specifieke Label opgehaald kan worden (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesGetInvoicesByCompanyAsyncWithHttpInfo($invoice_number, $company_label_id = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoice[]';
        $request = $this->sysInvoicesGetInvoicesByCompanyRequest($invoice_number, $company_label_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysInvoicesGetInvoicesByCompany'
     *
     * @param  int $invoice_number invoice number (required)
     * @param  string $company_label_id Voor nu verplichte parameter waarmee de factuur horende bij een specifieke Label opgehaald kan worden (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysInvoicesGetInvoicesByCompanyRequest($invoice_number, $company_label_id = null)
    {
        // verify the required parameter 'invoice_number' is set
        if ($invoice_number === null || (is_array($invoice_number) && count($invoice_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_number when calling sysInvoicesGetInvoicesByCompany'
            );
        }

        $resourcePath = '/sysapi/v1.0/invoices/afternumber/{invoiceNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($company_label_id !== null) {
            $queryParams['companyLabelId'] = ObjectSerializer::toQueryValue($company_label_id);
        }

        // path params
        if ($invoice_number !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceNumber' . '}',
                ObjectSerializer::toPathValue($invoice_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysInvoicesGetInvoicesWithPrettySmaUsages
     *
     * Haal verbruiksregels van een factuur op
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiSmaInvoiceDetails
     */
    public function sysInvoicesGetInvoicesWithPrettySmaUsages($invoice_id, $organization_id)
    {
        list($response) = $this->sysInvoicesGetInvoicesWithPrettySmaUsagesWithHttpInfo($invoice_id, $organization_id);
        return $response;
    }

    /**
     * Operation sysInvoicesGetInvoicesWithPrettySmaUsagesWithHttpInfo
     *
     * Haal verbruiksregels van een factuur op
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiSmaInvoiceDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysInvoicesGetInvoicesWithPrettySmaUsagesWithHttpInfo($invoice_id, $organization_id)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiSmaInvoiceDetails';
        $request = $this->sysInvoicesGetInvoicesWithPrettySmaUsagesRequest($invoice_id, $organization_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiSmaInvoiceDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysInvoicesGetInvoicesWithPrettySmaUsagesAsync
     *
     * Haal verbruiksregels van een factuur op
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesGetInvoicesWithPrettySmaUsagesAsync($invoice_id, $organization_id)
    {
        return $this->sysInvoicesGetInvoicesWithPrettySmaUsagesAsyncWithHttpInfo($invoice_id, $organization_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysInvoicesGetInvoicesWithPrettySmaUsagesAsyncWithHttpInfo
     *
     * Haal verbruiksregels van een factuur op
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesGetInvoicesWithPrettySmaUsagesAsyncWithHttpInfo($invoice_id, $organization_id)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiSmaInvoiceDetails';
        $request = $this->sysInvoicesGetInvoicesWithPrettySmaUsagesRequest($invoice_id, $organization_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysInvoicesGetInvoicesWithPrettySmaUsages'
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysInvoicesGetInvoicesWithPrettySmaUsagesRequest($invoice_id, $organization_id)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling sysInvoicesGetInvoicesWithPrettySmaUsages'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysInvoicesGetInvoicesWithPrettySmaUsages'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/invoices/{invoiceId}/prettyinvoiceusages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysInvoicesGetInvoicesWithSmaUsages
     *
     * Haal verbruiksregels van een factuur op
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoiceUsageCalculationRow[]
     */
    public function sysInvoicesGetInvoicesWithSmaUsages($invoice_id, $organization_id)
    {
        list($response) = $this->sysInvoicesGetInvoicesWithSmaUsagesWithHttpInfo($invoice_id, $organization_id);
        return $response;
    }

    /**
     * Operation sysInvoicesGetInvoicesWithSmaUsagesWithHttpInfo
     *
     * Haal verbruiksregels van een factuur op
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoiceUsageCalculationRow[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sysInvoicesGetInvoicesWithSmaUsagesWithHttpInfo($invoice_id, $organization_id)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoiceUsageCalculationRow[]';
        $request = $this->sysInvoicesGetInvoicesWithSmaUsagesRequest($invoice_id, $organization_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoiceUsageCalculationRow[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysInvoicesGetInvoicesWithSmaUsagesAsync
     *
     * Haal verbruiksregels van een factuur op
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesGetInvoicesWithSmaUsagesAsync($invoice_id, $organization_id)
    {
        return $this->sysInvoicesGetInvoicesWithSmaUsagesAsyncWithHttpInfo($invoice_id, $organization_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysInvoicesGetInvoicesWithSmaUsagesAsyncWithHttpInfo
     *
     * Haal verbruiksregels van een factuur op
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesGetInvoicesWithSmaUsagesAsyncWithHttpInfo($invoice_id, $organization_id)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoiceUsageCalculationRow[]';
        $request = $this->sysInvoicesGetInvoicesWithSmaUsagesRequest($invoice_id, $organization_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysInvoicesGetInvoicesWithSmaUsages'
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysInvoicesGetInvoicesWithSmaUsagesRequest($invoice_id, $organization_id)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling sysInvoicesGetInvoicesWithSmaUsages'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysInvoicesGetInvoicesWithSmaUsages'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/invoices/{invoiceId}/invoiceusages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysInvoicesGetInvoicesWithSmaUsagesV11
     *
     * Haal verbruiksregels van een factuur op
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoiceUsageCalculationResponse[]
     */
    public function sysInvoicesGetInvoicesWithSmaUsagesV11($invoice_id, $organization_id)
    {
        list($response) = $this->sysInvoicesGetInvoicesWithSmaUsagesV11WithHttpInfo($invoice_id, $organization_id);
        return $response;
    }

    /**
     * Operation sysInvoicesGetInvoicesWithSmaUsagesV11WithHttpInfo
     *
     * Haal verbruiksregels van een factuur op
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoiceUsageCalculationResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sysInvoicesGetInvoicesWithSmaUsagesV11WithHttpInfo($invoice_id, $organization_id)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoiceUsageCalculationResponse[]';
        $request = $this->sysInvoicesGetInvoicesWithSmaUsagesV11Request($invoice_id, $organization_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoiceUsageCalculationResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysInvoicesGetInvoicesWithSmaUsagesV11Async
     *
     * Haal verbruiksregels van een factuur op
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesGetInvoicesWithSmaUsagesV11Async($invoice_id, $organization_id)
    {
        return $this->sysInvoicesGetInvoicesWithSmaUsagesV11AsyncWithHttpInfo($invoice_id, $organization_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysInvoicesGetInvoicesWithSmaUsagesV11AsyncWithHttpInfo
     *
     * Haal verbruiksregels van een factuur op
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysInvoicesGetInvoicesWithSmaUsagesV11AsyncWithHttpInfo($invoice_id, $organization_id)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiInvoiceUsageCalculationResponse[]';
        $request = $this->sysInvoicesGetInvoicesWithSmaUsagesV11Request($invoice_id, $organization_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysInvoicesGetInvoicesWithSmaUsagesV11'
     *
     * @param  string $invoice_id Guid van de factuur (Invoice) (required)
     * @param  string $organization_id Guid van de klant (Organization) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysInvoicesGetInvoicesWithSmaUsagesV11Request($invoice_id, $organization_id)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling sysInvoicesGetInvoicesWithSmaUsagesV11'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysInvoicesGetInvoicesWithSmaUsagesV11'
            );
        }

        $resourcePath = '/sysapi/v1.1/organizations/{organizationId}/invoices/{invoiceId}/invoiceusages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
