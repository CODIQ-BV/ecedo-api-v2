<?php
/**
 * SysDebtorApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SysDebtorApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SysDebtorApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sysDebtorDeleteDebtorProperties
     *
     * Verwijder een debiteur-eigenschap
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $debtor_id Guid van de debiteur (Debtor) (required)
     * @param  string $debtor_property Guid van de debiteur-eigenschap (DebtorProperty) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysDebtorDeleteDebtorProperties($organization_id, $debtor_id, $debtor_property)
    {
        list($response) = $this->sysDebtorDeleteDebtorPropertiesWithHttpInfo($organization_id, $debtor_id, $debtor_property);
        return $response;
    }

    /**
     * Operation sysDebtorDeleteDebtorPropertiesWithHttpInfo
     *
     * Verwijder een debiteur-eigenschap
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $debtor_id Guid van de debiteur (Debtor) (required)
     * @param  string $debtor_property Guid van de debiteur-eigenschap (DebtorProperty) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysDebtorDeleteDebtorPropertiesWithHttpInfo($organization_id, $debtor_id, $debtor_property)
    {
        $returnType = 'object';
        $request = $this->sysDebtorDeleteDebtorPropertiesRequest($organization_id, $debtor_id, $debtor_property);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysDebtorDeleteDebtorPropertiesAsync
     *
     * Verwijder een debiteur-eigenschap
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $debtor_id Guid van de debiteur (Debtor) (required)
     * @param  string $debtor_property Guid van de debiteur-eigenschap (DebtorProperty) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysDebtorDeleteDebtorPropertiesAsync($organization_id, $debtor_id, $debtor_property)
    {
        return $this->sysDebtorDeleteDebtorPropertiesAsyncWithHttpInfo($organization_id, $debtor_id, $debtor_property)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysDebtorDeleteDebtorPropertiesAsyncWithHttpInfo
     *
     * Verwijder een debiteur-eigenschap
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $debtor_id Guid van de debiteur (Debtor) (required)
     * @param  string $debtor_property Guid van de debiteur-eigenschap (DebtorProperty) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysDebtorDeleteDebtorPropertiesAsyncWithHttpInfo($organization_id, $debtor_id, $debtor_property)
    {
        $returnType = 'object';
        $request = $this->sysDebtorDeleteDebtorPropertiesRequest($organization_id, $debtor_id, $debtor_property);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysDebtorDeleteDebtorProperties'
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $debtor_id Guid van de debiteur (Debtor) (required)
     * @param  string $debtor_property Guid van de debiteur-eigenschap (DebtorProperty) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysDebtorDeleteDebtorPropertiesRequest($organization_id, $debtor_id, $debtor_property)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysDebtorDeleteDebtorProperties'
            );
        }
        // verify the required parameter 'debtor_id' is set
        if ($debtor_id === null || (is_array($debtor_id) && count($debtor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_id when calling sysDebtorDeleteDebtorProperties'
            );
        }
        // verify the required parameter 'debtor_property' is set
        if ($debtor_property === null || (is_array($debtor_property) && count($debtor_property) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_property when calling sysDebtorDeleteDebtorProperties'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/debtors/{debtorId}/debtorproperties/{debtorProperty}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($debtor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorId' . '}',
                ObjectSerializer::toPathValue($debtor_id),
                $resourcePath
            );
        }
        // path params
        if ($debtor_property !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorProperty' . '}',
                ObjectSerializer::toPathValue($debtor_property),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysDebtorGetDebtorProperties
     *
     * Ophalen van debiteur-eigenschappen
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $debtor_id Guid van de debiteur (Debtor) (required)
     * @param  string $debtor_property Het type van de debiteur-eigenschap (required)
     * @param  bool $include_default Default &#39;false&#39;. Als &#39;true&#39; dan wordt als er geen properties zijn of als de eerste property pas start na het begin het resultaat aangevuld met een property die de default systeemwaarde heeft. Deze property is geen echte property en heeft daarom ook geen DebtorPropertyId. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiDebtorProperty[]
     */
    public function sysDebtorGetDebtorProperties($organization_id, $debtor_id, $debtor_property, $include_default = null)
    {
        list($response) = $this->sysDebtorGetDebtorPropertiesWithHttpInfo($organization_id, $debtor_id, $debtor_property, $include_default);
        return $response;
    }

    /**
     * Operation sysDebtorGetDebtorPropertiesWithHttpInfo
     *
     * Ophalen van debiteur-eigenschappen
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $debtor_id Guid van de debiteur (Debtor) (required)
     * @param  string $debtor_property Het type van de debiteur-eigenschap (required)
     * @param  bool $include_default Default &#39;false&#39;. Als &#39;true&#39; dan wordt als er geen properties zijn of als de eerste property pas start na het begin het resultaat aangevuld met een property die de default systeemwaarde heeft. Deze property is geen echte property en heeft daarom ook geen DebtorPropertyId. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiDebtorProperty[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sysDebtorGetDebtorPropertiesWithHttpInfo($organization_id, $debtor_id, $debtor_property, $include_default = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiDebtorProperty[]';
        $request = $this->sysDebtorGetDebtorPropertiesRequest($organization_id, $debtor_id, $debtor_property, $include_default);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiDebtorProperty[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysDebtorGetDebtorPropertiesAsync
     *
     * Ophalen van debiteur-eigenschappen
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $debtor_id Guid van de debiteur (Debtor) (required)
     * @param  string $debtor_property Het type van de debiteur-eigenschap (required)
     * @param  bool $include_default Default &#39;false&#39;. Als &#39;true&#39; dan wordt als er geen properties zijn of als de eerste property pas start na het begin het resultaat aangevuld met een property die de default systeemwaarde heeft. Deze property is geen echte property en heeft daarom ook geen DebtorPropertyId. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysDebtorGetDebtorPropertiesAsync($organization_id, $debtor_id, $debtor_property, $include_default = null)
    {
        return $this->sysDebtorGetDebtorPropertiesAsyncWithHttpInfo($organization_id, $debtor_id, $debtor_property, $include_default)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysDebtorGetDebtorPropertiesAsyncWithHttpInfo
     *
     * Ophalen van debiteur-eigenschappen
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $debtor_id Guid van de debiteur (Debtor) (required)
     * @param  string $debtor_property Het type van de debiteur-eigenschap (required)
     * @param  bool $include_default Default &#39;false&#39;. Als &#39;true&#39; dan wordt als er geen properties zijn of als de eerste property pas start na het begin het resultaat aangevuld met een property die de default systeemwaarde heeft. Deze property is geen echte property en heeft daarom ook geen DebtorPropertyId. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysDebtorGetDebtorPropertiesAsyncWithHttpInfo($organization_id, $debtor_id, $debtor_property, $include_default = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiDebtorProperty[]';
        $request = $this->sysDebtorGetDebtorPropertiesRequest($organization_id, $debtor_id, $debtor_property, $include_default);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysDebtorGetDebtorProperties'
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $debtor_id Guid van de debiteur (Debtor) (required)
     * @param  string $debtor_property Het type van de debiteur-eigenschap (required)
     * @param  bool $include_default Default &#39;false&#39;. Als &#39;true&#39; dan wordt als er geen properties zijn of als de eerste property pas start na het begin het resultaat aangevuld met een property die de default systeemwaarde heeft. Deze property is geen echte property en heeft daarom ook geen DebtorPropertyId. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysDebtorGetDebtorPropertiesRequest($organization_id, $debtor_id, $debtor_property, $include_default = null)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysDebtorGetDebtorProperties'
            );
        }
        // verify the required parameter 'debtor_id' is set
        if ($debtor_id === null || (is_array($debtor_id) && count($debtor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_id when calling sysDebtorGetDebtorProperties'
            );
        }
        // verify the required parameter 'debtor_property' is set
        if ($debtor_property === null || (is_array($debtor_property) && count($debtor_property) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_property when calling sysDebtorGetDebtorProperties'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/debtors/{debtorId}/debtorproperties/{debtorProperty}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_default !== null) {
            $queryParams['includeDefault'] = ObjectSerializer::toQueryValue($include_default);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($debtor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorId' . '}',
                ObjectSerializer::toPathValue($debtor_id),
                $resourcePath
            );
        }
        // path params
        if ($debtor_property !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorProperty' . '}',
                ObjectSerializer::toPathValue($debtor_property),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysDebtorPostDebtorProperties
     *
     * Instellen van een debiteur-eigenschap
     *
     * @param  string $organization_id  (required)
     * @param  string $debtor_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiDebtorPropertyPostData $debtor_property  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiDebtorPropertyPostResult
     */
    public function sysDebtorPostDebtorProperties($organization_id, $debtor_id, $debtor_property)
    {
        list($response) = $this->sysDebtorPostDebtorPropertiesWithHttpInfo($organization_id, $debtor_id, $debtor_property);
        return $response;
    }

    /**
     * Operation sysDebtorPostDebtorPropertiesWithHttpInfo
     *
     * Instellen van een debiteur-eigenschap
     *
     * @param  string $organization_id  (required)
     * @param  string $debtor_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiDebtorPropertyPostData $debtor_property  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiDebtorPropertyPostResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysDebtorPostDebtorPropertiesWithHttpInfo($organization_id, $debtor_id, $debtor_property)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiDebtorPropertyPostResult';
        $request = $this->sysDebtorPostDebtorPropertiesRequest($organization_id, $debtor_id, $debtor_property);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiDebtorPropertyPostResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysDebtorPostDebtorPropertiesAsync
     *
     * Instellen van een debiteur-eigenschap
     *
     * @param  string $organization_id  (required)
     * @param  string $debtor_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiDebtorPropertyPostData $debtor_property  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysDebtorPostDebtorPropertiesAsync($organization_id, $debtor_id, $debtor_property)
    {
        return $this->sysDebtorPostDebtorPropertiesAsyncWithHttpInfo($organization_id, $debtor_id, $debtor_property)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysDebtorPostDebtorPropertiesAsyncWithHttpInfo
     *
     * Instellen van een debiteur-eigenschap
     *
     * @param  string $organization_id  (required)
     * @param  string $debtor_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiDebtorPropertyPostData $debtor_property  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysDebtorPostDebtorPropertiesAsyncWithHttpInfo($organization_id, $debtor_id, $debtor_property)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiDebtorPropertyPostResult';
        $request = $this->sysDebtorPostDebtorPropertiesRequest($organization_id, $debtor_id, $debtor_property);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysDebtorPostDebtorProperties'
     *
     * @param  string $organization_id  (required)
     * @param  string $debtor_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiDebtorPropertyPostData $debtor_property  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysDebtorPostDebtorPropertiesRequest($organization_id, $debtor_id, $debtor_property)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysDebtorPostDebtorProperties'
            );
        }
        // verify the required parameter 'debtor_id' is set
        if ($debtor_id === null || (is_array($debtor_id) && count($debtor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_id when calling sysDebtorPostDebtorProperties'
            );
        }
        // verify the required parameter 'debtor_property' is set
        if ($debtor_property === null || (is_array($debtor_property) && count($debtor_property) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_property when calling sysDebtorPostDebtorProperties'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/debtors/{debtorId}/debtorproperties';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($debtor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorId' . '}',
                ObjectSerializer::toPathValue($debtor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($debtor_property)) {
            $_tempBody = $debtor_property;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
