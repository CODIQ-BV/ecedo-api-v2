<?php
/**
 * SysMeterReadingsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SysMeterReadingsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SysMeterReadingsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sysMeterReadingsCalculateAnnualStandardUsage
     *
     * Bereken het standaard jaarverbruik (SJV) / Annual Standard Usage
     *
     * @param  string $organization_id Guid van de organisatie (required)
     * @param  string $connection_id Guid van de aansluiting (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiCalculateAnnualStandardUsagePostData $data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiAnnualStandardUsage
     */
    public function sysMeterReadingsCalculateAnnualStandardUsage($organization_id, $connection_id, $data)
    {
        list($response) = $this->sysMeterReadingsCalculateAnnualStandardUsageWithHttpInfo($organization_id, $connection_id, $data);
        return $response;
    }

    /**
     * Operation sysMeterReadingsCalculateAnnualStandardUsageWithHttpInfo
     *
     * Bereken het standaard jaarverbruik (SJV) / Annual Standard Usage
     *
     * @param  string $organization_id Guid van de organisatie (required)
     * @param  string $connection_id Guid van de aansluiting (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiCalculateAnnualStandardUsagePostData $data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiAnnualStandardUsage, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysMeterReadingsCalculateAnnualStandardUsageWithHttpInfo($organization_id, $connection_id, $data)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiAnnualStandardUsage';
        $request = $this->sysMeterReadingsCalculateAnnualStandardUsageRequest($organization_id, $connection_id, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiAnnualStandardUsage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysMeterReadingsCalculateAnnualStandardUsageAsync
     *
     * Bereken het standaard jaarverbruik (SJV) / Annual Standard Usage
     *
     * @param  string $organization_id Guid van de organisatie (required)
     * @param  string $connection_id Guid van de aansluiting (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiCalculateAnnualStandardUsagePostData $data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysMeterReadingsCalculateAnnualStandardUsageAsync($organization_id, $connection_id, $data)
    {
        return $this->sysMeterReadingsCalculateAnnualStandardUsageAsyncWithHttpInfo($organization_id, $connection_id, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysMeterReadingsCalculateAnnualStandardUsageAsyncWithHttpInfo
     *
     * Bereken het standaard jaarverbruik (SJV) / Annual Standard Usage
     *
     * @param  string $organization_id Guid van de organisatie (required)
     * @param  string $connection_id Guid van de aansluiting (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiCalculateAnnualStandardUsagePostData $data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysMeterReadingsCalculateAnnualStandardUsageAsyncWithHttpInfo($organization_id, $connection_id, $data)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiAnnualStandardUsage';
        $request = $this->sysMeterReadingsCalculateAnnualStandardUsageRequest($organization_id, $connection_id, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysMeterReadingsCalculateAnnualStandardUsage'
     *
     * @param  string $organization_id Guid van de organisatie (required)
     * @param  string $connection_id Guid van de aansluiting (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiCalculateAnnualStandardUsagePostData $data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysMeterReadingsCalculateAnnualStandardUsageRequest($organization_id, $connection_id, $data)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysMeterReadingsCalculateAnnualStandardUsage'
            );
        }
        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling sysMeterReadingsCalculateAnnualStandardUsage'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling sysMeterReadingsCalculateAnnualStandardUsage'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/connections/{connectionId}/calculateannualstandardusage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysMeterReadingsCalculatedMeterReading
     *
     * Meterstand berekenen voor een bepaalde datum
     *
     * @param  string $organization_id Guid van de organisatie (required)
     * @param  string $connection_id Guid van de aansluiting (required)
     * @param  \DateTime $reading_date Datum waarvoor de meterstand moet worden berekend (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiCalculatedMeterReading
     */
    public function sysMeterReadingsCalculatedMeterReading($organization_id, $connection_id, $reading_date)
    {
        list($response) = $this->sysMeterReadingsCalculatedMeterReadingWithHttpInfo($organization_id, $connection_id, $reading_date);
        return $response;
    }

    /**
     * Operation sysMeterReadingsCalculatedMeterReadingWithHttpInfo
     *
     * Meterstand berekenen voor een bepaalde datum
     *
     * @param  string $organization_id Guid van de organisatie (required)
     * @param  string $connection_id Guid van de aansluiting (required)
     * @param  \DateTime $reading_date Datum waarvoor de meterstand moet worden berekend (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiCalculatedMeterReading, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysMeterReadingsCalculatedMeterReadingWithHttpInfo($organization_id, $connection_id, $reading_date)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiCalculatedMeterReading';
        $request = $this->sysMeterReadingsCalculatedMeterReadingRequest($organization_id, $connection_id, $reading_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiCalculatedMeterReading',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysMeterReadingsCalculatedMeterReadingAsync
     *
     * Meterstand berekenen voor een bepaalde datum
     *
     * @param  string $organization_id Guid van de organisatie (required)
     * @param  string $connection_id Guid van de aansluiting (required)
     * @param  \DateTime $reading_date Datum waarvoor de meterstand moet worden berekend (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysMeterReadingsCalculatedMeterReadingAsync($organization_id, $connection_id, $reading_date)
    {
        return $this->sysMeterReadingsCalculatedMeterReadingAsyncWithHttpInfo($organization_id, $connection_id, $reading_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysMeterReadingsCalculatedMeterReadingAsyncWithHttpInfo
     *
     * Meterstand berekenen voor een bepaalde datum
     *
     * @param  string $organization_id Guid van de organisatie (required)
     * @param  string $connection_id Guid van de aansluiting (required)
     * @param  \DateTime $reading_date Datum waarvoor de meterstand moet worden berekend (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysMeterReadingsCalculatedMeterReadingAsyncWithHttpInfo($organization_id, $connection_id, $reading_date)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiCalculatedMeterReading';
        $request = $this->sysMeterReadingsCalculatedMeterReadingRequest($organization_id, $connection_id, $reading_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysMeterReadingsCalculatedMeterReading'
     *
     * @param  string $organization_id Guid van de organisatie (required)
     * @param  string $connection_id Guid van de aansluiting (required)
     * @param  \DateTime $reading_date Datum waarvoor de meterstand moet worden berekend (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysMeterReadingsCalculatedMeterReadingRequest($organization_id, $connection_id, $reading_date)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysMeterReadingsCalculatedMeterReading'
            );
        }
        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling sysMeterReadingsCalculatedMeterReading'
            );
        }
        // verify the required parameter 'reading_date' is set
        if ($reading_date === null || (is_array($reading_date) && count($reading_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reading_date when calling sysMeterReadingsCalculatedMeterReading'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/connections/{connectionId}/calculatedmeterreading';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($reading_date !== null) {
            $queryParams['readingDate'] = ObjectSerializer::toQueryValue($reading_date);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysMeterReadingsDeleteUsableMeterReading
     *
     * Verwijderen van een meteropname/meterstand behorende bij een aansluiting
     *
     * @param  string $organization_id Guid van de organisatie (required)
     * @param  string $connection_id Guid van de aansluiting (required)
     * @param  string $meter_reading_id Guid van de meterstand (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysMeterReadingsDeleteUsableMeterReading($organization_id, $connection_id, $meter_reading_id)
    {
        list($response) = $this->sysMeterReadingsDeleteUsableMeterReadingWithHttpInfo($organization_id, $connection_id, $meter_reading_id);
        return $response;
    }

    /**
     * Operation sysMeterReadingsDeleteUsableMeterReadingWithHttpInfo
     *
     * Verwijderen van een meteropname/meterstand behorende bij een aansluiting
     *
     * @param  string $organization_id Guid van de organisatie (required)
     * @param  string $connection_id Guid van de aansluiting (required)
     * @param  string $meter_reading_id Guid van de meterstand (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysMeterReadingsDeleteUsableMeterReadingWithHttpInfo($organization_id, $connection_id, $meter_reading_id)
    {
        $returnType = 'object';
        $request = $this->sysMeterReadingsDeleteUsableMeterReadingRequest($organization_id, $connection_id, $meter_reading_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysMeterReadingsDeleteUsableMeterReadingAsync
     *
     * Verwijderen van een meteropname/meterstand behorende bij een aansluiting
     *
     * @param  string $organization_id Guid van de organisatie (required)
     * @param  string $connection_id Guid van de aansluiting (required)
     * @param  string $meter_reading_id Guid van de meterstand (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysMeterReadingsDeleteUsableMeterReadingAsync($organization_id, $connection_id, $meter_reading_id)
    {
        return $this->sysMeterReadingsDeleteUsableMeterReadingAsyncWithHttpInfo($organization_id, $connection_id, $meter_reading_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysMeterReadingsDeleteUsableMeterReadingAsyncWithHttpInfo
     *
     * Verwijderen van een meteropname/meterstand behorende bij een aansluiting
     *
     * @param  string $organization_id Guid van de organisatie (required)
     * @param  string $connection_id Guid van de aansluiting (required)
     * @param  string $meter_reading_id Guid van de meterstand (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysMeterReadingsDeleteUsableMeterReadingAsyncWithHttpInfo($organization_id, $connection_id, $meter_reading_id)
    {
        $returnType = 'object';
        $request = $this->sysMeterReadingsDeleteUsableMeterReadingRequest($organization_id, $connection_id, $meter_reading_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysMeterReadingsDeleteUsableMeterReading'
     *
     * @param  string $organization_id Guid van de organisatie (required)
     * @param  string $connection_id Guid van de aansluiting (required)
     * @param  string $meter_reading_id Guid van de meterstand (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysMeterReadingsDeleteUsableMeterReadingRequest($organization_id, $connection_id, $meter_reading_id)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysMeterReadingsDeleteUsableMeterReading'
            );
        }
        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling sysMeterReadingsDeleteUsableMeterReading'
            );
        }
        // verify the required parameter 'meter_reading_id' is set
        if ($meter_reading_id === null || (is_array($meter_reading_id) && count($meter_reading_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $meter_reading_id when calling sysMeterReadingsDeleteUsableMeterReading'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/connections/{connectionId}/meterreadings/{meterReadingId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }
        // path params
        if ($meter_reading_id !== null) {
            $resourcePath = str_replace(
                '{' . 'meterReadingId' . '}',
                ObjectSerializer::toPathValue($meter_reading_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysMeterReadingsGetMeterReadingById
     *
     * Meteropname opvragen aan de hand van een meter reading Id.
     *
     * @param  string $organization_id Guid van de organisatie (required)
     * @param  string $connection_id Guid van de aansluiting (required)
     * @param  string $meter_reading_id Guid van de meterstand (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiMeterReading
     */
    public function sysMeterReadingsGetMeterReadingById($organization_id, $connection_id, $meter_reading_id)
    {
        list($response) = $this->sysMeterReadingsGetMeterReadingByIdWithHttpInfo($organization_id, $connection_id, $meter_reading_id);
        return $response;
    }

    /**
     * Operation sysMeterReadingsGetMeterReadingByIdWithHttpInfo
     *
     * Meteropname opvragen aan de hand van een meter reading Id.
     *
     * @param  string $organization_id Guid van de organisatie (required)
     * @param  string $connection_id Guid van de aansluiting (required)
     * @param  string $meter_reading_id Guid van de meterstand (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiMeterReading, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysMeterReadingsGetMeterReadingByIdWithHttpInfo($organization_id, $connection_id, $meter_reading_id)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiMeterReading';
        $request = $this->sysMeterReadingsGetMeterReadingByIdRequest($organization_id, $connection_id, $meter_reading_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiMeterReading',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysMeterReadingsGetMeterReadingByIdAsync
     *
     * Meteropname opvragen aan de hand van een meter reading Id.
     *
     * @param  string $organization_id Guid van de organisatie (required)
     * @param  string $connection_id Guid van de aansluiting (required)
     * @param  string $meter_reading_id Guid van de meterstand (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysMeterReadingsGetMeterReadingByIdAsync($organization_id, $connection_id, $meter_reading_id)
    {
        return $this->sysMeterReadingsGetMeterReadingByIdAsyncWithHttpInfo($organization_id, $connection_id, $meter_reading_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysMeterReadingsGetMeterReadingByIdAsyncWithHttpInfo
     *
     * Meteropname opvragen aan de hand van een meter reading Id.
     *
     * @param  string $organization_id Guid van de organisatie (required)
     * @param  string $connection_id Guid van de aansluiting (required)
     * @param  string $meter_reading_id Guid van de meterstand (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysMeterReadingsGetMeterReadingByIdAsyncWithHttpInfo($organization_id, $connection_id, $meter_reading_id)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiMeterReading';
        $request = $this->sysMeterReadingsGetMeterReadingByIdRequest($organization_id, $connection_id, $meter_reading_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysMeterReadingsGetMeterReadingById'
     *
     * @param  string $organization_id Guid van de organisatie (required)
     * @param  string $connection_id Guid van de aansluiting (required)
     * @param  string $meter_reading_id Guid van de meterstand (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysMeterReadingsGetMeterReadingByIdRequest($organization_id, $connection_id, $meter_reading_id)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysMeterReadingsGetMeterReadingById'
            );
        }
        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling sysMeterReadingsGetMeterReadingById'
            );
        }
        // verify the required parameter 'meter_reading_id' is set
        if ($meter_reading_id === null || (is_array($meter_reading_id) && count($meter_reading_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $meter_reading_id when calling sysMeterReadingsGetMeterReadingById'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/connections/{connectionId}/meterreadings/{meterReadingId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }
        // path params
        if ($meter_reading_id !== null) {
            $resourcePath = str_replace(
                '{' . 'meterReadingId' . '}',
                ObjectSerializer::toPathValue($meter_reading_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysMeterReadingsGetUsableMeterReadings
     *
     * Meerdere (bruikbare) meteropnames/meterstanden opvragen gerelateerd aan een aansluiting.  De niet bruikbare meteropnames zijn in de GUI zichtbaar als 'Niet gebruikt'.
     *
     * @param  string $organization_id Guid van de organisatie (required)
     * @param  string $connection_id Guid van de aansluiting (required)
     * @param  bool $only_usable Met of zonder meteropnames &#39;Niet gebruikt&#39;. Default true (&#x3D; &#39;Zonder&#39;) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiMeterReading[]
     */
    public function sysMeterReadingsGetUsableMeterReadings($organization_id, $connection_id, $only_usable = null)
    {
        list($response) = $this->sysMeterReadingsGetUsableMeterReadingsWithHttpInfo($organization_id, $connection_id, $only_usable);
        return $response;
    }

    /**
     * Operation sysMeterReadingsGetUsableMeterReadingsWithHttpInfo
     *
     * Meerdere (bruikbare) meteropnames/meterstanden opvragen gerelateerd aan een aansluiting.  De niet bruikbare meteropnames zijn in de GUI zichtbaar als 'Niet gebruikt'.
     *
     * @param  string $organization_id Guid van de organisatie (required)
     * @param  string $connection_id Guid van de aansluiting (required)
     * @param  bool $only_usable Met of zonder meteropnames &#39;Niet gebruikt&#39;. Default true (&#x3D; &#39;Zonder&#39;) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiMeterReading[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sysMeterReadingsGetUsableMeterReadingsWithHttpInfo($organization_id, $connection_id, $only_usable = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiMeterReading[]';
        $request = $this->sysMeterReadingsGetUsableMeterReadingsRequest($organization_id, $connection_id, $only_usable);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiMeterReading[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysMeterReadingsGetUsableMeterReadingsAsync
     *
     * Meerdere (bruikbare) meteropnames/meterstanden opvragen gerelateerd aan een aansluiting.  De niet bruikbare meteropnames zijn in de GUI zichtbaar als 'Niet gebruikt'.
     *
     * @param  string $organization_id Guid van de organisatie (required)
     * @param  string $connection_id Guid van de aansluiting (required)
     * @param  bool $only_usable Met of zonder meteropnames &#39;Niet gebruikt&#39;. Default true (&#x3D; &#39;Zonder&#39;) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysMeterReadingsGetUsableMeterReadingsAsync($organization_id, $connection_id, $only_usable = null)
    {
        return $this->sysMeterReadingsGetUsableMeterReadingsAsyncWithHttpInfo($organization_id, $connection_id, $only_usable)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysMeterReadingsGetUsableMeterReadingsAsyncWithHttpInfo
     *
     * Meerdere (bruikbare) meteropnames/meterstanden opvragen gerelateerd aan een aansluiting.  De niet bruikbare meteropnames zijn in de GUI zichtbaar als 'Niet gebruikt'.
     *
     * @param  string $organization_id Guid van de organisatie (required)
     * @param  string $connection_id Guid van de aansluiting (required)
     * @param  bool $only_usable Met of zonder meteropnames &#39;Niet gebruikt&#39;. Default true (&#x3D; &#39;Zonder&#39;) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysMeterReadingsGetUsableMeterReadingsAsyncWithHttpInfo($organization_id, $connection_id, $only_usable = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiMeterReading[]';
        $request = $this->sysMeterReadingsGetUsableMeterReadingsRequest($organization_id, $connection_id, $only_usable);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysMeterReadingsGetUsableMeterReadings'
     *
     * @param  string $organization_id Guid van de organisatie (required)
     * @param  string $connection_id Guid van de aansluiting (required)
     * @param  bool $only_usable Met of zonder meteropnames &#39;Niet gebruikt&#39;. Default true (&#x3D; &#39;Zonder&#39;) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysMeterReadingsGetUsableMeterReadingsRequest($organization_id, $connection_id, $only_usable = null)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysMeterReadingsGetUsableMeterReadings'
            );
        }
        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling sysMeterReadingsGetUsableMeterReadings'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/connections/{connectionId}/meterreadings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($only_usable !== null) {
            $queryParams['onlyUsable'] = ObjectSerializer::toQueryValue($only_usable);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysMeterReadingsPostNewMeterReading
     *
     * Meteropname insturen.
     *
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiMeterReadingPostData $meter_reading  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysMeterReadingsPostNewMeterReading($meter_reading)
    {
        list($response) = $this->sysMeterReadingsPostNewMeterReadingWithHttpInfo($meter_reading);
        return $response;
    }

    /**
     * Operation sysMeterReadingsPostNewMeterReadingWithHttpInfo
     *
     * Meteropname insturen.
     *
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiMeterReadingPostData $meter_reading  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysMeterReadingsPostNewMeterReadingWithHttpInfo($meter_reading)
    {
        $returnType = 'object';
        $request = $this->sysMeterReadingsPostNewMeterReadingRequest($meter_reading);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysMeterReadingsPostNewMeterReadingAsync
     *
     * Meteropname insturen.
     *
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiMeterReadingPostData $meter_reading  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysMeterReadingsPostNewMeterReadingAsync($meter_reading)
    {
        return $this->sysMeterReadingsPostNewMeterReadingAsyncWithHttpInfo($meter_reading)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysMeterReadingsPostNewMeterReadingAsyncWithHttpInfo
     *
     * Meteropname insturen.
     *
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiMeterReadingPostData $meter_reading  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysMeterReadingsPostNewMeterReadingAsyncWithHttpInfo($meter_reading)
    {
        $returnType = 'object';
        $request = $this->sysMeterReadingsPostNewMeterReadingRequest($meter_reading);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysMeterReadingsPostNewMeterReading'
     *
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiMeterReadingPostData $meter_reading  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysMeterReadingsPostNewMeterReadingRequest($meter_reading)
    {
        // verify the required parameter 'meter_reading' is set
        if ($meter_reading === null || (is_array($meter_reading) && count($meter_reading) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $meter_reading when calling sysMeterReadingsPostNewMeterReading'
            );
        }

        $resourcePath = '/sysapi/v1.0/meterreadings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($meter_reading)) {
            $_tempBody = $meter_reading;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
