<?php
/**
 * SysBillingItemsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SysBillingItemsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SysBillingItemsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sysBillingItemsActivate
     *
     * Markeer factuuritem als geactiveerd
     *
     * @param  string $billing_item_id Guid van het factuuritem (BillingItem) (required)
     * @param  string $organization_id organization_id (required)
     * @param  string $comment Optionele reden waarom het factuuritem opnieuw geactiveerd is (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysBillingItemsActivate($billing_item_id, $organization_id, $comment = null)
    {
        list($response) = $this->sysBillingItemsActivateWithHttpInfo($billing_item_id, $organization_id, $comment);
        return $response;
    }

    /**
     * Operation sysBillingItemsActivateWithHttpInfo
     *
     * Markeer factuuritem als geactiveerd
     *
     * @param  string $billing_item_id Guid van het factuuritem (BillingItem) (required)
     * @param  string $organization_id (required)
     * @param  string $comment Optionele reden waarom het factuuritem opnieuw geactiveerd is (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysBillingItemsActivateWithHttpInfo($billing_item_id, $organization_id, $comment = null)
    {
        $returnType = 'object';
        $request = $this->sysBillingItemsActivateRequest($billing_item_id, $organization_id, $comment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysBillingItemsActivateAsync
     *
     * Markeer factuuritem als geactiveerd
     *
     * @param  string $billing_item_id Guid van het factuuritem (BillingItem) (required)
     * @param  string $organization_id (required)
     * @param  string $comment Optionele reden waarom het factuuritem opnieuw geactiveerd is (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysBillingItemsActivateAsync($billing_item_id, $organization_id, $comment = null)
    {
        return $this->sysBillingItemsActivateAsyncWithHttpInfo($billing_item_id, $organization_id, $comment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysBillingItemsActivateAsyncWithHttpInfo
     *
     * Markeer factuuritem als geactiveerd
     *
     * @param  string $billing_item_id Guid van het factuuritem (BillingItem) (required)
     * @param  string $organization_id (required)
     * @param  string $comment Optionele reden waarom het factuuritem opnieuw geactiveerd is (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysBillingItemsActivateAsyncWithHttpInfo($billing_item_id, $organization_id, $comment = null)
    {
        $returnType = 'object';
        $request = $this->sysBillingItemsActivateRequest($billing_item_id, $organization_id, $comment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysBillingItemsActivate'
     *
     * @param  string $billing_item_id Guid van het factuuritem (BillingItem) (required)
     * @param  string $organization_id (required)
     * @param  string $comment Optionele reden waarom het factuuritem opnieuw geactiveerd is (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysBillingItemsActivateRequest($billing_item_id, $organization_id, $comment = null)
    {
        // verify the required parameter 'billing_item_id' is set
        if ($billing_item_id === null || (is_array($billing_item_id) && count($billing_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_item_id when calling sysBillingItemsActivate'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysBillingItemsActivate'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/billingitems/{billingItemId}/activate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($comment !== null) {
            $queryParams['comment'] = ObjectSerializer::toQueryValue($comment);
        }

        // path params
        if ($billing_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'billingItemId' . '}',
                ObjectSerializer::toPathValue($billing_item_id),
                $resourcePath
            );
        }
        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysBillingItemsCancel
     *
     * Markeer factuuritem als gedeactiveerd
     *
     * @param  string $billing_item_id Guid van het factuuritem (BillingItem) (required)
     * @param  string $comment Verplichte reden waarom het factuuritem geannuleerd is (required)
     * @param  string $organization_id organization_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysBillingItemsCancel($billing_item_id, $comment, $organization_id)
    {
        list($response) = $this->sysBillingItemsCancelWithHttpInfo($billing_item_id, $comment, $organization_id);
        return $response;
    }

    /**
     * Operation sysBillingItemsCancelWithHttpInfo
     *
     * Markeer factuuritem als gedeactiveerd
     *
     * @param  string $billing_item_id Guid van het factuuritem (BillingItem) (required)
     * @param  string $comment Verplichte reden waarom het factuuritem geannuleerd is (required)
     * @param  string $organization_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysBillingItemsCancelWithHttpInfo($billing_item_id, $comment, $organization_id)
    {
        $returnType = 'object';
        $request = $this->sysBillingItemsCancelRequest($billing_item_id, $comment, $organization_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysBillingItemsCancelAsync
     *
     * Markeer factuuritem als gedeactiveerd
     *
     * @param  string $billing_item_id Guid van het factuuritem (BillingItem) (required)
     * @param  string $comment Verplichte reden waarom het factuuritem geannuleerd is (required)
     * @param  string $organization_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysBillingItemsCancelAsync($billing_item_id, $comment, $organization_id)
    {
        return $this->sysBillingItemsCancelAsyncWithHttpInfo($billing_item_id, $comment, $organization_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysBillingItemsCancelAsyncWithHttpInfo
     *
     * Markeer factuuritem als gedeactiveerd
     *
     * @param  string $billing_item_id Guid van het factuuritem (BillingItem) (required)
     * @param  string $comment Verplichte reden waarom het factuuritem geannuleerd is (required)
     * @param  string $organization_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysBillingItemsCancelAsyncWithHttpInfo($billing_item_id, $comment, $organization_id)
    {
        $returnType = 'object';
        $request = $this->sysBillingItemsCancelRequest($billing_item_id, $comment, $organization_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysBillingItemsCancel'
     *
     * @param  string $billing_item_id Guid van het factuuritem (BillingItem) (required)
     * @param  string $comment Verplichte reden waarom het factuuritem geannuleerd is (required)
     * @param  string $organization_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysBillingItemsCancelRequest($billing_item_id, $comment, $organization_id)
    {
        // verify the required parameter 'billing_item_id' is set
        if ($billing_item_id === null || (is_array($billing_item_id) && count($billing_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_item_id when calling sysBillingItemsCancel'
            );
        }
        // verify the required parameter 'comment' is set
        if ($comment === null || (is_array($comment) && count($comment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $comment when calling sysBillingItemsCancel'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysBillingItemsCancel'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/billingitems/{billingItemId}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($comment !== null) {
            $queryParams['comment'] = ObjectSerializer::toQueryValue($comment);
        }

        // path params
        if ($billing_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'billingItemId' . '}',
                ObjectSerializer::toPathValue($billing_item_id),
                $resourcePath
            );
        }
        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysBillingItemsDelete
     *
     * Markeer factuuritem als verwijderd
     *
     * @param  string $billing_item_id Guid van het factuuritem (BillingItem) (required)
     * @param  string $organization_id organization_id (required)
     * @param  string $comment Optionele reden waarom het factuuritem is verwijderd (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysBillingItemsDelete($billing_item_id, $organization_id, $comment = null)
    {
        list($response) = $this->sysBillingItemsDeleteWithHttpInfo($billing_item_id, $organization_id, $comment);
        return $response;
    }

    /**
     * Operation sysBillingItemsDeleteWithHttpInfo
     *
     * Markeer factuuritem als verwijderd
     *
     * @param  string $billing_item_id Guid van het factuuritem (BillingItem) (required)
     * @param  string $organization_id (required)
     * @param  string $comment Optionele reden waarom het factuuritem is verwijderd (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysBillingItemsDeleteWithHttpInfo($billing_item_id, $organization_id, $comment = null)
    {
        $returnType = 'object';
        $request = $this->sysBillingItemsDeleteRequest($billing_item_id, $organization_id, $comment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysBillingItemsDeleteAsync
     *
     * Markeer factuuritem als verwijderd
     *
     * @param  string $billing_item_id Guid van het factuuritem (BillingItem) (required)
     * @param  string $organization_id (required)
     * @param  string $comment Optionele reden waarom het factuuritem is verwijderd (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysBillingItemsDeleteAsync($billing_item_id, $organization_id, $comment = null)
    {
        return $this->sysBillingItemsDeleteAsyncWithHttpInfo($billing_item_id, $organization_id, $comment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysBillingItemsDeleteAsyncWithHttpInfo
     *
     * Markeer factuuritem als verwijderd
     *
     * @param  string $billing_item_id Guid van het factuuritem (BillingItem) (required)
     * @param  string $organization_id (required)
     * @param  string $comment Optionele reden waarom het factuuritem is verwijderd (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysBillingItemsDeleteAsyncWithHttpInfo($billing_item_id, $organization_id, $comment = null)
    {
        $returnType = 'object';
        $request = $this->sysBillingItemsDeleteRequest($billing_item_id, $organization_id, $comment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysBillingItemsDelete'
     *
     * @param  string $billing_item_id Guid van het factuuritem (BillingItem) (required)
     * @param  string $organization_id (required)
     * @param  string $comment Optionele reden waarom het factuuritem is verwijderd (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysBillingItemsDeleteRequest($billing_item_id, $organization_id, $comment = null)
    {
        // verify the required parameter 'billing_item_id' is set
        if ($billing_item_id === null || (is_array($billing_item_id) && count($billing_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_item_id when calling sysBillingItemsDelete'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysBillingItemsDelete'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/billingitems/{billingItemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($comment !== null) {
            $queryParams['comment'] = ObjectSerializer::toQueryValue($comment);
        }

        // path params
        if ($billing_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'billingItemId' . '}',
                ObjectSerializer::toPathValue($billing_item_id),
                $resourcePath
            );
        }
        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysBillingItemsGetBillingItemGroups
     *
     * Haal factuuritemgroepen op
     *
     * @param  \DateTime $start_date Hierdoor worden alleen factuuritemgroepen teruggegeven die geldig (actief) zijn vanaf de opgegeven datum (optional)
     * @param  \DateTime $end_date Hierdoor worden alleen factuuritemgroepen teruggegeven die geldig (actief) zijn tot de opgegeven datum (optional)
     * @param  \DateTime $valid_on Hierdoor worden alleen factuuritemgroepen teruggegeven die geldig (actief) zijn op de opgegeven datum (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItemGroup[]
     */
    public function sysBillingItemsGetBillingItemGroups($start_date = null, $end_date = null, $valid_on = null)
    {
        list($response) = $this->sysBillingItemsGetBillingItemGroupsWithHttpInfo($start_date, $end_date, $valid_on);
        return $response;
    }

    /**
     * Operation sysBillingItemsGetBillingItemGroupsWithHttpInfo
     *
     * Haal factuuritemgroepen op
     *
     * @param  \DateTime $start_date Hierdoor worden alleen factuuritemgroepen teruggegeven die geldig (actief) zijn vanaf de opgegeven datum (optional)
     * @param  \DateTime $end_date Hierdoor worden alleen factuuritemgroepen teruggegeven die geldig (actief) zijn tot de opgegeven datum (optional)
     * @param  \DateTime $valid_on Hierdoor worden alleen factuuritemgroepen teruggegeven die geldig (actief) zijn op de opgegeven datum (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItemGroup[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sysBillingItemsGetBillingItemGroupsWithHttpInfo($start_date = null, $end_date = null, $valid_on = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItemGroup[]';
        $request = $this->sysBillingItemsGetBillingItemGroupsRequest($start_date, $end_date, $valid_on);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItemGroup[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysBillingItemsGetBillingItemGroupsAsync
     *
     * Haal factuuritemgroepen op
     *
     * @param  \DateTime $start_date Hierdoor worden alleen factuuritemgroepen teruggegeven die geldig (actief) zijn vanaf de opgegeven datum (optional)
     * @param  \DateTime $end_date Hierdoor worden alleen factuuritemgroepen teruggegeven die geldig (actief) zijn tot de opgegeven datum (optional)
     * @param  \DateTime $valid_on Hierdoor worden alleen factuuritemgroepen teruggegeven die geldig (actief) zijn op de opgegeven datum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysBillingItemsGetBillingItemGroupsAsync($start_date = null, $end_date = null, $valid_on = null)
    {
        return $this->sysBillingItemsGetBillingItemGroupsAsyncWithHttpInfo($start_date, $end_date, $valid_on)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysBillingItemsGetBillingItemGroupsAsyncWithHttpInfo
     *
     * Haal factuuritemgroepen op
     *
     * @param  \DateTime $start_date Hierdoor worden alleen factuuritemgroepen teruggegeven die geldig (actief) zijn vanaf de opgegeven datum (optional)
     * @param  \DateTime $end_date Hierdoor worden alleen factuuritemgroepen teruggegeven die geldig (actief) zijn tot de opgegeven datum (optional)
     * @param  \DateTime $valid_on Hierdoor worden alleen factuuritemgroepen teruggegeven die geldig (actief) zijn op de opgegeven datum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysBillingItemsGetBillingItemGroupsAsyncWithHttpInfo($start_date = null, $end_date = null, $valid_on = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItemGroup[]';
        $request = $this->sysBillingItemsGetBillingItemGroupsRequest($start_date, $end_date, $valid_on);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysBillingItemsGetBillingItemGroups'
     *
     * @param  \DateTime $start_date Hierdoor worden alleen factuuritemgroepen teruggegeven die geldig (actief) zijn vanaf de opgegeven datum (optional)
     * @param  \DateTime $end_date Hierdoor worden alleen factuuritemgroepen teruggegeven die geldig (actief) zijn tot de opgegeven datum (optional)
     * @param  \DateTime $valid_on Hierdoor worden alleen factuuritemgroepen teruggegeven die geldig (actief) zijn op de opgegeven datum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysBillingItemsGetBillingItemGroupsRequest($start_date = null, $end_date = null, $valid_on = null)
    {

        $resourcePath = '/sysapi/v1.0/billingItemGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_date !== null) {
            $queryParams['startDate'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($valid_on !== null) {
            $queryParams['validOn'] = ObjectSerializer::toQueryValue($valid_on);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysBillingItemsGetByBillingItemId
     *
     * @param  string $organization_id organization_id (required)
     * @param  string $billing_item_id billing_item_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItem
     */
    public function sysBillingItemsGetByBillingItemId($organization_id, $billing_item_id)
    {
        list($response) = $this->sysBillingItemsGetByBillingItemIdWithHttpInfo($organization_id, $billing_item_id);
        return $response;
    }

    /**
     * Operation sysBillingItemsGetByBillingItemIdWithHttpInfo
     *
     * @param  string $organization_id (required)
     * @param  string $billing_item_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysBillingItemsGetByBillingItemIdWithHttpInfo($organization_id, $billing_item_id)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItem';
        $request = $this->sysBillingItemsGetByBillingItemIdRequest($organization_id, $billing_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysBillingItemsGetByBillingItemIdAsync
     *
     * 
     *
     * @param  string $organization_id (required)
     * @param  string $billing_item_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysBillingItemsGetByBillingItemIdAsync($organization_id, $billing_item_id)
    {
        return $this->sysBillingItemsGetByBillingItemIdAsyncWithHttpInfo($organization_id, $billing_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysBillingItemsGetByBillingItemIdAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization_id (required)
     * @param  string $billing_item_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysBillingItemsGetByBillingItemIdAsyncWithHttpInfo($organization_id, $billing_item_id)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItem';
        $request = $this->sysBillingItemsGetByBillingItemIdRequest($organization_id, $billing_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysBillingItemsGetByBillingItemId'
     *
     * @param  string $organization_id (required)
     * @param  string $billing_item_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysBillingItemsGetByBillingItemIdRequest($organization_id, $billing_item_id)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysBillingItemsGetByBillingItemId'
            );
        }
        // verify the required parameter 'billing_item_id' is set
        if ($billing_item_id === null || (is_array($billing_item_id) && count($billing_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_item_id when calling sysBillingItemsGetByBillingItemId'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/billingitems/{billingItemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($billing_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'billingItemId' . '}',
                ObjectSerializer::toPathValue($billing_item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysBillingItemsGetByOrganizationId
     *
     * Haal factuuritems van een specifieke klant op
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $external_reference Een factuuritem kan aangemaakt worden met een externalReference. Als deze parameter gevuld is worden alleen factuuritems teruggegeven met een identieke externalReference (optional)
     * @param  string $status Hierdoor worden alleen factuuritems teruggegevens met deze specifieke status (optional)
     * @param  string $sub_type Hierdoor worden alleen factuuritems teruggegevens met dit specifieke subtype (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItem[]
     */
    public function sysBillingItemsGetByOrganizationId($organization_id, $external_reference = null, $status = null, $sub_type = null)
    {
        list($response) = $this->sysBillingItemsGetByOrganizationIdWithHttpInfo($organization_id, $external_reference, $status, $sub_type);
        return $response;
    }

    /**
     * Operation sysBillingItemsGetByOrganizationIdWithHttpInfo
     *
     * Haal factuuritems van een specifieke klant op
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $external_reference Een factuuritem kan aangemaakt worden met een externalReference. Als deze parameter gevuld is worden alleen factuuritems teruggegeven met een identieke externalReference (optional)
     * @param  string $status Hierdoor worden alleen factuuritems teruggegevens met deze specifieke status (optional)
     * @param  string $sub_type Hierdoor worden alleen factuuritems teruggegevens met dit specifieke subtype (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sysBillingItemsGetByOrganizationIdWithHttpInfo($organization_id, $external_reference = null, $status = null, $sub_type = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItem[]';
        $request = $this->sysBillingItemsGetByOrganizationIdRequest($organization_id, $external_reference, $status, $sub_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysBillingItemsGetByOrganizationIdAsync
     *
     * Haal factuuritems van een specifieke klant op
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $external_reference Een factuuritem kan aangemaakt worden met een externalReference. Als deze parameter gevuld is worden alleen factuuritems teruggegeven met een identieke externalReference (optional)
     * @param  string $status Hierdoor worden alleen factuuritems teruggegevens met deze specifieke status (optional)
     * @param  string $sub_type Hierdoor worden alleen factuuritems teruggegevens met dit specifieke subtype (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysBillingItemsGetByOrganizationIdAsync($organization_id, $external_reference = null, $status = null, $sub_type = null)
    {
        return $this->sysBillingItemsGetByOrganizationIdAsyncWithHttpInfo($organization_id, $external_reference, $status, $sub_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysBillingItemsGetByOrganizationIdAsyncWithHttpInfo
     *
     * Haal factuuritems van een specifieke klant op
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $external_reference Een factuuritem kan aangemaakt worden met een externalReference. Als deze parameter gevuld is worden alleen factuuritems teruggegeven met een identieke externalReference (optional)
     * @param  string $status Hierdoor worden alleen factuuritems teruggegevens met deze specifieke status (optional)
     * @param  string $sub_type Hierdoor worden alleen factuuritems teruggegevens met dit specifieke subtype (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysBillingItemsGetByOrganizationIdAsyncWithHttpInfo($organization_id, $external_reference = null, $status = null, $sub_type = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItem[]';
        $request = $this->sysBillingItemsGetByOrganizationIdRequest($organization_id, $external_reference, $status, $sub_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysBillingItemsGetByOrganizationId'
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $external_reference Een factuuritem kan aangemaakt worden met een externalReference. Als deze parameter gevuld is worden alleen factuuritems teruggegeven met een identieke externalReference (optional)
     * @param  string $status Hierdoor worden alleen factuuritems teruggegevens met deze specifieke status (optional)
     * @param  string $sub_type Hierdoor worden alleen factuuritems teruggegevens met dit specifieke subtype (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysBillingItemsGetByOrganizationIdRequest($organization_id, $external_reference = null, $status = null, $sub_type = null)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysBillingItemsGetByOrganizationId'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/billingitems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($external_reference !== null) {
            $queryParams['externalReference'] = ObjectSerializer::toQueryValue($external_reference);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($sub_type !== null) {
            $queryParams['subType'] = ObjectSerializer::toQueryValue($sub_type);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysBillingItemsPost
     *
     * Nieuw factuuritem aanmaken
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItemPostData $billing_item De data van het factuuritem, zie het object-model voor meer informatie (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItemPostResult
     */
    public function sysBillingItemsPost($organization_id, $billing_item)
    {
        list($response) = $this->sysBillingItemsPostWithHttpInfo($organization_id, $billing_item);
        return $response;
    }

    /**
     * Operation sysBillingItemsPostWithHttpInfo
     *
     * Nieuw factuuritem aanmaken
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItemPostData $billing_item De data van het factuuritem, zie het object-model voor meer informatie (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItemPostResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysBillingItemsPostWithHttpInfo($organization_id, $billing_item)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItemPostResult';
        $request = $this->sysBillingItemsPostRequest($organization_id, $billing_item);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItemPostResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysBillingItemsPostAsync
     *
     * Nieuw factuuritem aanmaken
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItemPostData $billing_item De data van het factuuritem, zie het object-model voor meer informatie (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysBillingItemsPostAsync($organization_id, $billing_item)
    {
        return $this->sysBillingItemsPostAsyncWithHttpInfo($organization_id, $billing_item)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysBillingItemsPostAsyncWithHttpInfo
     *
     * Nieuw factuuritem aanmaken
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItemPostData $billing_item De data van het factuuritem, zie het object-model voor meer informatie (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysBillingItemsPostAsyncWithHttpInfo($organization_id, $billing_item)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItemPostResult';
        $request = $this->sysBillingItemsPostRequest($organization_id, $billing_item);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysBillingItemsPost'
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItemPostData $billing_item De data van het factuuritem, zie het object-model voor meer informatie (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysBillingItemsPostRequest($organization_id, $billing_item)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysBillingItemsPost'
            );
        }
        // verify the required parameter 'billing_item' is set
        if ($billing_item === null || (is_array($billing_item) && count($billing_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_item when calling sysBillingItemsPost'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/billingitems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($billing_item)) {
            $_tempBody = $billing_item;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysBillingItemsPut
     *
     * Wijzig een specifiek factuuritem
     *
     * @param  string $billing_item_id Guid van het factuuritem (BillingItem) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItemPutData $billing_item De data van het factuuritem, zie het object-model voor meer informatie (required)
     * @param  string $organization_id organization_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysBillingItemsPut($billing_item_id, $billing_item, $organization_id)
    {
        list($response) = $this->sysBillingItemsPutWithHttpInfo($billing_item_id, $billing_item, $organization_id);
        return $response;
    }

    /**
     * Operation sysBillingItemsPutWithHttpInfo
     *
     * Wijzig een specifiek factuuritem
     *
     * @param  string $billing_item_id Guid van het factuuritem (BillingItem) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItemPutData $billing_item De data van het factuuritem, zie het object-model voor meer informatie (required)
     * @param  string $organization_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysBillingItemsPutWithHttpInfo($billing_item_id, $billing_item, $organization_id)
    {
        $returnType = 'object';
        $request = $this->sysBillingItemsPutRequest($billing_item_id, $billing_item, $organization_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysBillingItemsPutAsync
     *
     * Wijzig een specifiek factuuritem
     *
     * @param  string $billing_item_id Guid van het factuuritem (BillingItem) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItemPutData $billing_item De data van het factuuritem, zie het object-model voor meer informatie (required)
     * @param  string $organization_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysBillingItemsPutAsync($billing_item_id, $billing_item, $organization_id)
    {
        return $this->sysBillingItemsPutAsyncWithHttpInfo($billing_item_id, $billing_item, $organization_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysBillingItemsPutAsyncWithHttpInfo
     *
     * Wijzig een specifiek factuuritem
     *
     * @param  string $billing_item_id Guid van het factuuritem (BillingItem) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItemPutData $billing_item De data van het factuuritem, zie het object-model voor meer informatie (required)
     * @param  string $organization_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysBillingItemsPutAsyncWithHttpInfo($billing_item_id, $billing_item, $organization_id)
    {
        $returnType = 'object';
        $request = $this->sysBillingItemsPutRequest($billing_item_id, $billing_item, $organization_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysBillingItemsPut'
     *
     * @param  string $billing_item_id Guid van het factuuritem (BillingItem) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiBillingItemPutData $billing_item De data van het factuuritem, zie het object-model voor meer informatie (required)
     * @param  string $organization_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysBillingItemsPutRequest($billing_item_id, $billing_item, $organization_id)
    {
        // verify the required parameter 'billing_item_id' is set
        if ($billing_item_id === null || (is_array($billing_item_id) && count($billing_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_item_id when calling sysBillingItemsPut'
            );
        }
        // verify the required parameter 'billing_item' is set
        if ($billing_item === null || (is_array($billing_item) && count($billing_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_item when calling sysBillingItemsPut'
            );
        }
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysBillingItemsPut'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/billingitems/{billingItemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($billing_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'billingItemId' . '}',
                ObjectSerializer::toPathValue($billing_item_id),
                $resourcePath
            );
        }
        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($billing_item)) {
            $_tempBody = $billing_item;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
