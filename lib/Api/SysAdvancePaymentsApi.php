<?php
/**
 * SysAdvancePaymentsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SysAdvancePaymentsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SysAdvancePaymentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sysAdvancePaymentsDelete
     *
     * Voorschot verwijderen
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $advance_payment_id Guid van het voorschot (AdvancePayment) (required)
     * @param  bool $reactivate_previous_advance_payment Geeft aan of het voorgaande voorschot opnieuw geactiveerd moet worden (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysAdvancePaymentsDelete($organization_id, $advance_payment_id, $reactivate_previous_advance_payment = null)
    {
        list($response) = $this->sysAdvancePaymentsDeleteWithHttpInfo($organization_id, $advance_payment_id, $reactivate_previous_advance_payment);
        return $response;
    }

    /**
     * Operation sysAdvancePaymentsDeleteWithHttpInfo
     *
     * Voorschot verwijderen
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $advance_payment_id Guid van het voorschot (AdvancePayment) (required)
     * @param  bool $reactivate_previous_advance_payment Geeft aan of het voorgaande voorschot opnieuw geactiveerd moet worden (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysAdvancePaymentsDeleteWithHttpInfo($organization_id, $advance_payment_id, $reactivate_previous_advance_payment = null)
    {
        $returnType = 'object';
        $request = $this->sysAdvancePaymentsDeleteRequest($organization_id, $advance_payment_id, $reactivate_previous_advance_payment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysAdvancePaymentsDeleteAsync
     *
     * Voorschot verwijderen
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $advance_payment_id Guid van het voorschot (AdvancePayment) (required)
     * @param  bool $reactivate_previous_advance_payment Geeft aan of het voorgaande voorschot opnieuw geactiveerd moet worden (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysAdvancePaymentsDeleteAsync($organization_id, $advance_payment_id, $reactivate_previous_advance_payment = null)
    {
        return $this->sysAdvancePaymentsDeleteAsyncWithHttpInfo($organization_id, $advance_payment_id, $reactivate_previous_advance_payment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysAdvancePaymentsDeleteAsyncWithHttpInfo
     *
     * Voorschot verwijderen
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $advance_payment_id Guid van het voorschot (AdvancePayment) (required)
     * @param  bool $reactivate_previous_advance_payment Geeft aan of het voorgaande voorschot opnieuw geactiveerd moet worden (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysAdvancePaymentsDeleteAsyncWithHttpInfo($organization_id, $advance_payment_id, $reactivate_previous_advance_payment = null)
    {
        $returnType = 'object';
        $request = $this->sysAdvancePaymentsDeleteRequest($organization_id, $advance_payment_id, $reactivate_previous_advance_payment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysAdvancePaymentsDelete'
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $advance_payment_id Guid van het voorschot (AdvancePayment) (required)
     * @param  bool $reactivate_previous_advance_payment Geeft aan of het voorgaande voorschot opnieuw geactiveerd moet worden (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysAdvancePaymentsDeleteRequest($organization_id, $advance_payment_id, $reactivate_previous_advance_payment = null)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysAdvancePaymentsDelete'
            );
        }
        // verify the required parameter 'advance_payment_id' is set
        if ($advance_payment_id === null || (is_array($advance_payment_id) && count($advance_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advance_payment_id when calling sysAdvancePaymentsDelete'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/advancepayments/{advancePaymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($reactivate_previous_advance_payment !== null) {
            $queryParams['reactivatePreviousAdvancePayment'] = ObjectSerializer::toQueryValue($reactivate_previous_advance_payment);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($advance_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advancePaymentId' . '}',
                ObjectSerializer::toPathValue($advance_payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysAdvancePaymentsGetAgreedAmountSupported
     *
     * Opvragen of het is toegestaan om een afgesproken voorschot bedrag in te stellen
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $cluster_reference Cluster referentie (required)
     * @param  \DateTime $start_date (optioneel) Voorschotmaand; als deze niet wordt meegegeven dan wordt de eerstmogelijke startdatum van een nieuw voorschot bepaald en gebruikt (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiAgreedAmountSupportedResult
     */
    public function sysAdvancePaymentsGetAgreedAmountSupported($organization_id, $cluster_reference, $start_date = null)
    {
        list($response) = $this->sysAdvancePaymentsGetAgreedAmountSupportedWithHttpInfo($organization_id, $cluster_reference, $start_date);
        return $response;
    }

    /**
     * Operation sysAdvancePaymentsGetAgreedAmountSupportedWithHttpInfo
     *
     * Opvragen of het is toegestaan om een afgesproken voorschot bedrag in te stellen
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $cluster_reference Cluster referentie (required)
     * @param  \DateTime $start_date (optioneel) Voorschotmaand; als deze niet wordt meegegeven dan wordt de eerstmogelijke startdatum van een nieuw voorschot bepaald en gebruikt (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiAgreedAmountSupportedResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysAdvancePaymentsGetAgreedAmountSupportedWithHttpInfo($organization_id, $cluster_reference, $start_date = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiAgreedAmountSupportedResult';
        $request = $this->sysAdvancePaymentsGetAgreedAmountSupportedRequest($organization_id, $cluster_reference, $start_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiAgreedAmountSupportedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysAdvancePaymentsGetAgreedAmountSupportedAsync
     *
     * Opvragen of het is toegestaan om een afgesproken voorschot bedrag in te stellen
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $cluster_reference Cluster referentie (required)
     * @param  \DateTime $start_date (optioneel) Voorschotmaand; als deze niet wordt meegegeven dan wordt de eerstmogelijke startdatum van een nieuw voorschot bepaald en gebruikt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysAdvancePaymentsGetAgreedAmountSupportedAsync($organization_id, $cluster_reference, $start_date = null)
    {
        return $this->sysAdvancePaymentsGetAgreedAmountSupportedAsyncWithHttpInfo($organization_id, $cluster_reference, $start_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysAdvancePaymentsGetAgreedAmountSupportedAsyncWithHttpInfo
     *
     * Opvragen of het is toegestaan om een afgesproken voorschot bedrag in te stellen
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $cluster_reference Cluster referentie (required)
     * @param  \DateTime $start_date (optioneel) Voorschotmaand; als deze niet wordt meegegeven dan wordt de eerstmogelijke startdatum van een nieuw voorschot bepaald en gebruikt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysAdvancePaymentsGetAgreedAmountSupportedAsyncWithHttpInfo($organization_id, $cluster_reference, $start_date = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiAgreedAmountSupportedResult';
        $request = $this->sysAdvancePaymentsGetAgreedAmountSupportedRequest($organization_id, $cluster_reference, $start_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysAdvancePaymentsGetAgreedAmountSupported'
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $cluster_reference Cluster referentie (required)
     * @param  \DateTime $start_date (optioneel) Voorschotmaand; als deze niet wordt meegegeven dan wordt de eerstmogelijke startdatum van een nieuw voorschot bepaald en gebruikt (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysAdvancePaymentsGetAgreedAmountSupportedRequest($organization_id, $cluster_reference, $start_date = null)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysAdvancePaymentsGetAgreedAmountSupported'
            );
        }
        // verify the required parameter 'cluster_reference' is set
        if ($cluster_reference === null || (is_array($cluster_reference) && count($cluster_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cluster_reference when calling sysAdvancePaymentsGetAgreedAmountSupported'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/advancepayments/{clusterReference}/agreedamountsupported';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_date !== null) {
            $queryParams['startDate'] = ObjectSerializer::toQueryValue($start_date);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($cluster_reference !== null) {
            $resourcePath = str_replace(
                '{' . 'clusterReference' . '}',
                ObjectSerializer::toPathValue($cluster_reference),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysAdvancePaymentsGetByAdvancePaymentId
     *
     * Haal specifiek voorschot op
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $advance_payment_id Guid van het voorschot (AdvancePayment) (required)
     * @param  bool $include_connection_details Default false. Vult het MarketSegment wanneer true, maar gaan ten koste van performance (optional)
     * @param  bool $do_combine_rows Default false. Zie Implementation Notes voor meer informatie (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePayment
     */
    public function sysAdvancePaymentsGetByAdvancePaymentId($organization_id, $advance_payment_id, $include_connection_details = null, $do_combine_rows = null)
    {
        list($response) = $this->sysAdvancePaymentsGetByAdvancePaymentIdWithHttpInfo($organization_id, $advance_payment_id, $include_connection_details, $do_combine_rows);
        return $response;
    }

    /**
     * Operation sysAdvancePaymentsGetByAdvancePaymentIdWithHttpInfo
     *
     * Haal specifiek voorschot op
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $advance_payment_id Guid van het voorschot (AdvancePayment) (required)
     * @param  bool $include_connection_details Default false. Vult het MarketSegment wanneer true, maar gaan ten koste van performance (optional)
     * @param  bool $do_combine_rows Default false. Zie Implementation Notes voor meer informatie (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePayment, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysAdvancePaymentsGetByAdvancePaymentIdWithHttpInfo($organization_id, $advance_payment_id, $include_connection_details = null, $do_combine_rows = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePayment';
        $request = $this->sysAdvancePaymentsGetByAdvancePaymentIdRequest($organization_id, $advance_payment_id, $include_connection_details, $do_combine_rows);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePayment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysAdvancePaymentsGetByAdvancePaymentIdAsync
     *
     * Haal specifiek voorschot op
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $advance_payment_id Guid van het voorschot (AdvancePayment) (required)
     * @param  bool $include_connection_details Default false. Vult het MarketSegment wanneer true, maar gaan ten koste van performance (optional)
     * @param  bool $do_combine_rows Default false. Zie Implementation Notes voor meer informatie (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysAdvancePaymentsGetByAdvancePaymentIdAsync($organization_id, $advance_payment_id, $include_connection_details = null, $do_combine_rows = null)
    {
        return $this->sysAdvancePaymentsGetByAdvancePaymentIdAsyncWithHttpInfo($organization_id, $advance_payment_id, $include_connection_details, $do_combine_rows)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysAdvancePaymentsGetByAdvancePaymentIdAsyncWithHttpInfo
     *
     * Haal specifiek voorschot op
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $advance_payment_id Guid van het voorschot (AdvancePayment) (required)
     * @param  bool $include_connection_details Default false. Vult het MarketSegment wanneer true, maar gaan ten koste van performance (optional)
     * @param  bool $do_combine_rows Default false. Zie Implementation Notes voor meer informatie (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysAdvancePaymentsGetByAdvancePaymentIdAsyncWithHttpInfo($organization_id, $advance_payment_id, $include_connection_details = null, $do_combine_rows = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePayment';
        $request = $this->sysAdvancePaymentsGetByAdvancePaymentIdRequest($organization_id, $advance_payment_id, $include_connection_details, $do_combine_rows);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysAdvancePaymentsGetByAdvancePaymentId'
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $advance_payment_id Guid van het voorschot (AdvancePayment) (required)
     * @param  bool $include_connection_details Default false. Vult het MarketSegment wanneer true, maar gaan ten koste van performance (optional)
     * @param  bool $do_combine_rows Default false. Zie Implementation Notes voor meer informatie (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysAdvancePaymentsGetByAdvancePaymentIdRequest($organization_id, $advance_payment_id, $include_connection_details = null, $do_combine_rows = null)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysAdvancePaymentsGetByAdvancePaymentId'
            );
        }
        // verify the required parameter 'advance_payment_id' is set
        if ($advance_payment_id === null || (is_array($advance_payment_id) && count($advance_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advance_payment_id when calling sysAdvancePaymentsGetByAdvancePaymentId'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/advancepayments/{advancePaymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_connection_details !== null) {
            $queryParams['includeConnectionDetails'] = ObjectSerializer::toQueryValue($include_connection_details);
        }
        // query params
        if ($do_combine_rows !== null) {
            $queryParams['doCombineRows'] = ObjectSerializer::toQueryValue($do_combine_rows);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($advance_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advancePaymentId' . '}',
                ObjectSerializer::toPathValue($advance_payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysAdvancePaymentsGetByOrganizationId
     *
     * Haal voorschotten van een specifieke klant op
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $cluster_reference Optioneel filter om alleen de voorschotten van dit cluster op te vragen (optional)
     * @param  bool $include_connection_details Default false. Vult het MarketSegment wanneer true, maar gaan ten koste van performance (optional)
     * @param  bool $do_combine_rows Default false. Zie Implementation Notes voor meer informatie (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePayment[]
     */
    public function sysAdvancePaymentsGetByOrganizationId($organization_id, $cluster_reference = null, $include_connection_details = null, $do_combine_rows = null)
    {
        list($response) = $this->sysAdvancePaymentsGetByOrganizationIdWithHttpInfo($organization_id, $cluster_reference, $include_connection_details, $do_combine_rows);
        return $response;
    }

    /**
     * Operation sysAdvancePaymentsGetByOrganizationIdWithHttpInfo
     *
     * Haal voorschotten van een specifieke klant op
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $cluster_reference Optioneel filter om alleen de voorschotten van dit cluster op te vragen (optional)
     * @param  bool $include_connection_details Default false. Vult het MarketSegment wanneer true, maar gaan ten koste van performance (optional)
     * @param  bool $do_combine_rows Default false. Zie Implementation Notes voor meer informatie (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePayment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sysAdvancePaymentsGetByOrganizationIdWithHttpInfo($organization_id, $cluster_reference = null, $include_connection_details = null, $do_combine_rows = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePayment[]';
        $request = $this->sysAdvancePaymentsGetByOrganizationIdRequest($organization_id, $cluster_reference, $include_connection_details, $do_combine_rows);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePayment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysAdvancePaymentsGetByOrganizationIdAsync
     *
     * Haal voorschotten van een specifieke klant op
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $cluster_reference Optioneel filter om alleen de voorschotten van dit cluster op te vragen (optional)
     * @param  bool $include_connection_details Default false. Vult het MarketSegment wanneer true, maar gaan ten koste van performance (optional)
     * @param  bool $do_combine_rows Default false. Zie Implementation Notes voor meer informatie (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysAdvancePaymentsGetByOrganizationIdAsync($organization_id, $cluster_reference = null, $include_connection_details = null, $do_combine_rows = null)
    {
        return $this->sysAdvancePaymentsGetByOrganizationIdAsyncWithHttpInfo($organization_id, $cluster_reference, $include_connection_details, $do_combine_rows)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysAdvancePaymentsGetByOrganizationIdAsyncWithHttpInfo
     *
     * Haal voorschotten van een specifieke klant op
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $cluster_reference Optioneel filter om alleen de voorschotten van dit cluster op te vragen (optional)
     * @param  bool $include_connection_details Default false. Vult het MarketSegment wanneer true, maar gaan ten koste van performance (optional)
     * @param  bool $do_combine_rows Default false. Zie Implementation Notes voor meer informatie (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysAdvancePaymentsGetByOrganizationIdAsyncWithHttpInfo($organization_id, $cluster_reference = null, $include_connection_details = null, $do_combine_rows = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePayment[]';
        $request = $this->sysAdvancePaymentsGetByOrganizationIdRequest($organization_id, $cluster_reference, $include_connection_details, $do_combine_rows);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysAdvancePaymentsGetByOrganizationId'
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $cluster_reference Optioneel filter om alleen de voorschotten van dit cluster op te vragen (optional)
     * @param  bool $include_connection_details Default false. Vult het MarketSegment wanneer true, maar gaan ten koste van performance (optional)
     * @param  bool $do_combine_rows Default false. Zie Implementation Notes voor meer informatie (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysAdvancePaymentsGetByOrganizationIdRequest($organization_id, $cluster_reference = null, $include_connection_details = null, $do_combine_rows = null)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysAdvancePaymentsGetByOrganizationId'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/advancepayments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cluster_reference !== null) {
            $queryParams['clusterReference'] = ObjectSerializer::toQueryValue($cluster_reference);
        }
        // query params
        if ($include_connection_details !== null) {
            $queryParams['includeConnectionDetails'] = ObjectSerializer::toQueryValue($include_connection_details);
        }
        // query params
        if ($do_combine_rows !== null) {
            $queryParams['doCombineRows'] = ObjectSerializer::toQueryValue($do_combine_rows);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysAdvancePaymentsPost
     *
     * Nieuw voorschot aanmaken
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePaymentPostData $post_data Informatie over het nieuwe voorschot (&#39;Amount&#39; veld is deprecated; gebruik in plaats hiervan &#39;AgreedAmount&#39;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePayment
     */
    public function sysAdvancePaymentsPost($organization_id, $post_data)
    {
        list($response) = $this->sysAdvancePaymentsPostWithHttpInfo($organization_id, $post_data);
        return $response;
    }

    /**
     * Operation sysAdvancePaymentsPostWithHttpInfo
     *
     * Nieuw voorschot aanmaken
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePaymentPostData $post_data Informatie over het nieuwe voorschot (&#39;Amount&#39; veld is deprecated; gebruik in plaats hiervan &#39;AgreedAmount&#39;) (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePayment, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysAdvancePaymentsPostWithHttpInfo($organization_id, $post_data)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePayment';
        $request = $this->sysAdvancePaymentsPostRequest($organization_id, $post_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePayment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysAdvancePaymentsPostAsync
     *
     * Nieuw voorschot aanmaken
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePaymentPostData $post_data Informatie over het nieuwe voorschot (&#39;Amount&#39; veld is deprecated; gebruik in plaats hiervan &#39;AgreedAmount&#39;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysAdvancePaymentsPostAsync($organization_id, $post_data)
    {
        return $this->sysAdvancePaymentsPostAsyncWithHttpInfo($organization_id, $post_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysAdvancePaymentsPostAsyncWithHttpInfo
     *
     * Nieuw voorschot aanmaken
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePaymentPostData $post_data Informatie over het nieuwe voorschot (&#39;Amount&#39; veld is deprecated; gebruik in plaats hiervan &#39;AgreedAmount&#39;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysAdvancePaymentsPostAsyncWithHttpInfo($organization_id, $post_data)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePayment';
        $request = $this->sysAdvancePaymentsPostRequest($organization_id, $post_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysAdvancePaymentsPost'
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePaymentPostData $post_data Informatie over het nieuwe voorschot (&#39;Amount&#39; veld is deprecated; gebruik in plaats hiervan &#39;AgreedAmount&#39;) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysAdvancePaymentsPostRequest($organization_id, $post_data)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysAdvancePaymentsPost'
            );
        }
        // verify the required parameter 'post_data' is set
        if ($post_data === null || (is_array($post_data) && count($post_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_data when calling sysAdvancePaymentsPost'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/advancepayments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($post_data)) {
            $_tempBody = $post_data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysAdvancePaymentsPut
     *
     * Voorschot wijzigen
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $advance_payment_id Guid van het voorschot (AdvancePayment) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePaymentPutData $put_data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysAdvancePaymentsPut($organization_id, $advance_payment_id, $put_data)
    {
        list($response) = $this->sysAdvancePaymentsPutWithHttpInfo($organization_id, $advance_payment_id, $put_data);
        return $response;
    }

    /**
     * Operation sysAdvancePaymentsPutWithHttpInfo
     *
     * Voorschot wijzigen
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $advance_payment_id Guid van het voorschot (AdvancePayment) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePaymentPutData $put_data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysAdvancePaymentsPutWithHttpInfo($organization_id, $advance_payment_id, $put_data)
    {
        $returnType = 'object';
        $request = $this->sysAdvancePaymentsPutRequest($organization_id, $advance_payment_id, $put_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysAdvancePaymentsPutAsync
     *
     * Voorschot wijzigen
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $advance_payment_id Guid van het voorschot (AdvancePayment) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePaymentPutData $put_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysAdvancePaymentsPutAsync($organization_id, $advance_payment_id, $put_data)
    {
        return $this->sysAdvancePaymentsPutAsyncWithHttpInfo($organization_id, $advance_payment_id, $put_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysAdvancePaymentsPutAsyncWithHttpInfo
     *
     * Voorschot wijzigen
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $advance_payment_id Guid van het voorschot (AdvancePayment) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePaymentPutData $put_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysAdvancePaymentsPutAsyncWithHttpInfo($organization_id, $advance_payment_id, $put_data)
    {
        $returnType = 'object';
        $request = $this->sysAdvancePaymentsPutRequest($organization_id, $advance_payment_id, $put_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysAdvancePaymentsPut'
     *
     * @param  string $organization_id Guid van de klant (Organization) (required)
     * @param  string $advance_payment_id Guid van het voorschot (AdvancePayment) (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiAdvancePaymentPutData $put_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysAdvancePaymentsPutRequest($organization_id, $advance_payment_id, $put_data)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysAdvancePaymentsPut'
            );
        }
        // verify the required parameter 'advance_payment_id' is set
        if ($advance_payment_id === null || (is_array($advance_payment_id) && count($advance_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advance_payment_id when calling sysAdvancePaymentsPut'
            );
        }
        // verify the required parameter 'put_data' is set
        if ($put_data === null || (is_array($put_data) && count($put_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $put_data when calling sysAdvancePaymentsPut'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/advancepayments/{advancePaymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($advance_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advancePaymentId' . '}',
                ObjectSerializer::toPathValue($advance_payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($put_data)) {
            $_tempBody = $put_data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
