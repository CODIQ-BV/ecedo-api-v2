<?php
/**
 * SysPricesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1-core
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.29
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SysPricesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SysPricesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sysPricesGetByConnection
     *
     * Ophalen van de gecombineernde prijzen geldig op de meegegeven dag voor de aansluiting.
     *
     * @param  string $connection_id Het Id van de aansluiting waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  \DateTime $price_date yyyy-MM-dd; De dag waarvoor de prijzen opgehaald moeten worden. Deze datum moet binnen de een contractperiode van de aansluiting liggen. (required)
     * @param  bool $allow_missing_cap_tar Default ‘false’; Als true dan mag de captar code ontbreken en/of de netwerkkosten. De rest van de prijzen worden dan wel opgeleverd. Als false dan zal de call uitvallen als er geen captar code is en/of de netwerkkosten ontbreken. (optional)
     * @param  string $combine_type Default ‘CombineGroup’; Geeft aan op welke manier de prijzen gegroepeerd moeten worden. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiCombinedPricesResult
     */
    public function sysPricesGetByConnection($connection_id, $price_date, $allow_missing_cap_tar = null, $combine_type = null)
    {
        list($response) = $this->sysPricesGetByConnectionWithHttpInfo($connection_id, $price_date, $allow_missing_cap_tar, $combine_type);
        return $response;
    }

    /**
     * Operation sysPricesGetByConnectionWithHttpInfo
     *
     * Ophalen van de gecombineernde prijzen geldig op de meegegeven dag voor de aansluiting.
     *
     * @param  string $connection_id Het Id van de aansluiting waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  \DateTime $price_date yyyy-MM-dd; De dag waarvoor de prijzen opgehaald moeten worden. Deze datum moet binnen de een contractperiode van de aansluiting liggen. (required)
     * @param  bool $allow_missing_cap_tar Default ‘false’; Als true dan mag de captar code ontbreken en/of de netwerkkosten. De rest van de prijzen worden dan wel opgeleverd. Als false dan zal de call uitvallen als er geen captar code is en/of de netwerkkosten ontbreken. (optional)
     * @param  string $combine_type Default ‘CombineGroup’; Geeft aan op welke manier de prijzen gegroepeerd moeten worden. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiCombinedPricesResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysPricesGetByConnectionWithHttpInfo($connection_id, $price_date, $allow_missing_cap_tar = null, $combine_type = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiCombinedPricesResult';
        $request = $this->sysPricesGetByConnectionRequest($connection_id, $price_date, $allow_missing_cap_tar, $combine_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiCombinedPricesResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysPricesGetByConnectionAsync
     *
     * Ophalen van de gecombineernde prijzen geldig op de meegegeven dag voor de aansluiting.
     *
     * @param  string $connection_id Het Id van de aansluiting waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  \DateTime $price_date yyyy-MM-dd; De dag waarvoor de prijzen opgehaald moeten worden. Deze datum moet binnen de een contractperiode van de aansluiting liggen. (required)
     * @param  bool $allow_missing_cap_tar Default ‘false’; Als true dan mag de captar code ontbreken en/of de netwerkkosten. De rest van de prijzen worden dan wel opgeleverd. Als false dan zal de call uitvallen als er geen captar code is en/of de netwerkkosten ontbreken. (optional)
     * @param  string $combine_type Default ‘CombineGroup’; Geeft aan op welke manier de prijzen gegroepeerd moeten worden. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysPricesGetByConnectionAsync($connection_id, $price_date, $allow_missing_cap_tar = null, $combine_type = null)
    {
        return $this->sysPricesGetByConnectionAsyncWithHttpInfo($connection_id, $price_date, $allow_missing_cap_tar, $combine_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysPricesGetByConnectionAsyncWithHttpInfo
     *
     * Ophalen van de gecombineernde prijzen geldig op de meegegeven dag voor de aansluiting.
     *
     * @param  string $connection_id Het Id van de aansluiting waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  \DateTime $price_date yyyy-MM-dd; De dag waarvoor de prijzen opgehaald moeten worden. Deze datum moet binnen de een contractperiode van de aansluiting liggen. (required)
     * @param  bool $allow_missing_cap_tar Default ‘false’; Als true dan mag de captar code ontbreken en/of de netwerkkosten. De rest van de prijzen worden dan wel opgeleverd. Als false dan zal de call uitvallen als er geen captar code is en/of de netwerkkosten ontbreken. (optional)
     * @param  string $combine_type Default ‘CombineGroup’; Geeft aan op welke manier de prijzen gegroepeerd moeten worden. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysPricesGetByConnectionAsyncWithHttpInfo($connection_id, $price_date, $allow_missing_cap_tar = null, $combine_type = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiCombinedPricesResult';
        $request = $this->sysPricesGetByConnectionRequest($connection_id, $price_date, $allow_missing_cap_tar, $combine_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysPricesGetByConnection'
     *
     * @param  string $connection_id Het Id van de aansluiting waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  \DateTime $price_date yyyy-MM-dd; De dag waarvoor de prijzen opgehaald moeten worden. Deze datum moet binnen de een contractperiode van de aansluiting liggen. (required)
     * @param  bool $allow_missing_cap_tar Default ‘false’; Als true dan mag de captar code ontbreken en/of de netwerkkosten. De rest van de prijzen worden dan wel opgeleverd. Als false dan zal de call uitvallen als er geen captar code is en/of de netwerkkosten ontbreken. (optional)
     * @param  string $combine_type Default ‘CombineGroup’; Geeft aan op welke manier de prijzen gegroepeerd moeten worden. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysPricesGetByConnectionRequest($connection_id, $price_date, $allow_missing_cap_tar = null, $combine_type = null)
    {
        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling sysPricesGetByConnection'
            );
        }
        // verify the required parameter 'price_date' is set
        if ($price_date === null || (is_array($price_date) && count($price_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_date when calling sysPricesGetByConnection'
            );
        }

        $resourcePath = '/sysapi/v1.0/prices/energielevering/connections/{connectionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($price_date !== null) {
            $queryParams['priceDate'] = ObjectSerializer::toQueryValue($price_date);
        }
        // query params
        if ($allow_missing_cap_tar !== null) {
            $queryParams['allowMissingCapTar'] = ObjectSerializer::toQueryValue($allow_missing_cap_tar);
        }
        // query params
        if ($combine_type !== null) {
            $queryParams['combineType'] = ObjectSerializer::toQueryValue($combine_type);
        }

        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysPricesGetByContract
     *
     * Ophalen van de gecombineernde prijzen geldig op de meegegeven dag voor de aansluiting horend bij het contract.
     *
     * @param  string $contract_id Het Id van het contract waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  \DateTime $price_date yyyy-MM-dd; De dag waarvoor de prijzen opgehaald moeten worden. Deze datum moet binnen de contractperiode liggen. (required)
     * @param  bool $allow_missing_cap_tar Default ‘false’; Als true dan mag de captar code ontbreken en/of de netwerkkosten. De rest van de prijzen worden dan wel opgeleverd. Als false dan zal de call uitvallen als er geen captar code is en/of de netwerkkosten ontbreken. (optional)
     * @param  string $combine_type Default ‘CombineGroup’; Geeft aan op welke manier de prijzen gegroepeerd moeten worden. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiCombinedPricesResult
     */
    public function sysPricesGetByContract($contract_id, $price_date, $allow_missing_cap_tar = null, $combine_type = null)
    {
        list($response) = $this->sysPricesGetByContractWithHttpInfo($contract_id, $price_date, $allow_missing_cap_tar, $combine_type);
        return $response;
    }

    /**
     * Operation sysPricesGetByContractWithHttpInfo
     *
     * Ophalen van de gecombineernde prijzen geldig op de meegegeven dag voor de aansluiting horend bij het contract.
     *
     * @param  string $contract_id Het Id van het contract waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  \DateTime $price_date yyyy-MM-dd; De dag waarvoor de prijzen opgehaald moeten worden. Deze datum moet binnen de contractperiode liggen. (required)
     * @param  bool $allow_missing_cap_tar Default ‘false’; Als true dan mag de captar code ontbreken en/of de netwerkkosten. De rest van de prijzen worden dan wel opgeleverd. Als false dan zal de call uitvallen als er geen captar code is en/of de netwerkkosten ontbreken. (optional)
     * @param  string $combine_type Default ‘CombineGroup’; Geeft aan op welke manier de prijzen gegroepeerd moeten worden. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiCombinedPricesResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysPricesGetByContractWithHttpInfo($contract_id, $price_date, $allow_missing_cap_tar = null, $combine_type = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiCombinedPricesResult';
        $request = $this->sysPricesGetByContractRequest($contract_id, $price_date, $allow_missing_cap_tar, $combine_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiCombinedPricesResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysPricesGetByContractAsync
     *
     * Ophalen van de gecombineernde prijzen geldig op de meegegeven dag voor de aansluiting horend bij het contract.
     *
     * @param  string $contract_id Het Id van het contract waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  \DateTime $price_date yyyy-MM-dd; De dag waarvoor de prijzen opgehaald moeten worden. Deze datum moet binnen de contractperiode liggen. (required)
     * @param  bool $allow_missing_cap_tar Default ‘false’; Als true dan mag de captar code ontbreken en/of de netwerkkosten. De rest van de prijzen worden dan wel opgeleverd. Als false dan zal de call uitvallen als er geen captar code is en/of de netwerkkosten ontbreken. (optional)
     * @param  string $combine_type Default ‘CombineGroup’; Geeft aan op welke manier de prijzen gegroepeerd moeten worden. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysPricesGetByContractAsync($contract_id, $price_date, $allow_missing_cap_tar = null, $combine_type = null)
    {
        return $this->sysPricesGetByContractAsyncWithHttpInfo($contract_id, $price_date, $allow_missing_cap_tar, $combine_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysPricesGetByContractAsyncWithHttpInfo
     *
     * Ophalen van de gecombineernde prijzen geldig op de meegegeven dag voor de aansluiting horend bij het contract.
     *
     * @param  string $contract_id Het Id van het contract waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  \DateTime $price_date yyyy-MM-dd; De dag waarvoor de prijzen opgehaald moeten worden. Deze datum moet binnen de contractperiode liggen. (required)
     * @param  bool $allow_missing_cap_tar Default ‘false’; Als true dan mag de captar code ontbreken en/of de netwerkkosten. De rest van de prijzen worden dan wel opgeleverd. Als false dan zal de call uitvallen als er geen captar code is en/of de netwerkkosten ontbreken. (optional)
     * @param  string $combine_type Default ‘CombineGroup’; Geeft aan op welke manier de prijzen gegroepeerd moeten worden. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysPricesGetByContractAsyncWithHttpInfo($contract_id, $price_date, $allow_missing_cap_tar = null, $combine_type = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiCombinedPricesResult';
        $request = $this->sysPricesGetByContractRequest($contract_id, $price_date, $allow_missing_cap_tar, $combine_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysPricesGetByContract'
     *
     * @param  string $contract_id Het Id van het contract waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  \DateTime $price_date yyyy-MM-dd; De dag waarvoor de prijzen opgehaald moeten worden. Deze datum moet binnen de contractperiode liggen. (required)
     * @param  bool $allow_missing_cap_tar Default ‘false’; Als true dan mag de captar code ontbreken en/of de netwerkkosten. De rest van de prijzen worden dan wel opgeleverd. Als false dan zal de call uitvallen als er geen captar code is en/of de netwerkkosten ontbreken. (optional)
     * @param  string $combine_type Default ‘CombineGroup’; Geeft aan op welke manier de prijzen gegroepeerd moeten worden. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysPricesGetByContractRequest($contract_id, $price_date, $allow_missing_cap_tar = null, $combine_type = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling sysPricesGetByContract'
            );
        }
        // verify the required parameter 'price_date' is set
        if ($price_date === null || (is_array($price_date) && count($price_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_date when calling sysPricesGetByContract'
            );
        }

        $resourcePath = '/sysapi/v1.0/prices/energielevering/contracts/{contractId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($price_date !== null) {
            $queryParams['priceDate'] = ObjectSerializer::toQueryValue($price_date);
        }
        // query params
        if ($allow_missing_cap_tar !== null) {
            $queryParams['allowMissingCapTar'] = ObjectSerializer::toQueryValue($allow_missing_cap_tar);
        }
        // query params
        if ($combine_type !== null) {
            $queryParams['combineType'] = ObjectSerializer::toQueryValue($combine_type);
        }

        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contractId' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysPricesGetByPropositionId
     *
     * Ophalen van de gecombineernde prijzen geldig op de meegegeven dag voor de propositie.
     *
     * @param  string $proposition_id Het id van de propositie waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  \DateTime $price_date yyyy-MM-dd; De dag waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  string $grid_operator_ean Optioneel; De EAN van de netbeheerder. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $location_type Optioneel; De locatietype. Deze wordt gebruikt om te bepalen welke EB en ODE tarieven opgehaald moeten worden. Voor reguliere aansluitingen is deze parameter leeg. (optional)
     * @param  bool $is_residential Verplicht bij elektriciteit, n.v.t. bij gas; Verblijfsfunctie ja/nee. (optional)
     * @param  string $electricity_profile [Deprecated] Optioneel bij elektriciteit, n.v.t. bij gas; Het elektriciteitsprofiel. Alleen verplicht bij leveranciers die prijzen hebben per profiel. (optional)
     * @param  string $gas_profile Optioneel bij gas, n.v.t. bij elektriciteit; Het gasprofiel. Alleen verplicht bij leveranciers die prijzen hebben per profiel of bij leveranciers die gas transportkosten hebben. (optional)
     * @param  string $electricity_cap_tar_code Optioneel bij elektriciteit, n.v.t. bij gas; De CapTarCode. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $gas_cap_tar_code Optioneel bij gas, n.v.t. bij elektriciteit; De CapTarCode. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $grid_area_ean [Deprecated] Optioneel bij gas, n.v.t. bij elektriciteit; Netgebied/GOS EAN. Alleen verplicht bij leveranciers die regiotoeslag hebben per GOS EAN. (optional)
     * @param  string $gos_region [Deprecated] Optioneel bij gas, n.v.t. bij elektriciteit; GOS regio. Alleen verplicht bij leveranciers die regiotoeslag hebben per GOS regio. (optional)
     * @param  string $meelift_proposition_id Verplicht als er meelift is, n.v.t. als er geen meelift is; Het id van de meeliftpropositie waarvoor de prijzen opgehaald moeten worden. (optional)
     * @param  bool $has_reseller Optioneel; Hiermee kan worden aangegeven dat de prijzen incl. de reseller tarieven moeten worden teruggegeven. Ook als er geen Reseller property is vastgelegd bij de propositie. (optional)
     * @param  bool $allow_missing_cap_tar Default ‘false’; Als true dan mag de captar code ontbreken en/of de netwerkkosten. De rest van de prijzen worden dan wel opgeleverd. Als false dan zal de call uitvallen als er geen captar code is en/of de netwerkkosten ontbreken. (optional)
     * @param  string $combine_type Default ‘CombineGroup’; Geeft aan op welke manier de prijzen gegroepeerd moeten worden. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiCombinedPricesResult
     */
    public function sysPricesGetByPropositionId($proposition_id, $price_date, $grid_operator_ean = null, $location_type = null, $is_residential = null, $electricity_profile = null, $gas_profile = null, $electricity_cap_tar_code = null, $gas_cap_tar_code = null, $grid_area_ean = null, $gos_region = null, $meelift_proposition_id = null, $has_reseller = null, $allow_missing_cap_tar = null, $combine_type = null)
    {
        list($response) = $this->sysPricesGetByPropositionIdWithHttpInfo($proposition_id, $price_date, $grid_operator_ean, $location_type, $is_residential, $electricity_profile, $gas_profile, $electricity_cap_tar_code, $gas_cap_tar_code, $grid_area_ean, $gos_region, $meelift_proposition_id, $has_reseller, $allow_missing_cap_tar, $combine_type);
        return $response;
    }

    /**
     * Operation sysPricesGetByPropositionIdWithHttpInfo
     *
     * Ophalen van de gecombineernde prijzen geldig op de meegegeven dag voor de propositie.
     *
     * @param  string $proposition_id Het id van de propositie waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  \DateTime $price_date yyyy-MM-dd; De dag waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  string $grid_operator_ean Optioneel; De EAN van de netbeheerder. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $location_type Optioneel; De locatietype. Deze wordt gebruikt om te bepalen welke EB en ODE tarieven opgehaald moeten worden. Voor reguliere aansluitingen is deze parameter leeg. (optional)
     * @param  bool $is_residential Verplicht bij elektriciteit, n.v.t. bij gas; Verblijfsfunctie ja/nee. (optional)
     * @param  string $electricity_profile [Deprecated] Optioneel bij elektriciteit, n.v.t. bij gas; Het elektriciteitsprofiel. Alleen verplicht bij leveranciers die prijzen hebben per profiel. (optional)
     * @param  string $gas_profile Optioneel bij gas, n.v.t. bij elektriciteit; Het gasprofiel. Alleen verplicht bij leveranciers die prijzen hebben per profiel of bij leveranciers die gas transportkosten hebben. (optional)
     * @param  string $electricity_cap_tar_code Optioneel bij elektriciteit, n.v.t. bij gas; De CapTarCode. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $gas_cap_tar_code Optioneel bij gas, n.v.t. bij elektriciteit; De CapTarCode. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $grid_area_ean [Deprecated] Optioneel bij gas, n.v.t. bij elektriciteit; Netgebied/GOS EAN. Alleen verplicht bij leveranciers die regiotoeslag hebben per GOS EAN. (optional)
     * @param  string $gos_region [Deprecated] Optioneel bij gas, n.v.t. bij elektriciteit; GOS regio. Alleen verplicht bij leveranciers die regiotoeslag hebben per GOS regio. (optional)
     * @param  string $meelift_proposition_id Verplicht als er meelift is, n.v.t. als er geen meelift is; Het id van de meeliftpropositie waarvoor de prijzen opgehaald moeten worden. (optional)
     * @param  bool $has_reseller Optioneel; Hiermee kan worden aangegeven dat de prijzen incl. de reseller tarieven moeten worden teruggegeven. Ook als er geen Reseller property is vastgelegd bij de propositie. (optional)
     * @param  bool $allow_missing_cap_tar Default ‘false’; Als true dan mag de captar code ontbreken en/of de netwerkkosten. De rest van de prijzen worden dan wel opgeleverd. Als false dan zal de call uitvallen als er geen captar code is en/of de netwerkkosten ontbreken. (optional)
     * @param  string $combine_type Default ‘CombineGroup’; Geeft aan op welke manier de prijzen gegroepeerd moeten worden. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiCombinedPricesResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysPricesGetByPropositionIdWithHttpInfo($proposition_id, $price_date, $grid_operator_ean = null, $location_type = null, $is_residential = null, $electricity_profile = null, $gas_profile = null, $electricity_cap_tar_code = null, $gas_cap_tar_code = null, $grid_area_ean = null, $gos_region = null, $meelift_proposition_id = null, $has_reseller = null, $allow_missing_cap_tar = null, $combine_type = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiCombinedPricesResult';
        $request = $this->sysPricesGetByPropositionIdRequest($proposition_id, $price_date, $grid_operator_ean, $location_type, $is_residential, $electricity_profile, $gas_profile, $electricity_cap_tar_code, $gas_cap_tar_code, $grid_area_ean, $gos_region, $meelift_proposition_id, $has_reseller, $allow_missing_cap_tar, $combine_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiCombinedPricesResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysPricesGetByPropositionIdAsync
     *
     * Ophalen van de gecombineernde prijzen geldig op de meegegeven dag voor de propositie.
     *
     * @param  string $proposition_id Het id van de propositie waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  \DateTime $price_date yyyy-MM-dd; De dag waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  string $grid_operator_ean Optioneel; De EAN van de netbeheerder. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $location_type Optioneel; De locatietype. Deze wordt gebruikt om te bepalen welke EB en ODE tarieven opgehaald moeten worden. Voor reguliere aansluitingen is deze parameter leeg. (optional)
     * @param  bool $is_residential Verplicht bij elektriciteit, n.v.t. bij gas; Verblijfsfunctie ja/nee. (optional)
     * @param  string $electricity_profile [Deprecated] Optioneel bij elektriciteit, n.v.t. bij gas; Het elektriciteitsprofiel. Alleen verplicht bij leveranciers die prijzen hebben per profiel. (optional)
     * @param  string $gas_profile Optioneel bij gas, n.v.t. bij elektriciteit; Het gasprofiel. Alleen verplicht bij leveranciers die prijzen hebben per profiel of bij leveranciers die gas transportkosten hebben. (optional)
     * @param  string $electricity_cap_tar_code Optioneel bij elektriciteit, n.v.t. bij gas; De CapTarCode. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $gas_cap_tar_code Optioneel bij gas, n.v.t. bij elektriciteit; De CapTarCode. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $grid_area_ean [Deprecated] Optioneel bij gas, n.v.t. bij elektriciteit; Netgebied/GOS EAN. Alleen verplicht bij leveranciers die regiotoeslag hebben per GOS EAN. (optional)
     * @param  string $gos_region [Deprecated] Optioneel bij gas, n.v.t. bij elektriciteit; GOS regio. Alleen verplicht bij leveranciers die regiotoeslag hebben per GOS regio. (optional)
     * @param  string $meelift_proposition_id Verplicht als er meelift is, n.v.t. als er geen meelift is; Het id van de meeliftpropositie waarvoor de prijzen opgehaald moeten worden. (optional)
     * @param  bool $has_reseller Optioneel; Hiermee kan worden aangegeven dat de prijzen incl. de reseller tarieven moeten worden teruggegeven. Ook als er geen Reseller property is vastgelegd bij de propositie. (optional)
     * @param  bool $allow_missing_cap_tar Default ‘false’; Als true dan mag de captar code ontbreken en/of de netwerkkosten. De rest van de prijzen worden dan wel opgeleverd. Als false dan zal de call uitvallen als er geen captar code is en/of de netwerkkosten ontbreken. (optional)
     * @param  string $combine_type Default ‘CombineGroup’; Geeft aan op welke manier de prijzen gegroepeerd moeten worden. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysPricesGetByPropositionIdAsync($proposition_id, $price_date, $grid_operator_ean = null, $location_type = null, $is_residential = null, $electricity_profile = null, $gas_profile = null, $electricity_cap_tar_code = null, $gas_cap_tar_code = null, $grid_area_ean = null, $gos_region = null, $meelift_proposition_id = null, $has_reseller = null, $allow_missing_cap_tar = null, $combine_type = null)
    {
        return $this->sysPricesGetByPropositionIdAsyncWithHttpInfo($proposition_id, $price_date, $grid_operator_ean, $location_type, $is_residential, $electricity_profile, $gas_profile, $electricity_cap_tar_code, $gas_cap_tar_code, $grid_area_ean, $gos_region, $meelift_proposition_id, $has_reseller, $allow_missing_cap_tar, $combine_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysPricesGetByPropositionIdAsyncWithHttpInfo
     *
     * Ophalen van de gecombineernde prijzen geldig op de meegegeven dag voor de propositie.
     *
     * @param  string $proposition_id Het id van de propositie waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  \DateTime $price_date yyyy-MM-dd; De dag waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  string $grid_operator_ean Optioneel; De EAN van de netbeheerder. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $location_type Optioneel; De locatietype. Deze wordt gebruikt om te bepalen welke EB en ODE tarieven opgehaald moeten worden. Voor reguliere aansluitingen is deze parameter leeg. (optional)
     * @param  bool $is_residential Verplicht bij elektriciteit, n.v.t. bij gas; Verblijfsfunctie ja/nee. (optional)
     * @param  string $electricity_profile [Deprecated] Optioneel bij elektriciteit, n.v.t. bij gas; Het elektriciteitsprofiel. Alleen verplicht bij leveranciers die prijzen hebben per profiel. (optional)
     * @param  string $gas_profile Optioneel bij gas, n.v.t. bij elektriciteit; Het gasprofiel. Alleen verplicht bij leveranciers die prijzen hebben per profiel of bij leveranciers die gas transportkosten hebben. (optional)
     * @param  string $electricity_cap_tar_code Optioneel bij elektriciteit, n.v.t. bij gas; De CapTarCode. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $gas_cap_tar_code Optioneel bij gas, n.v.t. bij elektriciteit; De CapTarCode. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $grid_area_ean [Deprecated] Optioneel bij gas, n.v.t. bij elektriciteit; Netgebied/GOS EAN. Alleen verplicht bij leveranciers die regiotoeslag hebben per GOS EAN. (optional)
     * @param  string $gos_region [Deprecated] Optioneel bij gas, n.v.t. bij elektriciteit; GOS regio. Alleen verplicht bij leveranciers die regiotoeslag hebben per GOS regio. (optional)
     * @param  string $meelift_proposition_id Verplicht als er meelift is, n.v.t. als er geen meelift is; Het id van de meeliftpropositie waarvoor de prijzen opgehaald moeten worden. (optional)
     * @param  bool $has_reseller Optioneel; Hiermee kan worden aangegeven dat de prijzen incl. de reseller tarieven moeten worden teruggegeven. Ook als er geen Reseller property is vastgelegd bij de propositie. (optional)
     * @param  bool $allow_missing_cap_tar Default ‘false’; Als true dan mag de captar code ontbreken en/of de netwerkkosten. De rest van de prijzen worden dan wel opgeleverd. Als false dan zal de call uitvallen als er geen captar code is en/of de netwerkkosten ontbreken. (optional)
     * @param  string $combine_type Default ‘CombineGroup’; Geeft aan op welke manier de prijzen gegroepeerd moeten worden. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysPricesGetByPropositionIdAsyncWithHttpInfo($proposition_id, $price_date, $grid_operator_ean = null, $location_type = null, $is_residential = null, $electricity_profile = null, $gas_profile = null, $electricity_cap_tar_code = null, $gas_cap_tar_code = null, $grid_area_ean = null, $gos_region = null, $meelift_proposition_id = null, $has_reseller = null, $allow_missing_cap_tar = null, $combine_type = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiCombinedPricesResult';
        $request = $this->sysPricesGetByPropositionIdRequest($proposition_id, $price_date, $grid_operator_ean, $location_type, $is_residential, $electricity_profile, $gas_profile, $electricity_cap_tar_code, $gas_cap_tar_code, $grid_area_ean, $gos_region, $meelift_proposition_id, $has_reseller, $allow_missing_cap_tar, $combine_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysPricesGetByPropositionId'
     *
     * @param  string $proposition_id Het id van de propositie waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  \DateTime $price_date yyyy-MM-dd; De dag waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  string $grid_operator_ean Optioneel; De EAN van de netbeheerder. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $location_type Optioneel; De locatietype. Deze wordt gebruikt om te bepalen welke EB en ODE tarieven opgehaald moeten worden. Voor reguliere aansluitingen is deze parameter leeg. (optional)
     * @param  bool $is_residential Verplicht bij elektriciteit, n.v.t. bij gas; Verblijfsfunctie ja/nee. (optional)
     * @param  string $electricity_profile [Deprecated] Optioneel bij elektriciteit, n.v.t. bij gas; Het elektriciteitsprofiel. Alleen verplicht bij leveranciers die prijzen hebben per profiel. (optional)
     * @param  string $gas_profile Optioneel bij gas, n.v.t. bij elektriciteit; Het gasprofiel. Alleen verplicht bij leveranciers die prijzen hebben per profiel of bij leveranciers die gas transportkosten hebben. (optional)
     * @param  string $electricity_cap_tar_code Optioneel bij elektriciteit, n.v.t. bij gas; De CapTarCode. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $gas_cap_tar_code Optioneel bij gas, n.v.t. bij elektriciteit; De CapTarCode. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $grid_area_ean [Deprecated] Optioneel bij gas, n.v.t. bij elektriciteit; Netgebied/GOS EAN. Alleen verplicht bij leveranciers die regiotoeslag hebben per GOS EAN. (optional)
     * @param  string $gos_region [Deprecated] Optioneel bij gas, n.v.t. bij elektriciteit; GOS regio. Alleen verplicht bij leveranciers die regiotoeslag hebben per GOS regio. (optional)
     * @param  string $meelift_proposition_id Verplicht als er meelift is, n.v.t. als er geen meelift is; Het id van de meeliftpropositie waarvoor de prijzen opgehaald moeten worden. (optional)
     * @param  bool $has_reseller Optioneel; Hiermee kan worden aangegeven dat de prijzen incl. de reseller tarieven moeten worden teruggegeven. Ook als er geen Reseller property is vastgelegd bij de propositie. (optional)
     * @param  bool $allow_missing_cap_tar Default ‘false’; Als true dan mag de captar code ontbreken en/of de netwerkkosten. De rest van de prijzen worden dan wel opgeleverd. Als false dan zal de call uitvallen als er geen captar code is en/of de netwerkkosten ontbreken. (optional)
     * @param  string $combine_type Default ‘CombineGroup’; Geeft aan op welke manier de prijzen gegroepeerd moeten worden. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysPricesGetByPropositionIdRequest($proposition_id, $price_date, $grid_operator_ean = null, $location_type = null, $is_residential = null, $electricity_profile = null, $gas_profile = null, $electricity_cap_tar_code = null, $gas_cap_tar_code = null, $grid_area_ean = null, $gos_region = null, $meelift_proposition_id = null, $has_reseller = null, $allow_missing_cap_tar = null, $combine_type = null)
    {
        // verify the required parameter 'proposition_id' is set
        if ($proposition_id === null || (is_array($proposition_id) && count($proposition_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proposition_id when calling sysPricesGetByPropositionId'
            );
        }
        // verify the required parameter 'price_date' is set
        if ($price_date === null || (is_array($price_date) && count($price_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_date when calling sysPricesGetByPropositionId'
            );
        }

        $resourcePath = '/sysapi/v1.0/prices/energielevering/propositions/{propositionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($price_date !== null) {
            $queryParams['priceDate'] = ObjectSerializer::toQueryValue($price_date);
        }
        // query params
        if ($grid_operator_ean !== null) {
            $queryParams['gridOperatorEAN'] = ObjectSerializer::toQueryValue($grid_operator_ean);
        }
        // query params
        if ($location_type !== null) {
            $queryParams['locationType'] = ObjectSerializer::toQueryValue($location_type);
        }
        // query params
        if ($is_residential !== null) {
            $queryParams['isResidential'] = ObjectSerializer::toQueryValue($is_residential);
        }
        // query params
        if ($electricity_profile !== null) {
            $queryParams['electricityProfile'] = ObjectSerializer::toQueryValue($electricity_profile);
        }
        // query params
        if ($gas_profile !== null) {
            $queryParams['gasProfile'] = ObjectSerializer::toQueryValue($gas_profile);
        }
        // query params
        if ($electricity_cap_tar_code !== null) {
            $queryParams['electricityCapTarCode'] = ObjectSerializer::toQueryValue($electricity_cap_tar_code);
        }
        // query params
        if ($gas_cap_tar_code !== null) {
            $queryParams['gasCapTarCode'] = ObjectSerializer::toQueryValue($gas_cap_tar_code);
        }
        // query params
        if ($grid_area_ean !== null) {
            $queryParams['gridAreaEAN'] = ObjectSerializer::toQueryValue($grid_area_ean);
        }
        // query params
        if ($gos_region !== null) {
            $queryParams['gosRegion'] = ObjectSerializer::toQueryValue($gos_region);
        }
        // query params
        if ($meelift_proposition_id !== null) {
            $queryParams['meeliftPropositionId'] = ObjectSerializer::toQueryValue($meelift_proposition_id);
        }
        // query params
        if ($has_reseller !== null) {
            $queryParams['hasReseller'] = ObjectSerializer::toQueryValue($has_reseller);
        }
        // query params
        if ($allow_missing_cap_tar !== null) {
            $queryParams['allowMissingCapTar'] = ObjectSerializer::toQueryValue($allow_missing_cap_tar);
        }
        // query params
        if ($combine_type !== null) {
            $queryParams['combineType'] = ObjectSerializer::toQueryValue($combine_type);
        }

        // path params
        if ($proposition_id !== null) {
            $resourcePath = str_replace(
                '{' . 'propositionId' . '}',
                ObjectSerializer::toPathValue($proposition_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysPricesGetByPropositionReference
     *
     * Ophalen van de gecombineernde prijzen geldig op de meegegeven dag voor de propositie op basis van de propositiereferentie.
     *
     * @param  string $proposition_reference De referentie van de propositie waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  \DateTime $price_date yyyy-MM-dd; De dag waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  string $grid_operator_ean Optioneel; De EAN van de netbeheerder. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $location_type Optioneel; De locatietype. Deze wordt gebruikt om te bepalen welke EB en ODE tarieven opgehaald moeten worden. Voor reguliere aansluitingen is deze parameter leeg. (optional)
     * @param  bool $is_residential Verplicht bij elektriciteit, n.v.t. bij gas; Verblijfsfunctie ja/nee. (optional)
     * @param  string $electricity_profile [Deprecated] Optioneel bij elektriciteit, n.v.t. bij gas; Het elektriciteitsprofiel. Alleen verplicht bij leveranciers die prijzen hebben per profiel. (optional)
     * @param  string $gas_profile Optioneel bij gas, n.v.t. bij elektriciteit; Het gasprofiel. Alleen verplicht bij leveranciers die prijzen hebben per profiel of bij leveranciers die gas transportkosten hebben. (optional)
     * @param  string $electricity_cap_tar_code Optioneel bij elektriciteit, n.v.t. bij gas; De CapTarCode. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $gas_cap_tar_code Optioneel bij gas, n.v.t. bij elektriciteit; De CapTarCode. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $grid_area_ean [Deprecated] Optioneel bij gas, n.v.t. bij elektriciteit; Netgebied/GOS EAN. Alleen verplicht bij leveranciers die regiotoeslag hebben per GOS EAN. (optional)
     * @param  string $gos_region [Deprecated] Optioneel bij gas, n.v.t. bij elektriciteit; GOS regio. Alleen verplicht bij leveranciers die regiotoeslag hebben per GOS regio. (optional)
     * @param  string $meelift_proposition_reference Verplicht als er meelift is, n.v.t. als er geen meelift is; De referentie van de meeliftpropositie waarvoor de prijzen opgehaald moeten worden. (optional)
     * @param  bool $has_reseller Optioneel; Hiermee kan worden aangegeven dat de prijzen incl. de reseller tarieven moeten worden teruggegeven. Ook als er geen Reseller property is vastgelegd bij de propositie. (optional)
     * @param  bool $allow_missing_cap_tar Default ‘false’; Als true dan mag de captar code ontbreken en/of de netwerkkosten. De rest van de prijzen worden dan wel opgeleverd. Als false dan zal de call uitvallen als er geen captar code is en/of de netwerkkosten ontbreken. (optional)
     * @param  string $combine_type Default ‘CombineGroup’; Geeft aan op welke manier de prijzen gegroepeerd moeten worden. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiCombinedPricesResult
     */
    public function sysPricesGetByPropositionReference($proposition_reference, $price_date, $grid_operator_ean = null, $location_type = null, $is_residential = null, $electricity_profile = null, $gas_profile = null, $electricity_cap_tar_code = null, $gas_cap_tar_code = null, $grid_area_ean = null, $gos_region = null, $meelift_proposition_reference = null, $has_reseller = null, $allow_missing_cap_tar = null, $combine_type = null)
    {
        list($response) = $this->sysPricesGetByPropositionReferenceWithHttpInfo($proposition_reference, $price_date, $grid_operator_ean, $location_type, $is_residential, $electricity_profile, $gas_profile, $electricity_cap_tar_code, $gas_cap_tar_code, $grid_area_ean, $gos_region, $meelift_proposition_reference, $has_reseller, $allow_missing_cap_tar, $combine_type);
        return $response;
    }

    /**
     * Operation sysPricesGetByPropositionReferenceWithHttpInfo
     *
     * Ophalen van de gecombineernde prijzen geldig op de meegegeven dag voor de propositie op basis van de propositiereferentie.
     *
     * @param  string $proposition_reference De referentie van de propositie waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  \DateTime $price_date yyyy-MM-dd; De dag waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  string $grid_operator_ean Optioneel; De EAN van de netbeheerder. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $location_type Optioneel; De locatietype. Deze wordt gebruikt om te bepalen welke EB en ODE tarieven opgehaald moeten worden. Voor reguliere aansluitingen is deze parameter leeg. (optional)
     * @param  bool $is_residential Verplicht bij elektriciteit, n.v.t. bij gas; Verblijfsfunctie ja/nee. (optional)
     * @param  string $electricity_profile [Deprecated] Optioneel bij elektriciteit, n.v.t. bij gas; Het elektriciteitsprofiel. Alleen verplicht bij leveranciers die prijzen hebben per profiel. (optional)
     * @param  string $gas_profile Optioneel bij gas, n.v.t. bij elektriciteit; Het gasprofiel. Alleen verplicht bij leveranciers die prijzen hebben per profiel of bij leveranciers die gas transportkosten hebben. (optional)
     * @param  string $electricity_cap_tar_code Optioneel bij elektriciteit, n.v.t. bij gas; De CapTarCode. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $gas_cap_tar_code Optioneel bij gas, n.v.t. bij elektriciteit; De CapTarCode. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $grid_area_ean [Deprecated] Optioneel bij gas, n.v.t. bij elektriciteit; Netgebied/GOS EAN. Alleen verplicht bij leveranciers die regiotoeslag hebben per GOS EAN. (optional)
     * @param  string $gos_region [Deprecated] Optioneel bij gas, n.v.t. bij elektriciteit; GOS regio. Alleen verplicht bij leveranciers die regiotoeslag hebben per GOS regio. (optional)
     * @param  string $meelift_proposition_reference Verplicht als er meelift is, n.v.t. als er geen meelift is; De referentie van de meeliftpropositie waarvoor de prijzen opgehaald moeten worden. (optional)
     * @param  bool $has_reseller Optioneel; Hiermee kan worden aangegeven dat de prijzen incl. de reseller tarieven moeten worden teruggegeven. Ook als er geen Reseller property is vastgelegd bij de propositie. (optional)
     * @param  bool $allow_missing_cap_tar Default ‘false’; Als true dan mag de captar code ontbreken en/of de netwerkkosten. De rest van de prijzen worden dan wel opgeleverd. Als false dan zal de call uitvallen als er geen captar code is en/of de netwerkkosten ontbreken. (optional)
     * @param  string $combine_type Default ‘CombineGroup’; Geeft aan op welke manier de prijzen gegroepeerd moeten worden. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiCombinedPricesResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysPricesGetByPropositionReferenceWithHttpInfo($proposition_reference, $price_date, $grid_operator_ean = null, $location_type = null, $is_residential = null, $electricity_profile = null, $gas_profile = null, $electricity_cap_tar_code = null, $gas_cap_tar_code = null, $grid_area_ean = null, $gos_region = null, $meelift_proposition_reference = null, $has_reseller = null, $allow_missing_cap_tar = null, $combine_type = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiCombinedPricesResult';
        $request = $this->sysPricesGetByPropositionReferenceRequest($proposition_reference, $price_date, $grid_operator_ean, $location_type, $is_residential, $electricity_profile, $gas_profile, $electricity_cap_tar_code, $gas_cap_tar_code, $grid_area_ean, $gos_region, $meelift_proposition_reference, $has_reseller, $allow_missing_cap_tar, $combine_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiCombinedPricesResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysPricesGetByPropositionReferenceAsync
     *
     * Ophalen van de gecombineernde prijzen geldig op de meegegeven dag voor de propositie op basis van de propositiereferentie.
     *
     * @param  string $proposition_reference De referentie van de propositie waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  \DateTime $price_date yyyy-MM-dd; De dag waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  string $grid_operator_ean Optioneel; De EAN van de netbeheerder. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $location_type Optioneel; De locatietype. Deze wordt gebruikt om te bepalen welke EB en ODE tarieven opgehaald moeten worden. Voor reguliere aansluitingen is deze parameter leeg. (optional)
     * @param  bool $is_residential Verplicht bij elektriciteit, n.v.t. bij gas; Verblijfsfunctie ja/nee. (optional)
     * @param  string $electricity_profile [Deprecated] Optioneel bij elektriciteit, n.v.t. bij gas; Het elektriciteitsprofiel. Alleen verplicht bij leveranciers die prijzen hebben per profiel. (optional)
     * @param  string $gas_profile Optioneel bij gas, n.v.t. bij elektriciteit; Het gasprofiel. Alleen verplicht bij leveranciers die prijzen hebben per profiel of bij leveranciers die gas transportkosten hebben. (optional)
     * @param  string $electricity_cap_tar_code Optioneel bij elektriciteit, n.v.t. bij gas; De CapTarCode. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $gas_cap_tar_code Optioneel bij gas, n.v.t. bij elektriciteit; De CapTarCode. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $grid_area_ean [Deprecated] Optioneel bij gas, n.v.t. bij elektriciteit; Netgebied/GOS EAN. Alleen verplicht bij leveranciers die regiotoeslag hebben per GOS EAN. (optional)
     * @param  string $gos_region [Deprecated] Optioneel bij gas, n.v.t. bij elektriciteit; GOS regio. Alleen verplicht bij leveranciers die regiotoeslag hebben per GOS regio. (optional)
     * @param  string $meelift_proposition_reference Verplicht als er meelift is, n.v.t. als er geen meelift is; De referentie van de meeliftpropositie waarvoor de prijzen opgehaald moeten worden. (optional)
     * @param  bool $has_reseller Optioneel; Hiermee kan worden aangegeven dat de prijzen incl. de reseller tarieven moeten worden teruggegeven. Ook als er geen Reseller property is vastgelegd bij de propositie. (optional)
     * @param  bool $allow_missing_cap_tar Default ‘false’; Als true dan mag de captar code ontbreken en/of de netwerkkosten. De rest van de prijzen worden dan wel opgeleverd. Als false dan zal de call uitvallen als er geen captar code is en/of de netwerkkosten ontbreken. (optional)
     * @param  string $combine_type Default ‘CombineGroup’; Geeft aan op welke manier de prijzen gegroepeerd moeten worden. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysPricesGetByPropositionReferenceAsync($proposition_reference, $price_date, $grid_operator_ean = null, $location_type = null, $is_residential = null, $electricity_profile = null, $gas_profile = null, $electricity_cap_tar_code = null, $gas_cap_tar_code = null, $grid_area_ean = null, $gos_region = null, $meelift_proposition_reference = null, $has_reseller = null, $allow_missing_cap_tar = null, $combine_type = null)
    {
        return $this->sysPricesGetByPropositionReferenceAsyncWithHttpInfo($proposition_reference, $price_date, $grid_operator_ean, $location_type, $is_residential, $electricity_profile, $gas_profile, $electricity_cap_tar_code, $gas_cap_tar_code, $grid_area_ean, $gos_region, $meelift_proposition_reference, $has_reseller, $allow_missing_cap_tar, $combine_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysPricesGetByPropositionReferenceAsyncWithHttpInfo
     *
     * Ophalen van de gecombineernde prijzen geldig op de meegegeven dag voor de propositie op basis van de propositiereferentie.
     *
     * @param  string $proposition_reference De referentie van de propositie waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  \DateTime $price_date yyyy-MM-dd; De dag waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  string $grid_operator_ean Optioneel; De EAN van de netbeheerder. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $location_type Optioneel; De locatietype. Deze wordt gebruikt om te bepalen welke EB en ODE tarieven opgehaald moeten worden. Voor reguliere aansluitingen is deze parameter leeg. (optional)
     * @param  bool $is_residential Verplicht bij elektriciteit, n.v.t. bij gas; Verblijfsfunctie ja/nee. (optional)
     * @param  string $electricity_profile [Deprecated] Optioneel bij elektriciteit, n.v.t. bij gas; Het elektriciteitsprofiel. Alleen verplicht bij leveranciers die prijzen hebben per profiel. (optional)
     * @param  string $gas_profile Optioneel bij gas, n.v.t. bij elektriciteit; Het gasprofiel. Alleen verplicht bij leveranciers die prijzen hebben per profiel of bij leveranciers die gas transportkosten hebben. (optional)
     * @param  string $electricity_cap_tar_code Optioneel bij elektriciteit, n.v.t. bij gas; De CapTarCode. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $gas_cap_tar_code Optioneel bij gas, n.v.t. bij elektriciteit; De CapTarCode. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $grid_area_ean [Deprecated] Optioneel bij gas, n.v.t. bij elektriciteit; Netgebied/GOS EAN. Alleen verplicht bij leveranciers die regiotoeslag hebben per GOS EAN. (optional)
     * @param  string $gos_region [Deprecated] Optioneel bij gas, n.v.t. bij elektriciteit; GOS regio. Alleen verplicht bij leveranciers die regiotoeslag hebben per GOS regio. (optional)
     * @param  string $meelift_proposition_reference Verplicht als er meelift is, n.v.t. als er geen meelift is; De referentie van de meeliftpropositie waarvoor de prijzen opgehaald moeten worden. (optional)
     * @param  bool $has_reseller Optioneel; Hiermee kan worden aangegeven dat de prijzen incl. de reseller tarieven moeten worden teruggegeven. Ook als er geen Reseller property is vastgelegd bij de propositie. (optional)
     * @param  bool $allow_missing_cap_tar Default ‘false’; Als true dan mag de captar code ontbreken en/of de netwerkkosten. De rest van de prijzen worden dan wel opgeleverd. Als false dan zal de call uitvallen als er geen captar code is en/of de netwerkkosten ontbreken. (optional)
     * @param  string $combine_type Default ‘CombineGroup’; Geeft aan op welke manier de prijzen gegroepeerd moeten worden. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysPricesGetByPropositionReferenceAsyncWithHttpInfo($proposition_reference, $price_date, $grid_operator_ean = null, $location_type = null, $is_residential = null, $electricity_profile = null, $gas_profile = null, $electricity_cap_tar_code = null, $gas_cap_tar_code = null, $grid_area_ean = null, $gos_region = null, $meelift_proposition_reference = null, $has_reseller = null, $allow_missing_cap_tar = null, $combine_type = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiCombinedPricesResult';
        $request = $this->sysPricesGetByPropositionReferenceRequest($proposition_reference, $price_date, $grid_operator_ean, $location_type, $is_residential, $electricity_profile, $gas_profile, $electricity_cap_tar_code, $gas_cap_tar_code, $grid_area_ean, $gos_region, $meelift_proposition_reference, $has_reseller, $allow_missing_cap_tar, $combine_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysPricesGetByPropositionReference'
     *
     * @param  string $proposition_reference De referentie van de propositie waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  \DateTime $price_date yyyy-MM-dd; De dag waarvoor de prijzen opgehaald moeten worden. (required)
     * @param  string $grid_operator_ean Optioneel; De EAN van de netbeheerder. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $location_type Optioneel; De locatietype. Deze wordt gebruikt om te bepalen welke EB en ODE tarieven opgehaald moeten worden. Voor reguliere aansluitingen is deze parameter leeg. (optional)
     * @param  bool $is_residential Verplicht bij elektriciteit, n.v.t. bij gas; Verblijfsfunctie ja/nee. (optional)
     * @param  string $electricity_profile [Deprecated] Optioneel bij elektriciteit, n.v.t. bij gas; Het elektriciteitsprofiel. Alleen verplicht bij leveranciers die prijzen hebben per profiel. (optional)
     * @param  string $gas_profile Optioneel bij gas, n.v.t. bij elektriciteit; Het gasprofiel. Alleen verplicht bij leveranciers die prijzen hebben per profiel of bij leveranciers die gas transportkosten hebben. (optional)
     * @param  string $electricity_cap_tar_code Optioneel bij elektriciteit, n.v.t. bij gas; De CapTarCode. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $gas_cap_tar_code Optioneel bij gas, n.v.t. bij elektriciteit; De CapTarCode. Gebruikt om de netwerkkosten te bepalen. N.v.t. bij grootverbruik en niet verplicht bij kleinverbruik als &#39;allowMissingCapTar &#x3D;&#x3D; true&#39;. In dat geval worden de netwerkkosten niet toegevoegd aan het resultaat. (optional)
     * @param  string $grid_area_ean [Deprecated] Optioneel bij gas, n.v.t. bij elektriciteit; Netgebied/GOS EAN. Alleen verplicht bij leveranciers die regiotoeslag hebben per GOS EAN. (optional)
     * @param  string $gos_region [Deprecated] Optioneel bij gas, n.v.t. bij elektriciteit; GOS regio. Alleen verplicht bij leveranciers die regiotoeslag hebben per GOS regio. (optional)
     * @param  string $meelift_proposition_reference Verplicht als er meelift is, n.v.t. als er geen meelift is; De referentie van de meeliftpropositie waarvoor de prijzen opgehaald moeten worden. (optional)
     * @param  bool $has_reseller Optioneel; Hiermee kan worden aangegeven dat de prijzen incl. de reseller tarieven moeten worden teruggegeven. Ook als er geen Reseller property is vastgelegd bij de propositie. (optional)
     * @param  bool $allow_missing_cap_tar Default ‘false’; Als true dan mag de captar code ontbreken en/of de netwerkkosten. De rest van de prijzen worden dan wel opgeleverd. Als false dan zal de call uitvallen als er geen captar code is en/of de netwerkkosten ontbreken. (optional)
     * @param  string $combine_type Default ‘CombineGroup’; Geeft aan op welke manier de prijzen gegroepeerd moeten worden. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysPricesGetByPropositionReferenceRequest($proposition_reference, $price_date, $grid_operator_ean = null, $location_type = null, $is_residential = null, $electricity_profile = null, $gas_profile = null, $electricity_cap_tar_code = null, $gas_cap_tar_code = null, $grid_area_ean = null, $gos_region = null, $meelift_proposition_reference = null, $has_reseller = null, $allow_missing_cap_tar = null, $combine_type = null)
    {
        // verify the required parameter 'proposition_reference' is set
        if ($proposition_reference === null || (is_array($proposition_reference) && count($proposition_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proposition_reference when calling sysPricesGetByPropositionReference'
            );
        }
        // verify the required parameter 'price_date' is set
        if ($price_date === null || (is_array($price_date) && count($price_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_date when calling sysPricesGetByPropositionReference'
            );
        }

        $resourcePath = '/sysapi/v1.0/prices/energielevering/propositions/byReference/{propositionReference}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($price_date !== null) {
            $queryParams['priceDate'] = ObjectSerializer::toQueryValue($price_date);
        }
        // query params
        if ($grid_operator_ean !== null) {
            $queryParams['gridOperatorEAN'] = ObjectSerializer::toQueryValue($grid_operator_ean);
        }
        // query params
        if ($location_type !== null) {
            $queryParams['locationType'] = ObjectSerializer::toQueryValue($location_type);
        }
        // query params
        if ($is_residential !== null) {
            $queryParams['isResidential'] = ObjectSerializer::toQueryValue($is_residential);
        }
        // query params
        if ($electricity_profile !== null) {
            $queryParams['electricityProfile'] = ObjectSerializer::toQueryValue($electricity_profile);
        }
        // query params
        if ($gas_profile !== null) {
            $queryParams['gasProfile'] = ObjectSerializer::toQueryValue($gas_profile);
        }
        // query params
        if ($electricity_cap_tar_code !== null) {
            $queryParams['electricityCapTarCode'] = ObjectSerializer::toQueryValue($electricity_cap_tar_code);
        }
        // query params
        if ($gas_cap_tar_code !== null) {
            $queryParams['gasCapTarCode'] = ObjectSerializer::toQueryValue($gas_cap_tar_code);
        }
        // query params
        if ($grid_area_ean !== null) {
            $queryParams['gridAreaEAN'] = ObjectSerializer::toQueryValue($grid_area_ean);
        }
        // query params
        if ($gos_region !== null) {
            $queryParams['gosRegion'] = ObjectSerializer::toQueryValue($gos_region);
        }
        // query params
        if ($meelift_proposition_reference !== null) {
            $queryParams['meeliftPropositionReference'] = ObjectSerializer::toQueryValue($meelift_proposition_reference);
        }
        // query params
        if ($has_reseller !== null) {
            $queryParams['hasReseller'] = ObjectSerializer::toQueryValue($has_reseller);
        }
        // query params
        if ($allow_missing_cap_tar !== null) {
            $queryParams['allowMissingCapTar'] = ObjectSerializer::toQueryValue($allow_missing_cap_tar);
        }
        // query params
        if ($combine_type !== null) {
            $queryParams['combineType'] = ObjectSerializer::toQueryValue($combine_type);
        }

        // path params
        if ($proposition_reference !== null) {
            $resourcePath = str_replace(
                '{' . 'propositionReference' . '}',
                ObjectSerializer::toPathValue($proposition_reference),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
